!function(B){var U={};function x(Q){if(U[Q])return U[Q].exports;var F=U[Q]={i:Q,l:!1,exports:{}};return B[Q].call(F.exports,F,F.exports,x),F.l=!0,F.exports}x.m=B,x.c=U,x.d=function(Q,F,B){x.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:B})},x.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},x.t=function(F,Q){if(1&Q&&(F=x(F)),8&Q)return F;if(4&Q&&"object"==typeof F&&F&&F.__esModule)return F;var B=Object.create(null);if(x.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:F}),2&Q&&"string"!=typeof F)for(var U in F)x.d(B,U,function(Q){return F[Q]}.bind(null,U));return B},x.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return x.d(F,"a",F),F},x.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},x.p="",x(x.s=2)}([function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n*\n* UI on top of main sliding area (caption, arrows, close button, etc.).\n* Built just using public methods/properties of PhotoSwipe.\n* \n*/\n(function (root, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(this, function () {\n  'use strict';\n\n  var PhotoSwipeUI_Default = function (pswp, framework) {\n    var ui = this;\n\n    var _overlayUIUpdated = false,\n        _controlsVisible = true,\n        _fullscrenAPI,\n        _controls,\n        _captionContainer,\n        _fakeCaptionContainer,\n        _indexIndicator,\n        _shareButton,\n        _shareModal,\n        _shareModalHidden = true,\n        _initalCloseOnScrollValue,\n        _isIdle,\n        _listen,\n        _loadingIndicator,\n        _loadingIndicatorHidden,\n        _loadingIndicatorTimeout,\n        _galleryHasOneSlide,\n        _options,\n        _defaultUIOptions = {\n      barsSize: {\n        top: 44,\n        bottom: 'auto'\n      },\n      closeElClasses: ['item', 'caption', 'zoom-wrap', 'ui', 'top-bar'],\n      timeToIdle: 4000,\n      timeToIdleOutside: 1000,\n      loadingIndicatorDelay: 1000,\n      // 2s\n      addCaptionHTMLFn: function (item, captionEl\n      /*, isFake */\n      ) {\n        if (!item.title) {\n          captionEl.children[0].innerHTML = '';\n          return false;\n        }\n\n        captionEl.children[0].innerHTML = item.title;\n        return true;\n      },\n      closeEl: true,\n      captionEl: true,\n      fullscreenEl: true,\n      zoomEl: true,\n      shareEl: true,\n      counterEl: true,\n      arrowEl: true,\n      preloaderEl: true,\n      tapToClose: false,\n      tapToToggleControls: true,\n      clickToCloseNonZoomable: true,\n      shareButtons: [{\n        id: 'facebook',\n        label: 'Share on Facebook',\n        url: 'https://www.facebook.com/sharer/sharer.php?u={{url}}'\n      }, {\n        id: 'twitter',\n        label: 'Tweet',\n        url: 'https://twitter.com/intent/tweet?text={{text}}&url={{url}}'\n      }, {\n        id: 'pinterest',\n        label: 'Pin it',\n        url: 'http://www.pinterest.com/pin/create/button/' + '?url={{url}}&media={{image_url}}&description={{text}}'\n      }, {\n        id: 'download',\n        label: 'Download image',\n        url: '{{raw_image_url}}',\n        download: true\n      }],\n      getImageURLForShare: function ()\n      /* shareButtonData */\n      {\n        return pswp.currItem.src || '';\n      },\n      getPageURLForShare: function ()\n      /* shareButtonData */\n      {\n        return window.location.href;\n      },\n      getTextForShare: function ()\n      /* shareButtonData */\n      {\n        return pswp.currItem.title || '';\n      },\n      indexIndicatorSep: ' / ',\n      fitControlsWidth: 1200\n    },\n        _blockControlsTap,\n        _blockControlsTapTimeout;\n\n    var _onControlsTap = function (e) {\n      if (_blockControlsTap) {\n        return true;\n      }\n\n      e = e || window.event;\n\n      if (_options.timeToIdle && _options.mouseUsed && !_isIdle) {\n        // reset idle timer\n        _onIdleMouseMove();\n      }\n\n      var target = e.target || e.srcElement,\n          uiElement,\n          clickedClass = target.getAttribute('class') || '',\n          found;\n\n      for (var i = 0; i < _uiElements.length; i++) {\n        uiElement = _uiElements[i];\n\n        if (uiElement.onTap && clickedClass.indexOf('pswp__' + uiElement.name) > -1) {\n          uiElement.onTap();\n          found = true;\n        }\n      }\n\n      if (found) {\n        if (e.stopPropagation) {\n          e.stopPropagation();\n        }\n\n        _blockControlsTap = true; // Some versions of Android don't prevent ghost click event \n        // when preventDefault() was called on touchstart and/or touchend.\n        // \n        // This happens on v4.3, 4.2, 4.1, \n        // older versions strangely work correctly, \n        // but just in case we add delay on all of them)\t\n\n        var tapDelay = framework.features.isOldAndroid ? 600 : 30;\n        _blockControlsTapTimeout = setTimeout(function () {\n          _blockControlsTap = false;\n        }, tapDelay);\n      }\n    },\n        _fitControlsInViewport = function () {\n      return !pswp.likelyTouchDevice || _options.mouseUsed || screen.width > _options.fitControlsWidth;\n    },\n        _togglePswpClass = function (el, cName, add) {\n      framework[(add ? 'add' : 'remove') + 'Class'](el, 'pswp__' + cName);\n    },\n        // add class when there is just one item in the gallery\n    // (by default it hides left/right arrows and 1ofX counter)\n    _countNumItems = function () {\n      var hasOneSlide = _options.getNumItemsFn() === 1;\n\n      if (hasOneSlide !== _galleryHasOneSlide) {\n        _togglePswpClass(_controls, 'ui--one-slide', hasOneSlide);\n\n        _galleryHasOneSlide = hasOneSlide;\n      }\n    },\n        _toggleShareModalClass = function () {\n      _togglePswpClass(_shareModal, 'share-modal--hidden', _shareModalHidden);\n    },\n        _toggleShareModal = function () {\n      _shareModalHidden = !_shareModalHidden;\n\n      if (!_shareModalHidden) {\n        _toggleShareModalClass();\n\n        setTimeout(function () {\n          if (!_shareModalHidden) {\n            framework.addClass(_shareModal, 'pswp__share-modal--fade-in');\n          }\n        }, 30);\n      } else {\n        framework.removeClass(_shareModal, 'pswp__share-modal--fade-in');\n        setTimeout(function () {\n          if (_shareModalHidden) {\n            _toggleShareModalClass();\n          }\n        }, 300);\n      }\n\n      if (!_shareModalHidden) {\n        _updateShareURLs();\n      }\n\n      return false;\n    },\n        _openWindowPopup = function (e) {\n      e = e || window.event;\n      var target = e.target || e.srcElement;\n      pswp.shout('shareLinkClick', e, target);\n\n      if (!target.href) {\n        return false;\n      }\n\n      if (target.hasAttribute('download')) {\n        return true;\n      }\n\n      window.open(target.href, 'pswp_share', 'scrollbars=yes,resizable=yes,toolbar=no,' + 'location=yes,width=550,height=420,top=100,left=' + (window.screen ? Math.round(screen.width / 2 - 275) : 100));\n\n      if (!_shareModalHidden) {\n        _toggleShareModal();\n      }\n\n      return false;\n    },\n        _updateShareURLs = function () {\n      var shareButtonOut = '',\n          shareButtonData,\n          shareURL,\n          image_url,\n          page_url,\n          share_text;\n\n      for (var i = 0; i < _options.shareButtons.length; i++) {\n        shareButtonData = _options.shareButtons[i];\n        image_url = _options.getImageURLForShare(shareButtonData);\n        page_url = _options.getPageURLForShare(shareButtonData);\n        share_text = _options.getTextForShare(shareButtonData);\n        shareURL = shareButtonData.url.replace('{{url}}', encodeURIComponent(page_url)).replace('{{image_url}}', encodeURIComponent(image_url)).replace('{{raw_image_url}}', image_url).replace('{{text}}', encodeURIComponent(share_text));\n        shareButtonOut += '<a href=\"' + shareURL + '\" target=\"_blank\" ' + 'class=\"pswp__share--' + shareButtonData.id + '\"' + (shareButtonData.download ? 'download' : '') + '>' + shareButtonData.label + '</a>';\n\n        if (_options.parseShareButtonOut) {\n          shareButtonOut = _options.parseShareButtonOut(shareButtonData, shareButtonOut);\n        }\n      }\n\n      _shareModal.children[0].innerHTML = shareButtonOut;\n      _shareModal.children[0].onclick = _openWindowPopup;\n    },\n        _hasCloseClass = function (target) {\n      for (var i = 0; i < _options.closeElClasses.length; i++) {\n        if (framework.hasClass(target, 'pswp__' + _options.closeElClasses[i])) {\n          return true;\n        }\n      }\n    },\n        _idleInterval,\n        _idleTimer,\n        _idleIncrement = 0,\n        _onIdleMouseMove = function () {\n      clearTimeout(_idleTimer);\n      _idleIncrement = 0;\n\n      if (_isIdle) {\n        ui.setIdle(false);\n      }\n    },\n        _onMouseLeaveWindow = function (e) {\n      e = e ? e : window.event;\n      var from = e.relatedTarget || e.toElement;\n\n      if (!from || from.nodeName === 'HTML') {\n        clearTimeout(_idleTimer);\n        _idleTimer = setTimeout(function () {\n          ui.setIdle(true);\n        }, _options.timeToIdleOutside);\n      }\n    },\n        _setupFullscreenAPI = function () {\n      if (_options.fullscreenEl && !framework.features.isOldAndroid) {\n        if (!_fullscrenAPI) {\n          _fullscrenAPI = ui.getFullscreenAPI();\n        }\n\n        if (_fullscrenAPI) {\n          framework.bind(document, _fullscrenAPI.eventK, ui.updateFullscreen);\n          ui.updateFullscreen();\n          framework.addClass(pswp.template, 'pswp--supports-fs');\n        } else {\n          framework.removeClass(pswp.template, 'pswp--supports-fs');\n        }\n      }\n    },\n        _setupLoadingIndicator = function () {\n      // Setup loading indicator\n      if (_options.preloaderEl) {\n        _toggleLoadingIndicator(true);\n\n        _listen('beforeChange', function () {\n          clearTimeout(_loadingIndicatorTimeout); // display loading indicator with delay\n\n          _loadingIndicatorTimeout = setTimeout(function () {\n            if (pswp.currItem && pswp.currItem.loading) {\n              if (!pswp.allowProgressiveImg() || pswp.currItem.img && !pswp.currItem.img.naturalWidth) {\n                // show preloader if progressive loading is not enabled, \n                // or image width is not defined yet (because of slow connection)\n                _toggleLoadingIndicator(false); // items-controller.js function allowProgressiveImg\n\n              }\n            } else {\n              _toggleLoadingIndicator(true); // hide preloader\n\n            }\n          }, _options.loadingIndicatorDelay);\n        });\n\n        _listen('imageLoadComplete', function (index, item) {\n          if (pswp.currItem === item) {\n            _toggleLoadingIndicator(true);\n          }\n        });\n      }\n    },\n        _toggleLoadingIndicator = function (hide) {\n      if (_loadingIndicatorHidden !== hide) {\n        _togglePswpClass(_loadingIndicator, 'preloader--active', !hide);\n\n        _loadingIndicatorHidden = hide;\n      }\n    },\n        _applyNavBarGaps = function (item) {\n      var gap = item.vGap;\n\n      if (_fitControlsInViewport()) {\n        var bars = _options.barsSize;\n\n        if (_options.captionEl && bars.bottom === 'auto') {\n          if (!_fakeCaptionContainer) {\n            _fakeCaptionContainer = framework.createEl('pswp__caption pswp__caption--fake');\n\n            _fakeCaptionContainer.appendChild(framework.createEl('pswp__caption__center'));\n\n            _controls.insertBefore(_fakeCaptionContainer, _captionContainer);\n\n            framework.addClass(_controls, 'pswp__ui--fit');\n          }\n\n          if (_options.addCaptionHTMLFn(item, _fakeCaptionContainer, true)) {\n            var captionSize = _fakeCaptionContainer.clientHeight;\n            gap.bottom = parseInt(captionSize, 10) || 44;\n          } else {\n            gap.bottom = bars.top; // if no caption, set size of bottom gap to size of top\n          }\n        } else {\n          gap.bottom = bars.bottom === 'auto' ? 0 : bars.bottom;\n        } // height of top bar is static, no need to calculate it\n\n\n        gap.top = bars.top;\n      } else {\n        gap.top = gap.bottom = 0;\n      }\n    },\n        _setupIdle = function () {\n      // Hide controls when mouse is used\n      if (_options.timeToIdle) {\n        _listen('mouseUsed', function () {\n          framework.bind(document, 'mousemove', _onIdleMouseMove);\n          framework.bind(document, 'mouseout', _onMouseLeaveWindow);\n          _idleInterval = setInterval(function () {\n            _idleIncrement++;\n\n            if (_idleIncrement === 2) {\n              ui.setIdle(true);\n            }\n          }, _options.timeToIdle / 2);\n        });\n      }\n    },\n        _setupHidingControlsDuringGestures = function () {\n      // Hide controls on vertical drag\n      _listen('onVerticalDrag', function (now) {\n        if (_controlsVisible && now < 0.95) {\n          ui.hideControls();\n        } else if (!_controlsVisible && now >= 0.95) {\n          ui.showControls();\n        }\n      }); // Hide controls when pinching to close\n\n\n      var pinchControlsHidden;\n\n      _listen('onPinchClose', function (now) {\n        if (_controlsVisible && now < 0.9) {\n          ui.hideControls();\n          pinchControlsHidden = true;\n        } else if (pinchControlsHidden && !_controlsVisible && now > 0.9) {\n          ui.showControls();\n        }\n      });\n\n      _listen('zoomGestureEnded', function () {\n        pinchControlsHidden = false;\n\n        if (pinchControlsHidden && !_controlsVisible) {\n          ui.showControls();\n        }\n      });\n    };\n\n    var _uiElements = [{\n      name: 'caption',\n      option: 'captionEl',\n      onInit: function (el) {\n        _captionContainer = el;\n      }\n    }, {\n      name: 'share-modal',\n      option: 'shareEl',\n      onInit: function (el) {\n        _shareModal = el;\n      },\n      onTap: function () {\n        _toggleShareModal();\n      }\n    }, {\n      name: 'button--share',\n      option: 'shareEl',\n      onInit: function (el) {\n        _shareButton = el;\n      },\n      onTap: function () {\n        _toggleShareModal();\n      }\n    }, {\n      name: 'button--zoom',\n      option: 'zoomEl',\n      onTap: pswp.toggleDesktopZoom\n    }, {\n      name: 'counter',\n      option: 'counterEl',\n      onInit: function (el) {\n        _indexIndicator = el;\n      }\n    }, {\n      name: 'button--close',\n      option: 'closeEl',\n      onTap: pswp.close\n    }, {\n      name: 'button--arrow--left',\n      option: 'arrowEl',\n      onTap: pswp.prev\n    }, {\n      name: 'button--arrow--right',\n      option: 'arrowEl',\n      onTap: pswp.next\n    }, {\n      name: 'button--fs',\n      option: 'fullscreenEl',\n      onTap: function () {\n        if (_fullscrenAPI.isFullscreen()) {\n          _fullscrenAPI.exit();\n        } else {\n          _fullscrenAPI.enter();\n        }\n      }\n    }, {\n      name: 'preloader',\n      option: 'preloaderEl',\n      onInit: function (el) {\n        _loadingIndicator = el;\n      }\n    }];\n\n    var _setupUIElements = function () {\n      var item, classAttr, uiElement;\n\n      var loopThroughChildElements = function (sChildren) {\n        if (!sChildren) {\n          return;\n        }\n\n        var l = sChildren.length;\n\n        for (var i = 0; i < l; i++) {\n          item = sChildren[i];\n          classAttr = item.className;\n\n          for (var a = 0; a < _uiElements.length; a++) {\n            uiElement = _uiElements[a];\n\n            if (classAttr.indexOf('pswp__' + uiElement.name) > -1) {\n              if (_options[uiElement.option]) {\n                // if element is not disabled from options\n                framework.removeClass(item, 'pswp__element--disabled');\n\n                if (uiElement.onInit) {\n                  uiElement.onInit(item);\n                } //item.style.display = 'block';\n\n              } else {\n                framework.addClass(item, 'pswp__element--disabled'); //item.style.display = 'none';\n              }\n            }\n          }\n        }\n      };\n\n      loopThroughChildElements(_controls.children);\n      var topBar = framework.getChildByClass(_controls, 'pswp__top-bar');\n\n      if (topBar) {\n        loopThroughChildElements(topBar.children);\n      }\n    };\n\n    ui.init = function () {\n      // extend options\n      framework.extend(pswp.options, _defaultUIOptions, true); // create local link for fast access\n\n      _options = pswp.options; // find pswp__ui element\n\n      _controls = framework.getChildByClass(pswp.scrollWrap, 'pswp__ui'); // create local link\n\n      _listen = pswp.listen;\n\n      _setupHidingControlsDuringGestures(); // update controls when slides change\n\n\n      _listen('beforeChange', ui.update); // toggle zoom on double-tap\n\n\n      _listen('doubleTap', function (point) {\n        var initialZoomLevel = pswp.currItem.initialZoomLevel;\n\n        if (pswp.getZoomLevel() !== initialZoomLevel) {\n          pswp.zoomTo(initialZoomLevel, point, 333);\n        } else {\n          pswp.zoomTo(_options.getDoubleTapZoom(false, pswp.currItem), point, 333);\n        }\n      }); // Allow text selection in caption\n\n\n      _listen('preventDragEvent', function (e, isDown, preventObj) {\n        var t = e.target || e.srcElement;\n\n        if (t && t.getAttribute('class') && e.type.indexOf('mouse') > -1 && (t.getAttribute('class').indexOf('__caption') > 0 || /(SMALL|STRONG|EM)/i.test(t.tagName))) {\n          preventObj.prevent = false;\n        }\n      }); // bind events for UI\n\n\n      _listen('bindEvents', function () {\n        framework.bind(_controls, 'pswpTap click', _onControlsTap);\n        framework.bind(pswp.scrollWrap, 'pswpTap', ui.onGlobalTap);\n\n        if (!pswp.likelyTouchDevice) {\n          framework.bind(pswp.scrollWrap, 'mouseover', ui.onMouseOver);\n        }\n      }); // unbind events for UI\n\n\n      _listen('unbindEvents', function () {\n        if (!_shareModalHidden) {\n          _toggleShareModal();\n        }\n\n        if (_idleInterval) {\n          clearInterval(_idleInterval);\n        }\n\n        framework.unbind(document, 'mouseout', _onMouseLeaveWindow);\n        framework.unbind(document, 'mousemove', _onIdleMouseMove);\n        framework.unbind(_controls, 'pswpTap click', _onControlsTap);\n        framework.unbind(pswp.scrollWrap, 'pswpTap', ui.onGlobalTap);\n        framework.unbind(pswp.scrollWrap, 'mouseover', ui.onMouseOver);\n\n        if (_fullscrenAPI) {\n          framework.unbind(document, _fullscrenAPI.eventK, ui.updateFullscreen);\n\n          if (_fullscrenAPI.isFullscreen()) {\n            _options.hideAnimationDuration = 0;\n\n            _fullscrenAPI.exit();\n          }\n\n          _fullscrenAPI = null;\n        }\n      }); // clean up things when gallery is destroyed\n\n\n      _listen('destroy', function () {\n        if (_options.captionEl) {\n          if (_fakeCaptionContainer) {\n            _controls.removeChild(_fakeCaptionContainer);\n          }\n\n          framework.removeClass(_captionContainer, 'pswp__caption--empty');\n        }\n\n        if (_shareModal) {\n          _shareModal.children[0].onclick = null;\n        }\n\n        framework.removeClass(_controls, 'pswp__ui--over-close');\n        framework.addClass(_controls, 'pswp__ui--hidden');\n        ui.setIdle(false);\n      });\n\n      if (!_options.showAnimationDuration) {\n        framework.removeClass(_controls, 'pswp__ui--hidden');\n      }\n\n      _listen('initialZoomIn', function () {\n        if (_options.showAnimationDuration) {\n          framework.removeClass(_controls, 'pswp__ui--hidden');\n        }\n      });\n\n      _listen('initialZoomOut', function () {\n        framework.addClass(_controls, 'pswp__ui--hidden');\n      });\n\n      _listen('parseVerticalMargin', _applyNavBarGaps);\n\n      _setupUIElements();\n\n      if (_options.shareEl && _shareButton && _shareModal) {\n        _shareModalHidden = true;\n      }\n\n      _countNumItems();\n\n      _setupIdle();\n\n      _setupFullscreenAPI();\n\n      _setupLoadingIndicator();\n    };\n\n    ui.setIdle = function (isIdle) {\n      _isIdle = isIdle;\n\n      _togglePswpClass(_controls, 'ui--idle', isIdle);\n    };\n\n    ui.update = function () {\n      // Don't update UI if it's hidden\n      if (_controlsVisible && pswp.currItem) {\n        ui.updateIndexIndicator();\n\n        if (_options.captionEl) {\n          _options.addCaptionHTMLFn(pswp.currItem, _captionContainer);\n\n          _togglePswpClass(_captionContainer, 'caption--empty', !pswp.currItem.title);\n        }\n\n        _overlayUIUpdated = true;\n      } else {\n        _overlayUIUpdated = false;\n      }\n\n      if (!_shareModalHidden) {\n        _toggleShareModal();\n      }\n\n      _countNumItems();\n    };\n\n    ui.updateFullscreen = function (e) {\n      if (e) {\n        // some browsers change window scroll position during the fullscreen\n        // so PhotoSwipe updates it just in case\n        setTimeout(function () {\n          pswp.setScrollOffset(0, framework.getScrollY());\n        }, 50);\n      } // toogle pswp--fs class on root element\n\n\n      framework[(_fullscrenAPI.isFullscreen() ? 'add' : 'remove') + 'Class'](pswp.template, 'pswp--fs');\n    };\n\n    ui.updateIndexIndicator = function () {\n      if (_options.counterEl) {\n        _indexIndicator.innerHTML = pswp.getCurrentIndex() + 1 + _options.indexIndicatorSep + _options.getNumItemsFn();\n      }\n    };\n\n    ui.onGlobalTap = function (e) {\n      e = e || window.event;\n      var target = e.target || e.srcElement;\n\n      if (_blockControlsTap) {\n        return;\n      }\n\n      if (e.detail && e.detail.pointerType === 'mouse') {\n        // close gallery if clicked outside of the image\n        if (_hasCloseClass(target)) {\n          pswp.close();\n          return;\n        }\n\n        if (framework.hasClass(target, 'pswp__img')) {\n          if (pswp.getZoomLevel() === 1 && pswp.getZoomLevel() <= pswp.currItem.fitRatio) {\n            if (_options.clickToCloseNonZoomable) {\n              pswp.close();\n            }\n          } else {\n            pswp.toggleDesktopZoom(e.detail.releasePoint);\n          }\n        }\n      } else {\n        // tap anywhere (except buttons) to toggle visibility of controls\n        if (_options.tapToToggleControls) {\n          if (_controlsVisible) {\n            ui.hideControls();\n          } else {\n            ui.showControls();\n          }\n        } // tap to close gallery\n\n\n        if (_options.tapToClose && (framework.hasClass(target, 'pswp__img') || _hasCloseClass(target))) {\n          pswp.close();\n          return;\n        }\n      }\n    };\n\n    ui.onMouseOver = function (e) {\n      e = e || window.event;\n      var target = e.target || e.srcElement; // add class when mouse is over an element that should close the gallery\n\n      _togglePswpClass(_controls, 'ui--over-close', _hasCloseClass(target));\n    };\n\n    ui.hideControls = function () {\n      framework.addClass(_controls, 'pswp__ui--hidden');\n      _controlsVisible = false;\n    };\n\n    ui.showControls = function () {\n      _controlsVisible = true;\n\n      if (!_overlayUIUpdated) {\n        ui.update();\n      }\n\n      framework.removeClass(_controls, 'pswp__ui--hidden');\n    };\n\n    ui.supportsFullscreen = function () {\n      var d = document;\n      return !!(d.exitFullscreen || d.mozCancelFullScreen || d.webkitExitFullscreen || d.msExitFullscreen);\n    };\n\n    ui.getFullscreenAPI = function () {\n      var dE = document.documentElement,\n          api,\n          tF = 'fullscreenchange';\n\n      if (dE.requestFullscreen) {\n        api = {\n          enterK: 'requestFullscreen',\n          exitK: 'exitFullscreen',\n          elementK: 'fullscreenElement',\n          eventK: tF\n        };\n      } else if (dE.mozRequestFullScreen) {\n        api = {\n          enterK: 'mozRequestFullScreen',\n          exitK: 'mozCancelFullScreen',\n          elementK: 'mozFullScreenElement',\n          eventK: 'moz' + tF\n        };\n      } else if (dE.webkitRequestFullscreen) {\n        api = {\n          enterK: 'webkitRequestFullscreen',\n          exitK: 'webkitExitFullscreen',\n          elementK: 'webkitFullscreenElement',\n          eventK: 'webkit' + tF\n        };\n      } else if (dE.msRequestFullscreen) {\n        api = {\n          enterK: 'msRequestFullscreen',\n          exitK: 'msExitFullscreen',\n          elementK: 'msFullscreenElement',\n          eventK: 'MSFullscreenChange'\n        };\n      }\n\n      if (api) {\n        api.enter = function () {\n          // disable close-on-scroll in fullscreen\n          _initalCloseOnScrollValue = _options.closeOnScroll;\n          _options.closeOnScroll = false;\n\n          if (this.enterK === 'webkitRequestFullscreen') {\n            pswp.template[this.enterK](Element.ALLOW_KEYBOARD_INPUT);\n          } else {\n            return pswp.template[this.enterK]();\n          }\n        };\n\n        api.exit = function () {\n          _options.closeOnScroll = _initalCloseOnScrollValue;\n          return document[this.exitK]();\n        };\n\n        api.isFullscreen = function () {\n          return document[this.elementK];\n        };\n      }\n\n      return api;\n    };\n  };\n\n  return PhotoSwipeUI_Default;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! PhotoSwipe - v4.1.3 - 2019-01-08\n* http://photoswipe.com\n* Copyright (c) 2019 Dmitry Semenov; */\n(function (root, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(this, function () {\n  'use strict';\n\n  var PhotoSwipe = function (template, UiClass, items, options) {\n    /*>>framework-bridge*/\n\n    /**\n     *\n     * Set of generic functions used by gallery.\n     * \n     * You're free to modify anything here as long as functionality is kept.\n     * \n     */\n    var framework = {\n      features: null,\n      bind: function (target, type, listener, unbind) {\n        var methodName = (unbind ? 'remove' : 'add') + 'EventListener';\n        type = type.split(' ');\n\n        for (var i = 0; i < type.length; i++) {\n          if (type[i]) {\n            target[methodName](type[i], listener, false);\n          }\n        }\n      },\n      isArray: function (obj) {\n        return obj instanceof Array;\n      },\n      createEl: function (classes, tag) {\n        var el = document.createElement(tag || 'div');\n\n        if (classes) {\n          el.className = classes;\n        }\n\n        return el;\n      },\n      getScrollY: function () {\n        var yOffset = window.pageYOffset;\n        return yOffset !== undefined ? yOffset : document.documentElement.scrollTop;\n      },\n      unbind: function (target, type, listener) {\n        framework.bind(target, type, listener, true);\n      },\n      removeClass: function (el, className) {\n        var reg = new RegExp('(\\\\s|^)' + className + '(\\\\s|$)');\n        el.className = el.className.replace(reg, ' ').replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n      },\n      addClass: function (el, className) {\n        if (!framework.hasClass(el, className)) {\n          el.className += (el.className ? ' ' : '') + className;\n        }\n      },\n      hasClass: function (el, className) {\n        return el.className && new RegExp('(^|\\\\s)' + className + '(\\\\s|$)').test(el.className);\n      },\n      getChildByClass: function (parentEl, childClassName) {\n        var node = parentEl.firstChild;\n\n        while (node) {\n          if (framework.hasClass(node, childClassName)) {\n            return node;\n          }\n\n          node = node.nextSibling;\n        }\n      },\n      arraySearch: function (array, value, key) {\n        var i = array.length;\n\n        while (i--) {\n          if (array[i][key] === value) {\n            return i;\n          }\n        }\n\n        return -1;\n      },\n      extend: function (o1, o2, preventOverwrite) {\n        for (var prop in o2) {\n          if (o2.hasOwnProperty(prop)) {\n            if (preventOverwrite && o1.hasOwnProperty(prop)) {\n              continue;\n            }\n\n            o1[prop] = o2[prop];\n          }\n        }\n      },\n      easing: {\n        sine: {\n          out: function (k) {\n            return Math.sin(k * (Math.PI / 2));\n          },\n          inOut: function (k) {\n            return -(Math.cos(Math.PI * k) - 1) / 2;\n          }\n        },\n        cubic: {\n          out: function (k) {\n            return --k * k * k + 1;\n          }\n          /*\n          \telastic: {\n          \t\tout: function ( k ) {\n          \t\t\t\tvar s, a = 0.1, p = 0.4;\n          \t\t\tif ( k === 0 ) return 0;\n          \t\t\tif ( k === 1 ) return 1;\n          \t\t\tif ( !a || a < 1 ) { a = 1; s = p / 4; }\n          \t\t\telse s = p * Math.asin( 1 / a ) / ( 2 * Math.PI );\n          \t\t\treturn ( a * Math.pow( 2, - 10 * k) * Math.sin( ( k - s ) * ( 2 * Math.PI ) / p ) + 1 );\n          \t\t\t},\n          \t},\n          \tback: {\n          \t\tout: function ( k ) {\n          \t\t\tvar s = 1.70158;\n          \t\t\treturn --k * k * ( ( s + 1 ) * k + s ) + 1;\n          \t\t}\n          \t}\n          */\n\n        }\n      },\n\n      /**\n       * \n       * @return {object}\n       * \n       * {\n       *  raf : request animation frame function\n       *  caf : cancel animation frame function\n       *  transfrom : transform property key (with vendor), or null if not supported\n       *  oldIE : IE8 or below\n       * }\n       * \n       */\n      detectFeatures: function () {\n        if (framework.features) {\n          return framework.features;\n        }\n\n        var helperEl = framework.createEl(),\n            helperStyle = helperEl.style,\n            vendor = '',\n            features = {}; // IE8 and below\n\n        features.oldIE = document.all && !document.addEventListener;\n        features.touch = 'ontouchstart' in window;\n\n        if (window.requestAnimationFrame) {\n          features.raf = window.requestAnimationFrame;\n          features.caf = window.cancelAnimationFrame;\n        }\n\n        features.pointerEvent = !!window.PointerEvent || navigator.msPointerEnabled; // fix false-positive detection of old Android in new IE\n        // (IE11 ua string contains \"Android 4.0\")\n\n        if (!features.pointerEvent) {\n          var ua = navigator.userAgent; // Detect if device is iPhone or iPod and if it's older than iOS 8\n          // http://stackoverflow.com/a/14223920\n          // \n          // This detection is made because of buggy top/bottom toolbars\n          // that don't trigger window.resize event.\n          // For more info refer to _isFixedPosition variable in core.js\n\n          if (/iP(hone|od)/.test(navigator.platform)) {\n            var v = navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n\n            if (v && v.length > 0) {\n              v = parseInt(v[1], 10);\n\n              if (v >= 1 && v < 8) {\n                features.isOldIOSPhone = true;\n              }\n            }\n          } // Detect old Android (before KitKat)\n          // due to bugs related to position:fixed\n          // http://stackoverflow.com/questions/7184573/pick-up-the-android-version-in-the-browser-by-javascript\n\n\n          var match = ua.match(/Android\\s([0-9\\.]*)/);\n          var androidversion = match ? match[1] : 0;\n          androidversion = parseFloat(androidversion);\n\n          if (androidversion >= 1) {\n            if (androidversion < 4.4) {\n              features.isOldAndroid = true; // for fixed position bug & performance\n            }\n\n            features.androidVersion = androidversion; // for touchend bug\n          }\n\n          features.isMobileOpera = /opera mini|opera mobi/i.test(ua); // p.s. yes, yes, UA sniffing is bad, propose your solution for above bugs.\n        }\n\n        var styleChecks = ['transform', 'perspective', 'animationName'],\n            vendors = ['', 'webkit', 'Moz', 'ms', 'O'],\n            styleCheckItem,\n            styleName;\n\n        for (var i = 0; i < 4; i++) {\n          vendor = vendors[i];\n\n          for (var a = 0; a < 3; a++) {\n            styleCheckItem = styleChecks[a]; // uppercase first letter of property name, if vendor is present\n\n            styleName = vendor + (vendor ? styleCheckItem.charAt(0).toUpperCase() + styleCheckItem.slice(1) : styleCheckItem);\n\n            if (!features[styleCheckItem] && styleName in helperStyle) {\n              features[styleCheckItem] = styleName;\n            }\n          }\n\n          if (vendor && !features.raf) {\n            vendor = vendor.toLowerCase();\n            features.raf = window[vendor + 'RequestAnimationFrame'];\n\n            if (features.raf) {\n              features.caf = window[vendor + 'CancelAnimationFrame'] || window[vendor + 'CancelRequestAnimationFrame'];\n            }\n          }\n        }\n\n        if (!features.raf) {\n          var lastTime = 0;\n\n          features.raf = function (fn) {\n            var currTime = new Date().getTime();\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n            var id = window.setTimeout(function () {\n              fn(currTime + timeToCall);\n            }, timeToCall);\n            lastTime = currTime + timeToCall;\n            return id;\n          };\n\n          features.caf = function (id) {\n            clearTimeout(id);\n          };\n        } // Detect SVG support\n\n\n        features.svg = !!document.createElementNS && !!document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect;\n        framework.features = features;\n        return features;\n      }\n    };\n    framework.detectFeatures(); // Override addEventListener for old versions of IE\n\n    if (framework.features.oldIE) {\n      framework.bind = function (target, type, listener, unbind) {\n        type = type.split(' ');\n\n        var methodName = (unbind ? 'detach' : 'attach') + 'Event',\n            evName,\n            _handleEv = function () {\n          listener.handleEvent.call(listener);\n        };\n\n        for (var i = 0; i < type.length; i++) {\n          evName = type[i];\n\n          if (evName) {\n            if (typeof listener === 'object' && listener.handleEvent) {\n              if (!unbind) {\n                listener['oldIE' + evName] = _handleEv;\n              } else {\n                if (!listener['oldIE' + evName]) {\n                  return false;\n                }\n              }\n\n              target[methodName]('on' + evName, listener['oldIE' + evName]);\n            } else {\n              target[methodName]('on' + evName, listener);\n            }\n          }\n        }\n      };\n    }\n    /*>>framework-bridge*/\n\n    /*>>core*/\n    //function(template, UiClass, items, options)\n\n\n    var self = this;\n    /**\n     * Static vars, don't change unless you know what you're doing.\n     */\n\n    var DOUBLE_TAP_RADIUS = 25,\n        NUM_HOLDERS = 3;\n    /**\n     * Options\n     */\n\n    var _options = {\n      allowPanToNext: true,\n      spacing: 0.12,\n      bgOpacity: 1,\n      mouseUsed: false,\n      loop: true,\n      pinchToClose: true,\n      closeOnScroll: true,\n      closeOnVerticalDrag: true,\n      verticalDragRange: 0.75,\n      hideAnimationDuration: 333,\n      showAnimationDuration: 333,\n      showHideOpacity: false,\n      focus: true,\n      escKey: true,\n      arrowKeys: true,\n      mainScrollEndFriction: 0.35,\n      panEndFriction: 0.35,\n      isClickableElement: function (el) {\n        return el.tagName === 'A';\n      },\n      getDoubleTapZoom: function (isMouseClick, item) {\n        if (isMouseClick) {\n          return 1;\n        } else {\n          return item.initialZoomLevel < 0.7 ? 1 : 1.33;\n        }\n      },\n      maxSpreadZoom: 1.33,\n      modal: true,\n      // not fully implemented yet\n      scaleMode: 'fit' // TODO\n\n    };\n    framework.extend(_options, options);\n    /**\n     * Private helper variables & functions\n     */\n\n    var _getEmptyPoint = function () {\n      return {\n        x: 0,\n        y: 0\n      };\n    };\n\n    var _isOpen,\n        _isDestroying,\n        _closedByScroll,\n        _currentItemIndex,\n        _containerStyle,\n        _containerShiftIndex,\n        _currPanDist = _getEmptyPoint(),\n        _startPanOffset = _getEmptyPoint(),\n        _panOffset = _getEmptyPoint(),\n        _upMoveEvents,\n        // drag move, drag end & drag cancel events array\n    _downEvents,\n        // drag start events array\n    _globalEventHandlers,\n        _viewportSize = {},\n        _currZoomLevel,\n        _startZoomLevel,\n        _translatePrefix,\n        _translateSufix,\n        _updateSizeInterval,\n        _itemsNeedUpdate,\n        _currPositionIndex = 0,\n        _offset = {},\n        _slideSize = _getEmptyPoint(),\n        // size of slide area, including spacing\n    _itemHolders,\n        _prevItemIndex,\n        _indexDiff = 0,\n        // difference of indexes since last content update\n    _dragStartEvent,\n        _dragMoveEvent,\n        _dragEndEvent,\n        _dragCancelEvent,\n        _transformKey,\n        _pointerEventEnabled,\n        _isFixedPosition = true,\n        _likelyTouchDevice,\n        _modules = [],\n        _requestAF,\n        _cancelAF,\n        _initalClassName,\n        _initalWindowScrollY,\n        _oldIE,\n        _currentWindowScrollY,\n        _features,\n        _windowVisibleSize = {},\n        _renderMaxResolution = false,\n        _orientationChangeTimeout,\n        // Registers PhotoSWipe module (History, Controller ...)\n    _registerModule = function (name, module) {\n      framework.extend(self, module.publicMethods);\n\n      _modules.push(name);\n    },\n        _getLoopedId = function (index) {\n      var numSlides = _getNumItems();\n\n      if (index > numSlides - 1) {\n        return index - numSlides;\n      } else if (index < 0) {\n        return numSlides + index;\n      }\n\n      return index;\n    },\n        // Micro bind/trigger\n    _listeners = {},\n        _listen = function (name, fn) {\n      if (!_listeners[name]) {\n        _listeners[name] = [];\n      }\n\n      return _listeners[name].push(fn);\n    },\n        _shout = function (name) {\n      var listeners = _listeners[name];\n\n      if (listeners) {\n        var args = Array.prototype.slice.call(arguments);\n        args.shift();\n\n        for (var i = 0; i < listeners.length; i++) {\n          listeners[i].apply(self, args);\n        }\n      }\n    },\n        _getCurrentTime = function () {\n      return new Date().getTime();\n    },\n        _applyBgOpacity = function (opacity) {\n      _bgOpacity = opacity;\n      self.bg.style.opacity = opacity * _options.bgOpacity;\n    },\n        _applyZoomTransform = function (styleObj, x, y, zoom, item) {\n      if (!_renderMaxResolution || item && item !== self.currItem) {\n        zoom = zoom / (item ? item.fitRatio : self.currItem.fitRatio);\n      }\n\n      styleObj[_transformKey] = _translatePrefix + x + 'px, ' + y + 'px' + _translateSufix + ' scale(' + zoom + ')';\n    },\n        _applyCurrentZoomPan = function (allowRenderResolution) {\n      if (_currZoomElementStyle) {\n        if (allowRenderResolution) {\n          if (_currZoomLevel > self.currItem.fitRatio) {\n            if (!_renderMaxResolution) {\n              _setImageSize(self.currItem, false, true);\n\n              _renderMaxResolution = true;\n            }\n          } else {\n            if (_renderMaxResolution) {\n              _setImageSize(self.currItem);\n\n              _renderMaxResolution = false;\n            }\n          }\n        }\n\n        _applyZoomTransform(_currZoomElementStyle, _panOffset.x, _panOffset.y, _currZoomLevel);\n      }\n    },\n        _applyZoomPanToItem = function (item) {\n      if (item.container) {\n        _applyZoomTransform(item.container.style, item.initialPosition.x, item.initialPosition.y, item.initialZoomLevel, item);\n      }\n    },\n        _setTranslateX = function (x, elStyle) {\n      elStyle[_transformKey] = _translatePrefix + x + 'px, 0px' + _translateSufix;\n    },\n        _moveMainScroll = function (x, dragging) {\n      if (!_options.loop && dragging) {\n        var newSlideIndexOffset = _currentItemIndex + (_slideSize.x * _currPositionIndex - x) / _slideSize.x,\n            delta = Math.round(x - _mainScrollPos.x);\n\n        if (newSlideIndexOffset < 0 && delta > 0 || newSlideIndexOffset >= _getNumItems() - 1 && delta < 0) {\n          x = _mainScrollPos.x + delta * _options.mainScrollEndFriction;\n        }\n      }\n\n      _mainScrollPos.x = x;\n\n      _setTranslateX(x, _containerStyle);\n    },\n        _calculatePanOffset = function (axis, zoomLevel) {\n      var m = _midZoomPoint[axis] - _offset[axis];\n      return _startPanOffset[axis] + _currPanDist[axis] + m - m * (zoomLevel / _startZoomLevel);\n    },\n        _equalizePoints = function (p1, p2) {\n      p1.x = p2.x;\n      p1.y = p2.y;\n\n      if (p2.id) {\n        p1.id = p2.id;\n      }\n    },\n        _roundPoint = function (p) {\n      p.x = Math.round(p.x);\n      p.y = Math.round(p.y);\n    },\n        _mouseMoveTimeout = null,\n        _onFirstMouseMove = function () {\n      // Wait until mouse move event is fired at least twice during 100ms\n      // We do this, because some mobile browsers trigger it on touchstart\n      if (_mouseMoveTimeout) {\n        framework.unbind(document, 'mousemove', _onFirstMouseMove);\n        framework.addClass(template, 'pswp--has_mouse');\n        _options.mouseUsed = true;\n\n        _shout('mouseUsed');\n      }\n\n      _mouseMoveTimeout = setTimeout(function () {\n        _mouseMoveTimeout = null;\n      }, 100);\n    },\n        _bindEvents = function () {\n      framework.bind(document, 'keydown', self);\n\n      if (_features.transform) {\n        // don't bind click event in browsers that don't support transform (mostly IE8)\n        framework.bind(self.scrollWrap, 'click', self);\n      }\n\n      if (!_options.mouseUsed) {\n        framework.bind(document, 'mousemove', _onFirstMouseMove);\n      }\n\n      framework.bind(window, 'resize scroll orientationchange', self);\n\n      _shout('bindEvents');\n    },\n        _unbindEvents = function () {\n      framework.unbind(window, 'resize scroll orientationchange', self);\n      framework.unbind(window, 'scroll', _globalEventHandlers.scroll);\n      framework.unbind(document, 'keydown', self);\n      framework.unbind(document, 'mousemove', _onFirstMouseMove);\n\n      if (_features.transform) {\n        framework.unbind(self.scrollWrap, 'click', self);\n      }\n\n      if (_isDragging) {\n        framework.unbind(window, _upMoveEvents, self);\n      }\n\n      clearTimeout(_orientationChangeTimeout);\n\n      _shout('unbindEvents');\n    },\n        _calculatePanBounds = function (zoomLevel, update) {\n      var bounds = _calculateItemSize(self.currItem, _viewportSize, zoomLevel);\n\n      if (update) {\n        _currPanBounds = bounds;\n      }\n\n      return bounds;\n    },\n        _getMinZoomLevel = function (item) {\n      if (!item) {\n        item = self.currItem;\n      }\n\n      return item.initialZoomLevel;\n    },\n        _getMaxZoomLevel = function (item) {\n      if (!item) {\n        item = self.currItem;\n      }\n\n      return item.w > 0 ? _options.maxSpreadZoom : 1;\n    },\n        // Return true if offset is out of the bounds\n    _modifyDestPanOffset = function (axis, destPanBounds, destPanOffset, destZoomLevel) {\n      if (destZoomLevel === self.currItem.initialZoomLevel) {\n        destPanOffset[axis] = self.currItem.initialPosition[axis];\n        return true;\n      } else {\n        destPanOffset[axis] = _calculatePanOffset(axis, destZoomLevel);\n\n        if (destPanOffset[axis] > destPanBounds.min[axis]) {\n          destPanOffset[axis] = destPanBounds.min[axis];\n          return true;\n        } else if (destPanOffset[axis] < destPanBounds.max[axis]) {\n          destPanOffset[axis] = destPanBounds.max[axis];\n          return true;\n        }\n      }\n\n      return false;\n    },\n        _setupTransforms = function () {\n      if (_transformKey) {\n        // setup 3d transforms\n        var allow3dTransform = _features.perspective && !_likelyTouchDevice;\n        _translatePrefix = 'translate' + (allow3dTransform ? '3d(' : '(');\n        _translateSufix = _features.perspective ? ', 0px)' : ')';\n        return;\n      } // Override zoom/pan/move functions in case old browser is used (most likely IE)\n      // (so they use left/top/width/height, instead of CSS transform)\n\n\n      _transformKey = 'left';\n      framework.addClass(template, 'pswp--ie');\n\n      _setTranslateX = function (x, elStyle) {\n        elStyle.left = x + 'px';\n      };\n\n      _applyZoomPanToItem = function (item) {\n        var zoomRatio = item.fitRatio > 1 ? 1 : item.fitRatio,\n            s = item.container.style,\n            w = zoomRatio * item.w,\n            h = zoomRatio * item.h;\n        s.width = w + 'px';\n        s.height = h + 'px';\n        s.left = item.initialPosition.x + 'px';\n        s.top = item.initialPosition.y + 'px';\n      };\n\n      _applyCurrentZoomPan = function () {\n        if (_currZoomElementStyle) {\n          var s = _currZoomElementStyle,\n              item = self.currItem,\n              zoomRatio = item.fitRatio > 1 ? 1 : item.fitRatio,\n              w = zoomRatio * item.w,\n              h = zoomRatio * item.h;\n          s.width = w + 'px';\n          s.height = h + 'px';\n          s.left = _panOffset.x + 'px';\n          s.top = _panOffset.y + 'px';\n        }\n      };\n    },\n        _onKeyDown = function (e) {\n      var keydownAction = '';\n\n      if (_options.escKey && e.keyCode === 27) {\n        keydownAction = 'close';\n      } else if (_options.arrowKeys) {\n        if (e.keyCode === 37) {\n          keydownAction = 'prev';\n        } else if (e.keyCode === 39) {\n          keydownAction = 'next';\n        }\n      }\n\n      if (keydownAction) {\n        // don't do anything if special key pressed to prevent from overriding default browser actions\n        // e.g. in Chrome on Mac cmd+arrow-left returns to previous page\n        if (!e.ctrlKey && !e.altKey && !e.shiftKey && !e.metaKey) {\n          if (e.preventDefault) {\n            e.preventDefault();\n          } else {\n            e.returnValue = false;\n          }\n\n          self[keydownAction]();\n        }\n      }\n    },\n        _onGlobalClick = function (e) {\n      if (!e) {\n        return;\n      } // don't allow click event to pass through when triggering after drag or some other gesture\n\n\n      if (_moved || _zoomStarted || _mainScrollAnimating || _verticalDragInitiated) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n    },\n        _updatePageScrollOffset = function () {\n      self.setScrollOffset(0, framework.getScrollY());\n    }; // Micro animation engine\n\n\n    var _animations = {},\n        _numAnimations = 0,\n        _stopAnimation = function (name) {\n      if (_animations[name]) {\n        if (_animations[name].raf) {\n          _cancelAF(_animations[name].raf);\n        }\n\n        _numAnimations--;\n        delete _animations[name];\n      }\n    },\n        _registerStartAnimation = function (name) {\n      if (_animations[name]) {\n        _stopAnimation(name);\n      }\n\n      if (!_animations[name]) {\n        _numAnimations++;\n        _animations[name] = {};\n      }\n    },\n        _stopAllAnimations = function () {\n      for (var prop in _animations) {\n        if (_animations.hasOwnProperty(prop)) {\n          _stopAnimation(prop);\n        }\n      }\n    },\n        _animateProp = function (name, b, endProp, d, easingFn, onUpdate, onComplete) {\n      var startAnimTime = _getCurrentTime(),\n          t;\n\n      _registerStartAnimation(name);\n\n      var animloop = function () {\n        if (_animations[name]) {\n          t = _getCurrentTime() - startAnimTime; // time diff\n          //b - beginning (start prop)\n          //d - anim duration\n\n          if (t >= d) {\n            _stopAnimation(name);\n\n            onUpdate(endProp);\n\n            if (onComplete) {\n              onComplete();\n            }\n\n            return;\n          }\n\n          onUpdate((endProp - b) * easingFn(t / d) + b);\n          _animations[name].raf = _requestAF(animloop);\n        }\n      };\n\n      animloop();\n    };\n\n    var publicMethods = {\n      // make a few local variables and functions public\n      shout: _shout,\n      listen: _listen,\n      viewportSize: _viewportSize,\n      options: _options,\n      isMainScrollAnimating: function () {\n        return _mainScrollAnimating;\n      },\n      getZoomLevel: function () {\n        return _currZoomLevel;\n      },\n      getCurrentIndex: function () {\n        return _currentItemIndex;\n      },\n      isDragging: function () {\n        return _isDragging;\n      },\n      isZooming: function () {\n        return _isZooming;\n      },\n      setScrollOffset: function (x, y) {\n        _offset.x = x;\n        _currentWindowScrollY = _offset.y = y;\n\n        _shout('updateScrollOffset', _offset);\n      },\n      applyZoomPan: function (zoomLevel, panX, panY, allowRenderResolution) {\n        _panOffset.x = panX;\n        _panOffset.y = panY;\n        _currZoomLevel = zoomLevel;\n\n        _applyCurrentZoomPan(allowRenderResolution);\n      },\n      init: function () {\n        if (_isOpen || _isDestroying) {\n          return;\n        }\n\n        var i;\n        self.framework = framework; // basic functionality\n\n        self.template = template; // root DOM element of PhotoSwipe\n\n        self.bg = framework.getChildByClass(template, 'pswp__bg');\n        _initalClassName = template.className;\n        _isOpen = true;\n        _features = framework.detectFeatures();\n        _requestAF = _features.raf;\n        _cancelAF = _features.caf;\n        _transformKey = _features.transform;\n        _oldIE = _features.oldIE;\n        self.scrollWrap = framework.getChildByClass(template, 'pswp__scroll-wrap');\n        self.container = framework.getChildByClass(self.scrollWrap, 'pswp__container');\n        _containerStyle = self.container.style; // for fast access\n        // Objects that hold slides (there are only 3 in DOM)\n\n        self.itemHolders = _itemHolders = [{\n          el: self.container.children[0],\n          wrap: 0,\n          index: -1\n        }, {\n          el: self.container.children[1],\n          wrap: 0,\n          index: -1\n        }, {\n          el: self.container.children[2],\n          wrap: 0,\n          index: -1\n        }]; // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\n\n        _itemHolders[0].el.style.display = _itemHolders[2].el.style.display = 'none';\n\n        _setupTransforms(); // Setup global events\n\n\n        _globalEventHandlers = {\n          resize: self.updateSize,\n          // Fixes: iOS 10.3 resize event\n          // does not update scrollWrap.clientWidth instantly after resize\n          // https://github.com/dimsemenov/PhotoSwipe/issues/1315\n          orientationchange: function () {\n            clearTimeout(_orientationChangeTimeout);\n            _orientationChangeTimeout = setTimeout(function () {\n              if (_viewportSize.x !== self.scrollWrap.clientWidth) {\n                self.updateSize();\n              }\n            }, 500);\n          },\n          scroll: _updatePageScrollOffset,\n          keydown: _onKeyDown,\n          click: _onGlobalClick\n        }; // disable show/hide effects on old browsers that don't support CSS animations or transforms, \n        // old IOS, Android and Opera mobile. Blackberry seems to work fine, even older models.\n\n        var oldPhone = _features.isOldIOSPhone || _features.isOldAndroid || _features.isMobileOpera;\n\n        if (!_features.animationName || !_features.transform || oldPhone) {\n          _options.showAnimationDuration = _options.hideAnimationDuration = 0;\n        } // init modules\n\n\n        for (i = 0; i < _modules.length; i++) {\n          self['init' + _modules[i]]();\n        } // init\n\n\n        if (UiClass) {\n          var ui = self.ui = new UiClass(self, framework);\n          ui.init();\n        }\n\n        _shout('firstUpdate');\n\n        _currentItemIndex = _currentItemIndex || _options.index || 0; // validate index\n\n        if (isNaN(_currentItemIndex) || _currentItemIndex < 0 || _currentItemIndex >= _getNumItems()) {\n          _currentItemIndex = 0;\n        }\n\n        self.currItem = _getItemAt(_currentItemIndex);\n\n        if (_features.isOldIOSPhone || _features.isOldAndroid) {\n          _isFixedPosition = false;\n        }\n\n        template.setAttribute('aria-hidden', 'false');\n\n        if (_options.modal) {\n          if (!_isFixedPosition) {\n            template.style.position = 'absolute';\n            template.style.top = framework.getScrollY() + 'px';\n          } else {\n            template.style.position = 'fixed';\n          }\n        }\n\n        if (_currentWindowScrollY === undefined) {\n          _shout('initialLayout');\n\n          _currentWindowScrollY = _initalWindowScrollY = framework.getScrollY();\n        } // add classes to root element of PhotoSwipe\n\n\n        var rootClasses = 'pswp--open ';\n\n        if (_options.mainClass) {\n          rootClasses += _options.mainClass + ' ';\n        }\n\n        if (_options.showHideOpacity) {\n          rootClasses += 'pswp--animate_opacity ';\n        }\n\n        rootClasses += _likelyTouchDevice ? 'pswp--touch' : 'pswp--notouch';\n        rootClasses += _features.animationName ? ' pswp--css_animation' : '';\n        rootClasses += _features.svg ? ' pswp--svg' : '';\n        framework.addClass(template, rootClasses);\n        self.updateSize(); // initial update\n\n        _containerShiftIndex = -1;\n        _indexDiff = null;\n\n        for (i = 0; i < NUM_HOLDERS; i++) {\n          _setTranslateX((i + _containerShiftIndex) * _slideSize.x, _itemHolders[i].el.style);\n        }\n\n        if (!_oldIE) {\n          framework.bind(self.scrollWrap, _downEvents, self); // no dragging for old IE\n        }\n\n        _listen('initialZoomInEnd', function () {\n          self.setContent(_itemHolders[0], _currentItemIndex - 1);\n          self.setContent(_itemHolders[2], _currentItemIndex + 1);\n          _itemHolders[0].el.style.display = _itemHolders[2].el.style.display = 'block';\n\n          if (_options.focus) {\n            // focus causes layout, \n            // which causes lag during the animation, \n            // that's why we delay it untill the initial zoom transition ends\n            template.focus();\n          }\n\n          _bindEvents();\n        }); // set content for center slide (first time)\n\n\n        self.setContent(_itemHolders[1], _currentItemIndex);\n        self.updateCurrItem();\n\n        _shout('afterInit');\n\n        if (!_isFixedPosition) {\n          // On all versions of iOS lower than 8.0, we check size of viewport every second.\n          // \n          // This is done to detect when Safari top & bottom bars appear, \n          // as this action doesn't trigger any events (like resize). \n          // \n          // On iOS8 they fixed this.\n          // \n          // 10 Nov 2014: iOS 7 usage ~40%. iOS 8 usage 56%.\n          _updateSizeInterval = setInterval(function () {\n            if (!_numAnimations && !_isDragging && !_isZooming && _currZoomLevel === self.currItem.initialZoomLevel) {\n              self.updateSize();\n            }\n          }, 1000);\n        }\n\n        framework.addClass(template, 'pswp--visible');\n      },\n      // Close the gallery, then destroy it\n      close: function () {\n        if (!_isOpen) {\n          return;\n        }\n\n        _isOpen = false;\n        _isDestroying = true;\n\n        _shout('close');\n\n        _unbindEvents();\n\n        _showOrHide(self.currItem, null, true, self.destroy);\n      },\n      // destroys the gallery (unbinds events, cleans up intervals and timeouts to avoid memory leaks)\n      destroy: function () {\n        _shout('destroy');\n\n        if (_showOrHideTimeout) {\n          clearTimeout(_showOrHideTimeout);\n        }\n\n        template.setAttribute('aria-hidden', 'true');\n        template.className = _initalClassName;\n\n        if (_updateSizeInterval) {\n          clearInterval(_updateSizeInterval);\n        }\n\n        framework.unbind(self.scrollWrap, _downEvents, self); // we unbind scroll event at the end, as closing animation may depend on it\n\n        framework.unbind(window, 'scroll', self);\n\n        _stopDragUpdateLoop();\n\n        _stopAllAnimations();\n\n        _listeners = null;\n      },\n\n      /**\n       * Pan image to position\n       * @param {Number} x     \n       * @param {Number} y     \n       * @param {Boolean} force Will ignore bounds if set to true.\n       */\n      panTo: function (x, y, force) {\n        if (!force) {\n          if (x > _currPanBounds.min.x) {\n            x = _currPanBounds.min.x;\n          } else if (x < _currPanBounds.max.x) {\n            x = _currPanBounds.max.x;\n          }\n\n          if (y > _currPanBounds.min.y) {\n            y = _currPanBounds.min.y;\n          } else if (y < _currPanBounds.max.y) {\n            y = _currPanBounds.max.y;\n          }\n        }\n\n        _panOffset.x = x;\n        _panOffset.y = y;\n\n        _applyCurrentZoomPan();\n      },\n      handleEvent: function (e) {\n        e = e || window.event;\n\n        if (_globalEventHandlers[e.type]) {\n          _globalEventHandlers[e.type](e);\n        }\n      },\n      goTo: function (index) {\n        index = _getLoopedId(index);\n        var diff = index - _currentItemIndex;\n        _indexDiff = diff;\n        _currentItemIndex = index;\n        self.currItem = _getItemAt(_currentItemIndex);\n        _currPositionIndex -= diff;\n\n        _moveMainScroll(_slideSize.x * _currPositionIndex);\n\n        _stopAllAnimations();\n\n        _mainScrollAnimating = false;\n        self.updateCurrItem();\n      },\n      next: function () {\n        self.goTo(_currentItemIndex + 1);\n      },\n      prev: function () {\n        self.goTo(_currentItemIndex - 1);\n      },\n      // update current zoom/pan objects\n      updateCurrZoomItem: function (emulateSetContent) {\n        if (emulateSetContent) {\n          _shout('beforeChange', 0);\n        } // itemHolder[1] is middle (current) item\n\n\n        if (_itemHolders[1].el.children.length) {\n          var zoomElement = _itemHolders[1].el.children[0];\n\n          if (framework.hasClass(zoomElement, 'pswp__zoom-wrap')) {\n            _currZoomElementStyle = zoomElement.style;\n          } else {\n            _currZoomElementStyle = null;\n          }\n        } else {\n          _currZoomElementStyle = null;\n        }\n\n        _currPanBounds = self.currItem.bounds;\n        _startZoomLevel = _currZoomLevel = self.currItem.initialZoomLevel;\n        _panOffset.x = _currPanBounds.center.x;\n        _panOffset.y = _currPanBounds.center.y;\n\n        if (emulateSetContent) {\n          _shout('afterChange');\n        }\n      },\n      invalidateCurrItems: function () {\n        _itemsNeedUpdate = true;\n\n        for (var i = 0; i < NUM_HOLDERS; i++) {\n          if (_itemHolders[i].item) {\n            _itemHolders[i].item.needsUpdate = true;\n          }\n        }\n      },\n      updateCurrItem: function (beforeAnimation) {\n        if (_indexDiff === 0) {\n          return;\n        }\n\n        var diffAbs = Math.abs(_indexDiff),\n            tempHolder;\n\n        if (beforeAnimation && diffAbs < 2) {\n          return;\n        }\n\n        self.currItem = _getItemAt(_currentItemIndex);\n        _renderMaxResolution = false;\n\n        _shout('beforeChange', _indexDiff);\n\n        if (diffAbs >= NUM_HOLDERS) {\n          _containerShiftIndex += _indexDiff + (_indexDiff > 0 ? -NUM_HOLDERS : NUM_HOLDERS);\n          diffAbs = NUM_HOLDERS;\n        }\n\n        for (var i = 0; i < diffAbs; i++) {\n          if (_indexDiff > 0) {\n            tempHolder = _itemHolders.shift();\n            _itemHolders[NUM_HOLDERS - 1] = tempHolder; // move first to last\n\n            _containerShiftIndex++;\n\n            _setTranslateX((_containerShiftIndex + 2) * _slideSize.x, tempHolder.el.style);\n\n            self.setContent(tempHolder, _currentItemIndex - diffAbs + i + 1 + 1);\n          } else {\n            tempHolder = _itemHolders.pop();\n\n            _itemHolders.unshift(tempHolder); // move last to first\n\n\n            _containerShiftIndex--;\n\n            _setTranslateX(_containerShiftIndex * _slideSize.x, tempHolder.el.style);\n\n            self.setContent(tempHolder, _currentItemIndex + diffAbs - i - 1 - 1);\n          }\n        } // reset zoom/pan on previous item\n\n\n        if (_currZoomElementStyle && Math.abs(_indexDiff) === 1) {\n          var prevItem = _getItemAt(_prevItemIndex);\n\n          if (prevItem.initialZoomLevel !== _currZoomLevel) {\n            _calculateItemSize(prevItem, _viewportSize);\n\n            _setImageSize(prevItem);\n\n            _applyZoomPanToItem(prevItem);\n          }\n        } // reset diff after update\n\n\n        _indexDiff = 0;\n        self.updateCurrZoomItem();\n        _prevItemIndex = _currentItemIndex;\n\n        _shout('afterChange');\n      },\n      updateSize: function (force) {\n        if (!_isFixedPosition && _options.modal) {\n          var windowScrollY = framework.getScrollY();\n\n          if (_currentWindowScrollY !== windowScrollY) {\n            template.style.top = windowScrollY + 'px';\n            _currentWindowScrollY = windowScrollY;\n          }\n\n          if (!force && _windowVisibleSize.x === window.innerWidth && _windowVisibleSize.y === window.innerHeight) {\n            return;\n          }\n\n          _windowVisibleSize.x = window.innerWidth;\n          _windowVisibleSize.y = window.innerHeight; //template.style.width = _windowVisibleSize.x + 'px';\n\n          template.style.height = _windowVisibleSize.y + 'px';\n        }\n\n        _viewportSize.x = self.scrollWrap.clientWidth;\n        _viewportSize.y = self.scrollWrap.clientHeight;\n\n        _updatePageScrollOffset();\n\n        _slideSize.x = _viewportSize.x + Math.round(_viewportSize.x * _options.spacing);\n        _slideSize.y = _viewportSize.y;\n\n        _moveMainScroll(_slideSize.x * _currPositionIndex);\n\n        _shout('beforeResize'); // even may be used for example to switch image sources\n        // don't re-calculate size on inital size update\n\n\n        if (_containerShiftIndex !== undefined) {\n          var holder, item, hIndex;\n\n          for (var i = 0; i < NUM_HOLDERS; i++) {\n            holder = _itemHolders[i];\n\n            _setTranslateX((i + _containerShiftIndex) * _slideSize.x, holder.el.style);\n\n            hIndex = _currentItemIndex + i - 1;\n\n            if (_options.loop && _getNumItems() > 2) {\n              hIndex = _getLoopedId(hIndex);\n            } // update zoom level on items and refresh source (if needsUpdate)\n\n\n            item = _getItemAt(hIndex); // re-render gallery item if `needsUpdate`,\n            // or doesn't have `bounds` (entirely new slide object)\n\n            if (item && (_itemsNeedUpdate || item.needsUpdate || !item.bounds)) {\n              self.cleanSlide(item);\n              self.setContent(holder, hIndex); // if \"center\" slide\n\n              if (i === 1) {\n                self.currItem = item;\n                self.updateCurrZoomItem(true);\n              }\n\n              item.needsUpdate = false;\n            } else if (holder.index === -1 && hIndex >= 0) {\n              // add content first time\n              self.setContent(holder, hIndex);\n            }\n\n            if (item && item.container) {\n              _calculateItemSize(item, _viewportSize);\n\n              _setImageSize(item);\n\n              _applyZoomPanToItem(item);\n            }\n          }\n\n          _itemsNeedUpdate = false;\n        }\n\n        _startZoomLevel = _currZoomLevel = self.currItem.initialZoomLevel;\n        _currPanBounds = self.currItem.bounds;\n\n        if (_currPanBounds) {\n          _panOffset.x = _currPanBounds.center.x;\n          _panOffset.y = _currPanBounds.center.y;\n\n          _applyCurrentZoomPan(true);\n        }\n\n        _shout('resize');\n      },\n      // Zoom current item to\n      zoomTo: function (destZoomLevel, centerPoint, speed, easingFn, updateFn) {\n        /*\n        \tif(destZoomLevel === 'fit') {\n        \t\tdestZoomLevel = self.currItem.fitRatio;\n        \t} else if(destZoomLevel === 'fill') {\n        \t\tdestZoomLevel = self.currItem.fillRatio;\n        \t}\n        */\n        if (centerPoint) {\n          _startZoomLevel = _currZoomLevel;\n          _midZoomPoint.x = Math.abs(centerPoint.x) - _panOffset.x;\n          _midZoomPoint.y = Math.abs(centerPoint.y) - _panOffset.y;\n\n          _equalizePoints(_startPanOffset, _panOffset);\n        }\n\n        var destPanBounds = _calculatePanBounds(destZoomLevel, false),\n            destPanOffset = {};\n\n        _modifyDestPanOffset('x', destPanBounds, destPanOffset, destZoomLevel);\n\n        _modifyDestPanOffset('y', destPanBounds, destPanOffset, destZoomLevel);\n\n        var initialZoomLevel = _currZoomLevel;\n        var initialPanOffset = {\n          x: _panOffset.x,\n          y: _panOffset.y\n        };\n\n        _roundPoint(destPanOffset);\n\n        var onUpdate = function (now) {\n          if (now === 1) {\n            _currZoomLevel = destZoomLevel;\n            _panOffset.x = destPanOffset.x;\n            _panOffset.y = destPanOffset.y;\n          } else {\n            _currZoomLevel = (destZoomLevel - initialZoomLevel) * now + initialZoomLevel;\n            _panOffset.x = (destPanOffset.x - initialPanOffset.x) * now + initialPanOffset.x;\n            _panOffset.y = (destPanOffset.y - initialPanOffset.y) * now + initialPanOffset.y;\n          }\n\n          if (updateFn) {\n            updateFn(now);\n          }\n\n          _applyCurrentZoomPan(now === 1);\n        };\n\n        if (speed) {\n          _animateProp('customZoomTo', 0, 1, speed, easingFn || framework.easing.sine.inOut, onUpdate);\n        } else {\n          onUpdate(1);\n        }\n      }\n    };\n    /*>>core*/\n\n    /*>>gestures*/\n\n    /**\n     * Mouse/touch/pointer event handlers.\n     * \n     * separated from @core.js for readability\n     */\n\n    var MIN_SWIPE_DISTANCE = 30,\n        DIRECTION_CHECK_OFFSET = 10; // amount of pixels to drag to determine direction of swipe\n\n    var _gestureStartTime,\n        _gestureCheckSpeedTime,\n        // pool of objects that are used during dragging of zooming\n    p = {},\n        // first point\n    p2 = {},\n        // second point (for zoom gesture)\n    delta = {},\n        _currPoint = {},\n        _startPoint = {},\n        _currPointers = [],\n        _startMainScrollPos = {},\n        _releaseAnimData,\n        _posPoints = [],\n        // array of points during dragging, used to determine type of gesture\n    _tempPoint = {},\n        _isZoomingIn,\n        _verticalDragInitiated,\n        _oldAndroidTouchEndTimeout,\n        _currZoomedItemIndex = 0,\n        _centerPoint = _getEmptyPoint(),\n        _lastReleaseTime = 0,\n        _isDragging,\n        // at least one pointer is down\n    _isMultitouch,\n        // at least two _pointers are down\n    _zoomStarted,\n        // zoom level changed during zoom gesture\n    _moved,\n        _dragAnimFrame,\n        _mainScrollShifted,\n        _currentPoints,\n        // array of current touch points\n    _isZooming,\n        _currPointsDistance,\n        _startPointsDistance,\n        _currPanBounds,\n        _mainScrollPos = _getEmptyPoint(),\n        _currZoomElementStyle,\n        _mainScrollAnimating,\n        // true, if animation after swipe gesture is running\n    _midZoomPoint = _getEmptyPoint(),\n        _currCenterPoint = _getEmptyPoint(),\n        _direction,\n        _isFirstMove,\n        _opacityChanged,\n        _bgOpacity,\n        _wasOverInitialZoom,\n        _isEqualPoints = function (p1, p2) {\n      return p1.x === p2.x && p1.y === p2.y;\n    },\n        _isNearbyPoints = function (touch0, touch1) {\n      return Math.abs(touch0.x - touch1.x) < DOUBLE_TAP_RADIUS && Math.abs(touch0.y - touch1.y) < DOUBLE_TAP_RADIUS;\n    },\n        _calculatePointsDistance = function (p1, p2) {\n      _tempPoint.x = Math.abs(p1.x - p2.x);\n      _tempPoint.y = Math.abs(p1.y - p2.y);\n      return Math.sqrt(_tempPoint.x * _tempPoint.x + _tempPoint.y * _tempPoint.y);\n    },\n        _stopDragUpdateLoop = function () {\n      if (_dragAnimFrame) {\n        _cancelAF(_dragAnimFrame);\n\n        _dragAnimFrame = null;\n      }\n    },\n        _dragUpdateLoop = function () {\n      if (_isDragging) {\n        _dragAnimFrame = _requestAF(_dragUpdateLoop);\n\n        _renderMovement();\n      }\n    },\n        _canPan = function () {\n      return !(_options.scaleMode === 'fit' && _currZoomLevel === self.currItem.initialZoomLevel);\n    },\n        // find the closest parent DOM element\n    _closestElement = function (el, fn) {\n      if (!el || el === document) {\n        return false;\n      } // don't search elements above pswp__scroll-wrap\n\n\n      if (el.getAttribute('class') && el.getAttribute('class').indexOf('pswp__scroll-wrap') > -1) {\n        return false;\n      }\n\n      if (fn(el)) {\n        return el;\n      }\n\n      return _closestElement(el.parentNode, fn);\n    },\n        _preventObj = {},\n        _preventDefaultEventBehaviour = function (e, isDown) {\n      _preventObj.prevent = !_closestElement(e.target, _options.isClickableElement);\n\n      _shout('preventDragEvent', e, isDown, _preventObj);\n\n      return _preventObj.prevent;\n    },\n        _convertTouchToPoint = function (touch, p) {\n      p.x = touch.pageX;\n      p.y = touch.pageY;\n      p.id = touch.identifier;\n      return p;\n    },\n        _findCenterOfPoints = function (p1, p2, pCenter) {\n      pCenter.x = (p1.x + p2.x) * 0.5;\n      pCenter.y = (p1.y + p2.y) * 0.5;\n    },\n        _pushPosPoint = function (time, x, y) {\n      if (time - _gestureCheckSpeedTime > 50) {\n        var o = _posPoints.length > 2 ? _posPoints.shift() : {};\n        o.x = x;\n        o.y = y;\n\n        _posPoints.push(o);\n\n        _gestureCheckSpeedTime = time;\n      }\n    },\n        _calculateVerticalDragOpacityRatio = function () {\n      var yOffset = _panOffset.y - self.currItem.initialPosition.y; // difference between initial and current position\n\n      return 1 - Math.abs(yOffset / (_viewportSize.y / 2));\n    },\n        // points pool, reused during touch events\n    _ePoint1 = {},\n        _ePoint2 = {},\n        _tempPointsArr = [],\n        _tempCounter,\n        _getTouchPoints = function (e) {\n      // clean up previous points, without recreating array\n      while (_tempPointsArr.length > 0) {\n        _tempPointsArr.pop();\n      }\n\n      if (!_pointerEventEnabled) {\n        if (e.type.indexOf('touch') > -1) {\n          if (e.touches && e.touches.length > 0) {\n            _tempPointsArr[0] = _convertTouchToPoint(e.touches[0], _ePoint1);\n\n            if (e.touches.length > 1) {\n              _tempPointsArr[1] = _convertTouchToPoint(e.touches[1], _ePoint2);\n            }\n          }\n        } else {\n          _ePoint1.x = e.pageX;\n          _ePoint1.y = e.pageY;\n          _ePoint1.id = '';\n          _tempPointsArr[0] = _ePoint1; //_ePoint1;\n        }\n      } else {\n        _tempCounter = 0; // we can use forEach, as pointer events are supported only in modern browsers\n\n        _currPointers.forEach(function (p) {\n          if (_tempCounter === 0) {\n            _tempPointsArr[0] = p;\n          } else if (_tempCounter === 1) {\n            _tempPointsArr[1] = p;\n          }\n\n          _tempCounter++;\n        });\n      }\n\n      return _tempPointsArr;\n    },\n        _panOrMoveMainScroll = function (axis, delta) {\n      var panFriction,\n          overDiff = 0,\n          newOffset = _panOffset[axis] + delta[axis],\n          startOverDiff,\n          dir = delta[axis] > 0,\n          newMainScrollPosition = _mainScrollPos.x + delta.x,\n          mainScrollDiff = _mainScrollPos.x - _startMainScrollPos.x,\n          newPanPos,\n          newMainScrollPos; // calculate fdistance over the bounds and friction\n\n      if (newOffset > _currPanBounds.min[axis] || newOffset < _currPanBounds.max[axis]) {\n        panFriction = _options.panEndFriction; // Linear increasing of friction, so at 1/4 of viewport it's at max value. \n        // Looks not as nice as was expected. Left for history.\n        // panFriction = (1 - (_panOffset[axis] + delta[axis] + panBounds.min[axis]) / (_viewportSize[axis] / 4) );\n      } else {\n        panFriction = 1;\n      }\n\n      newOffset = _panOffset[axis] + delta[axis] * panFriction; // move main scroll or start panning\n\n      if (_options.allowPanToNext || _currZoomLevel === self.currItem.initialZoomLevel) {\n        if (!_currZoomElementStyle) {\n          newMainScrollPos = newMainScrollPosition;\n        } else if (_direction === 'h' && axis === 'x' && !_zoomStarted) {\n          if (dir) {\n            if (newOffset > _currPanBounds.min[axis]) {\n              panFriction = _options.panEndFriction;\n              overDiff = _currPanBounds.min[axis] - newOffset;\n              startOverDiff = _currPanBounds.min[axis] - _startPanOffset[axis];\n            } // drag right\n\n\n            if ((startOverDiff <= 0 || mainScrollDiff < 0) && _getNumItems() > 1) {\n              newMainScrollPos = newMainScrollPosition;\n\n              if (mainScrollDiff < 0 && newMainScrollPosition > _startMainScrollPos.x) {\n                newMainScrollPos = _startMainScrollPos.x;\n              }\n            } else {\n              if (_currPanBounds.min.x !== _currPanBounds.max.x) {\n                newPanPos = newOffset;\n              }\n            }\n          } else {\n            if (newOffset < _currPanBounds.max[axis]) {\n              panFriction = _options.panEndFriction;\n              overDiff = newOffset - _currPanBounds.max[axis];\n              startOverDiff = _startPanOffset[axis] - _currPanBounds.max[axis];\n            }\n\n            if ((startOverDiff <= 0 || mainScrollDiff > 0) && _getNumItems() > 1) {\n              newMainScrollPos = newMainScrollPosition;\n\n              if (mainScrollDiff > 0 && newMainScrollPosition < _startMainScrollPos.x) {\n                newMainScrollPos = _startMainScrollPos.x;\n              }\n            } else {\n              if (_currPanBounds.min.x !== _currPanBounds.max.x) {\n                newPanPos = newOffset;\n              }\n            }\n          } //\n\n        }\n\n        if (axis === 'x') {\n          if (newMainScrollPos !== undefined) {\n            _moveMainScroll(newMainScrollPos, true);\n\n            if (newMainScrollPos === _startMainScrollPos.x) {\n              _mainScrollShifted = false;\n            } else {\n              _mainScrollShifted = true;\n            }\n          }\n\n          if (_currPanBounds.min.x !== _currPanBounds.max.x) {\n            if (newPanPos !== undefined) {\n              _panOffset.x = newPanPos;\n            } else if (!_mainScrollShifted) {\n              _panOffset.x += delta.x * panFriction;\n            }\n          }\n\n          return newMainScrollPos !== undefined;\n        }\n      }\n\n      if (!_mainScrollAnimating) {\n        if (!_mainScrollShifted) {\n          if (_currZoomLevel > self.currItem.fitRatio) {\n            _panOffset[axis] += delta[axis] * panFriction;\n          }\n        }\n      }\n    },\n        // Pointerdown/touchstart/mousedown handler\n    _onDragStart = function (e) {\n      // Allow dragging only via left mouse button.\n      // As this handler is not added in IE8 - we ignore e.which\n      // \n      // http://www.quirksmode.org/js/events_properties.html\n      // https://developer.mozilla.org/en-US/docs/Web/API/event.button\n      if (e.type === 'mousedown' && e.button > 0) {\n        return;\n      }\n\n      if (_initialZoomRunning) {\n        e.preventDefault();\n        return;\n      }\n\n      if (_oldAndroidTouchEndTimeout && e.type === 'mousedown') {\n        return;\n      }\n\n      if (_preventDefaultEventBehaviour(e, true)) {\n        e.preventDefault();\n      }\n\n      _shout('pointerDown');\n\n      if (_pointerEventEnabled) {\n        var pointerIndex = framework.arraySearch(_currPointers, e.pointerId, 'id');\n\n        if (pointerIndex < 0) {\n          pointerIndex = _currPointers.length;\n        }\n\n        _currPointers[pointerIndex] = {\n          x: e.pageX,\n          y: e.pageY,\n          id: e.pointerId\n        };\n      }\n\n      var startPointsList = _getTouchPoints(e),\n          numPoints = startPointsList.length;\n\n      _currentPoints = null;\n\n      _stopAllAnimations(); // init drag\n\n\n      if (!_isDragging || numPoints === 1) {\n        _isDragging = _isFirstMove = true;\n        framework.bind(window, _upMoveEvents, self);\n        _isZoomingIn = _wasOverInitialZoom = _opacityChanged = _verticalDragInitiated = _mainScrollShifted = _moved = _isMultitouch = _zoomStarted = false;\n        _direction = null;\n\n        _shout('firstTouchStart', startPointsList);\n\n        _equalizePoints(_startPanOffset, _panOffset);\n\n        _currPanDist.x = _currPanDist.y = 0;\n\n        _equalizePoints(_currPoint, startPointsList[0]);\n\n        _equalizePoints(_startPoint, _currPoint); //_equalizePoints(_startMainScrollPos, _mainScrollPos);\n\n\n        _startMainScrollPos.x = _slideSize.x * _currPositionIndex;\n        _posPoints = [{\n          x: _currPoint.x,\n          y: _currPoint.y\n        }];\n        _gestureCheckSpeedTime = _gestureStartTime = _getCurrentTime(); //_mainScrollAnimationEnd(true);\n\n        _calculatePanBounds(_currZoomLevel, true); // Start rendering\n\n\n        _stopDragUpdateLoop();\n\n        _dragUpdateLoop();\n      } // init zoom\n\n\n      if (!_isZooming && numPoints > 1 && !_mainScrollAnimating && !_mainScrollShifted) {\n        _startZoomLevel = _currZoomLevel;\n        _zoomStarted = false; // true if zoom changed at least once\n\n        _isZooming = _isMultitouch = true;\n        _currPanDist.y = _currPanDist.x = 0;\n\n        _equalizePoints(_startPanOffset, _panOffset);\n\n        _equalizePoints(p, startPointsList[0]);\n\n        _equalizePoints(p2, startPointsList[1]);\n\n        _findCenterOfPoints(p, p2, _currCenterPoint);\n\n        _midZoomPoint.x = Math.abs(_currCenterPoint.x) - _panOffset.x;\n        _midZoomPoint.y = Math.abs(_currCenterPoint.y) - _panOffset.y;\n        _currPointsDistance = _startPointsDistance = _calculatePointsDistance(p, p2);\n      }\n    },\n        // Pointermove/touchmove/mousemove handler\n    _onDragMove = function (e) {\n      e.preventDefault();\n\n      if (_pointerEventEnabled) {\n        var pointerIndex = framework.arraySearch(_currPointers, e.pointerId, 'id');\n\n        if (pointerIndex > -1) {\n          var p = _currPointers[pointerIndex];\n          p.x = e.pageX;\n          p.y = e.pageY;\n        }\n      }\n\n      if (_isDragging) {\n        var touchesList = _getTouchPoints(e);\n\n        if (!_direction && !_moved && !_isZooming) {\n          if (_mainScrollPos.x !== _slideSize.x * _currPositionIndex) {\n            // if main scroll position is shifted – direction is always horizontal\n            _direction = 'h';\n          } else {\n            var diff = Math.abs(touchesList[0].x - _currPoint.x) - Math.abs(touchesList[0].y - _currPoint.y); // check the direction of movement\n\n            if (Math.abs(diff) >= DIRECTION_CHECK_OFFSET) {\n              _direction = diff > 0 ? 'h' : 'v';\n              _currentPoints = touchesList;\n            }\n          }\n        } else {\n          _currentPoints = touchesList;\n        }\n      }\n    },\n        // \n    _renderMovement = function () {\n      if (!_currentPoints) {\n        return;\n      }\n\n      var numPoints = _currentPoints.length;\n\n      if (numPoints === 0) {\n        return;\n      }\n\n      _equalizePoints(p, _currentPoints[0]);\n\n      delta.x = p.x - _currPoint.x;\n      delta.y = p.y - _currPoint.y;\n\n      if (_isZooming && numPoints > 1) {\n        // Handle behaviour for more than 1 point\n        _currPoint.x = p.x;\n        _currPoint.y = p.y; // check if one of two points changed\n\n        if (!delta.x && !delta.y && _isEqualPoints(_currentPoints[1], p2)) {\n          return;\n        }\n\n        _equalizePoints(p2, _currentPoints[1]);\n\n        if (!_zoomStarted) {\n          _zoomStarted = true;\n\n          _shout('zoomGestureStarted');\n        } // Distance between two points\n\n\n        var pointsDistance = _calculatePointsDistance(p, p2);\n\n        var zoomLevel = _calculateZoomLevel(pointsDistance); // slightly over the of initial zoom level\n\n\n        if (zoomLevel > self.currItem.initialZoomLevel + self.currItem.initialZoomLevel / 15) {\n          _wasOverInitialZoom = true;\n        } // Apply the friction if zoom level is out of the bounds\n\n\n        var zoomFriction = 1,\n            minZoomLevel = _getMinZoomLevel(),\n            maxZoomLevel = _getMaxZoomLevel();\n\n        if (zoomLevel < minZoomLevel) {\n          if (_options.pinchToClose && !_wasOverInitialZoom && _startZoomLevel <= self.currItem.initialZoomLevel) {\n            // fade out background if zooming out\n            var minusDiff = minZoomLevel - zoomLevel;\n            var percent = 1 - minusDiff / (minZoomLevel / 1.2);\n\n            _applyBgOpacity(percent);\n\n            _shout('onPinchClose', percent);\n\n            _opacityChanged = true;\n          } else {\n            zoomFriction = (minZoomLevel - zoomLevel) / minZoomLevel;\n\n            if (zoomFriction > 1) {\n              zoomFriction = 1;\n            }\n\n            zoomLevel = minZoomLevel - zoomFriction * (minZoomLevel / 3);\n          }\n        } else if (zoomLevel > maxZoomLevel) {\n          // 1.5 - extra zoom level above the max. E.g. if max is x6, real max 6 + 1.5 = 7.5\n          zoomFriction = (zoomLevel - maxZoomLevel) / (minZoomLevel * 6);\n\n          if (zoomFriction > 1) {\n            zoomFriction = 1;\n          }\n\n          zoomLevel = maxZoomLevel + zoomFriction * minZoomLevel;\n        }\n\n        if (zoomFriction < 0) {\n          zoomFriction = 0;\n        } // distance between touch points after friction is applied\n\n\n        _currPointsDistance = pointsDistance; // _centerPoint - The point in the middle of two pointers\n\n        _findCenterOfPoints(p, p2, _centerPoint); // paning with two pointers pressed\n\n\n        _currPanDist.x += _centerPoint.x - _currCenterPoint.x;\n        _currPanDist.y += _centerPoint.y - _currCenterPoint.y;\n\n        _equalizePoints(_currCenterPoint, _centerPoint);\n\n        _panOffset.x = _calculatePanOffset('x', zoomLevel);\n        _panOffset.y = _calculatePanOffset('y', zoomLevel);\n        _isZoomingIn = zoomLevel > _currZoomLevel;\n        _currZoomLevel = zoomLevel;\n\n        _applyCurrentZoomPan();\n      } else {\n        // handle behaviour for one point (dragging or panning)\n        if (!_direction) {\n          return;\n        }\n\n        if (_isFirstMove) {\n          _isFirstMove = false; // subtract drag distance that was used during the detection direction  \n\n          if (Math.abs(delta.x) >= DIRECTION_CHECK_OFFSET) {\n            delta.x -= _currentPoints[0].x - _startPoint.x;\n          }\n\n          if (Math.abs(delta.y) >= DIRECTION_CHECK_OFFSET) {\n            delta.y -= _currentPoints[0].y - _startPoint.y;\n          }\n        }\n\n        _currPoint.x = p.x;\n        _currPoint.y = p.y; // do nothing if pointers position hasn't changed\n\n        if (delta.x === 0 && delta.y === 0) {\n          return;\n        }\n\n        if (_direction === 'v' && _options.closeOnVerticalDrag) {\n          if (!_canPan()) {\n            _currPanDist.y += delta.y;\n            _panOffset.y += delta.y;\n\n            var opacityRatio = _calculateVerticalDragOpacityRatio();\n\n            _verticalDragInitiated = true;\n\n            _shout('onVerticalDrag', opacityRatio);\n\n            _applyBgOpacity(opacityRatio);\n\n            _applyCurrentZoomPan();\n\n            return;\n          }\n        }\n\n        _pushPosPoint(_getCurrentTime(), p.x, p.y);\n\n        _moved = true;\n        _currPanBounds = self.currItem.bounds;\n\n        var mainScrollChanged = _panOrMoveMainScroll('x', delta);\n\n        if (!mainScrollChanged) {\n          _panOrMoveMainScroll('y', delta);\n\n          _roundPoint(_panOffset);\n\n          _applyCurrentZoomPan();\n        }\n      }\n    },\n        // Pointerup/pointercancel/touchend/touchcancel/mouseup event handler\n    _onDragRelease = function (e) {\n      if (_features.isOldAndroid) {\n        if (_oldAndroidTouchEndTimeout && e.type === 'mouseup') {\n          return;\n        } // on Android (v4.1, 4.2, 4.3 & possibly older) \n        // ghost mousedown/up event isn't preventable via e.preventDefault,\n        // which causes fake mousedown event\n        // so we block mousedown/up for 600ms\n\n\n        if (e.type.indexOf('touch') > -1) {\n          clearTimeout(_oldAndroidTouchEndTimeout);\n          _oldAndroidTouchEndTimeout = setTimeout(function () {\n            _oldAndroidTouchEndTimeout = 0;\n          }, 600);\n        }\n      }\n\n      _shout('pointerUp');\n\n      if (_preventDefaultEventBehaviour(e, false)) {\n        e.preventDefault();\n      }\n\n      var releasePoint;\n\n      if (_pointerEventEnabled) {\n        var pointerIndex = framework.arraySearch(_currPointers, e.pointerId, 'id');\n\n        if (pointerIndex > -1) {\n          releasePoint = _currPointers.splice(pointerIndex, 1)[0];\n\n          if (navigator.msPointerEnabled) {\n            var MSPOINTER_TYPES = {\n              4: 'mouse',\n              // event.MSPOINTER_TYPE_MOUSE\n              2: 'touch',\n              // event.MSPOINTER_TYPE_TOUCH \n              3: 'pen' // event.MSPOINTER_TYPE_PEN\n\n            };\n            releasePoint.type = MSPOINTER_TYPES[e.pointerType];\n\n            if (!releasePoint.type) {\n              releasePoint.type = e.pointerType || 'mouse';\n            }\n          } else {\n            releasePoint.type = e.pointerType || 'mouse';\n          }\n        }\n      }\n\n      var touchList = _getTouchPoints(e),\n          gestureType,\n          numPoints = touchList.length;\n\n      if (e.type === 'mouseup') {\n        numPoints = 0;\n      } // Do nothing if there were 3 touch points or more\n\n\n      if (numPoints === 2) {\n        _currentPoints = null;\n        return true;\n      } // if second pointer released\n\n\n      if (numPoints === 1) {\n        _equalizePoints(_startPoint, touchList[0]);\n      } // pointer hasn't moved, send \"tap release\" point\n\n\n      if (numPoints === 0 && !_direction && !_mainScrollAnimating) {\n        if (!releasePoint) {\n          if (e.type === 'mouseup') {\n            releasePoint = {\n              x: e.pageX,\n              y: e.pageY,\n              type: 'mouse'\n            };\n          } else if (e.changedTouches && e.changedTouches[0]) {\n            releasePoint = {\n              x: e.changedTouches[0].pageX,\n              y: e.changedTouches[0].pageY,\n              type: 'touch'\n            };\n          }\n        }\n\n        _shout('touchRelease', e, releasePoint);\n      } // Difference in time between releasing of two last touch points (zoom gesture)\n\n\n      var releaseTimeDiff = -1; // Gesture completed, no pointers left\n\n      if (numPoints === 0) {\n        _isDragging = false;\n        framework.unbind(window, _upMoveEvents, self);\n\n        _stopDragUpdateLoop();\n\n        if (_isZooming) {\n          // Two points released at the same time\n          releaseTimeDiff = 0;\n        } else if (_lastReleaseTime !== -1) {\n          releaseTimeDiff = _getCurrentTime() - _lastReleaseTime;\n        }\n      }\n\n      _lastReleaseTime = numPoints === 1 ? _getCurrentTime() : -1;\n\n      if (releaseTimeDiff !== -1 && releaseTimeDiff < 150) {\n        gestureType = 'zoom';\n      } else {\n        gestureType = 'swipe';\n      }\n\n      if (_isZooming && numPoints < 2) {\n        _isZooming = false; // Only second point released\n\n        if (numPoints === 1) {\n          gestureType = 'zoomPointerUp';\n        }\n\n        _shout('zoomGestureEnded');\n      }\n\n      _currentPoints = null;\n\n      if (!_moved && !_zoomStarted && !_mainScrollAnimating && !_verticalDragInitiated) {\n        // nothing to animate\n        return;\n      }\n\n      _stopAllAnimations();\n\n      if (!_releaseAnimData) {\n        _releaseAnimData = _initDragReleaseAnimationData();\n      }\n\n      _releaseAnimData.calculateSwipeSpeed('x');\n\n      if (_verticalDragInitiated) {\n        var opacityRatio = _calculateVerticalDragOpacityRatio();\n\n        if (opacityRatio < _options.verticalDragRange) {\n          self.close();\n        } else {\n          var initalPanY = _panOffset.y,\n              initialBgOpacity = _bgOpacity;\n\n          _animateProp('verticalDrag', 0, 1, 300, framework.easing.cubic.out, function (now) {\n            _panOffset.y = (self.currItem.initialPosition.y - initalPanY) * now + initalPanY;\n\n            _applyBgOpacity((1 - initialBgOpacity) * now + initialBgOpacity);\n\n            _applyCurrentZoomPan();\n          });\n\n          _shout('onVerticalDrag', 1);\n        }\n\n        return;\n      } // main scroll \n\n\n      if ((_mainScrollShifted || _mainScrollAnimating) && numPoints === 0) {\n        var itemChanged = _finishSwipeMainScrollGesture(gestureType, _releaseAnimData);\n\n        if (itemChanged) {\n          return;\n        }\n\n        gestureType = 'zoomPointerUp';\n      } // prevent zoom/pan animation when main scroll animation runs\n\n\n      if (_mainScrollAnimating) {\n        return;\n      } // Complete simple zoom gesture (reset zoom level if it's out of the bounds)  \n\n\n      if (gestureType !== 'swipe') {\n        _completeZoomGesture();\n\n        return;\n      } // Complete pan gesture if main scroll is not shifted, and it's possible to pan current image\n\n\n      if (!_mainScrollShifted && _currZoomLevel > self.currItem.fitRatio) {\n        _completePanGesture(_releaseAnimData);\n      }\n    },\n        // Returns object with data about gesture\n    // It's created only once and then reused\n    _initDragReleaseAnimationData = function () {\n      // temp local vars\n      var lastFlickDuration, tempReleasePos; // s = this\n\n      var s = {\n        lastFlickOffset: {},\n        lastFlickDist: {},\n        lastFlickSpeed: {},\n        slowDownRatio: {},\n        slowDownRatioReverse: {},\n        speedDecelerationRatio: {},\n        speedDecelerationRatioAbs: {},\n        distanceOffset: {},\n        backAnimDestination: {},\n        backAnimStarted: {},\n        calculateSwipeSpeed: function (axis) {\n          if (_posPoints.length > 1) {\n            lastFlickDuration = _getCurrentTime() - _gestureCheckSpeedTime + 50;\n            tempReleasePos = _posPoints[_posPoints.length - 2][axis];\n          } else {\n            lastFlickDuration = _getCurrentTime() - _gestureStartTime; // total gesture duration\n\n            tempReleasePos = _startPoint[axis];\n          }\n\n          s.lastFlickOffset[axis] = _currPoint[axis] - tempReleasePos;\n          s.lastFlickDist[axis] = Math.abs(s.lastFlickOffset[axis]);\n\n          if (s.lastFlickDist[axis] > 20) {\n            s.lastFlickSpeed[axis] = s.lastFlickOffset[axis] / lastFlickDuration;\n          } else {\n            s.lastFlickSpeed[axis] = 0;\n          }\n\n          if (Math.abs(s.lastFlickSpeed[axis]) < 0.1) {\n            s.lastFlickSpeed[axis] = 0;\n          }\n\n          s.slowDownRatio[axis] = 0.95;\n          s.slowDownRatioReverse[axis] = 1 - s.slowDownRatio[axis];\n          s.speedDecelerationRatio[axis] = 1;\n        },\n        calculateOverBoundsAnimOffset: function (axis, speed) {\n          if (!s.backAnimStarted[axis]) {\n            if (_panOffset[axis] > _currPanBounds.min[axis]) {\n              s.backAnimDestination[axis] = _currPanBounds.min[axis];\n            } else if (_panOffset[axis] < _currPanBounds.max[axis]) {\n              s.backAnimDestination[axis] = _currPanBounds.max[axis];\n            }\n\n            if (s.backAnimDestination[axis] !== undefined) {\n              s.slowDownRatio[axis] = 0.7;\n              s.slowDownRatioReverse[axis] = 1 - s.slowDownRatio[axis];\n\n              if (s.speedDecelerationRatioAbs[axis] < 0.05) {\n                s.lastFlickSpeed[axis] = 0;\n                s.backAnimStarted[axis] = true;\n\n                _animateProp('bounceZoomPan' + axis, _panOffset[axis], s.backAnimDestination[axis], speed || 300, framework.easing.sine.out, function (pos) {\n                  _panOffset[axis] = pos;\n\n                  _applyCurrentZoomPan();\n                });\n              }\n            }\n          }\n        },\n        // Reduces the speed by slowDownRatio (per 10ms)\n        calculateAnimOffset: function (axis) {\n          if (!s.backAnimStarted[axis]) {\n            s.speedDecelerationRatio[axis] = s.speedDecelerationRatio[axis] * (s.slowDownRatio[axis] + s.slowDownRatioReverse[axis] - s.slowDownRatioReverse[axis] * s.timeDiff / 10);\n            s.speedDecelerationRatioAbs[axis] = Math.abs(s.lastFlickSpeed[axis] * s.speedDecelerationRatio[axis]);\n            s.distanceOffset[axis] = s.lastFlickSpeed[axis] * s.speedDecelerationRatio[axis] * s.timeDiff;\n            _panOffset[axis] += s.distanceOffset[axis];\n          }\n        },\n        panAnimLoop: function () {\n          if (_animations.zoomPan) {\n            _animations.zoomPan.raf = _requestAF(s.panAnimLoop);\n            s.now = _getCurrentTime();\n            s.timeDiff = s.now - s.lastNow;\n            s.lastNow = s.now;\n            s.calculateAnimOffset('x');\n            s.calculateAnimOffset('y');\n\n            _applyCurrentZoomPan();\n\n            s.calculateOverBoundsAnimOffset('x');\n            s.calculateOverBoundsAnimOffset('y');\n\n            if (s.speedDecelerationRatioAbs.x < 0.05 && s.speedDecelerationRatioAbs.y < 0.05) {\n              // round pan position\n              _panOffset.x = Math.round(_panOffset.x);\n              _panOffset.y = Math.round(_panOffset.y);\n\n              _applyCurrentZoomPan();\n\n              _stopAnimation('zoomPan');\n\n              return;\n            }\n          }\n        }\n      };\n      return s;\n    },\n        _completePanGesture = function (animData) {\n      // calculate swipe speed for Y axis (paanning)\n      animData.calculateSwipeSpeed('y');\n      _currPanBounds = self.currItem.bounds;\n      animData.backAnimDestination = {};\n      animData.backAnimStarted = {}; // Avoid acceleration animation if speed is too low\n\n      if (Math.abs(animData.lastFlickSpeed.x) <= 0.05 && Math.abs(animData.lastFlickSpeed.y) <= 0.05) {\n        animData.speedDecelerationRatioAbs.x = animData.speedDecelerationRatioAbs.y = 0; // Run pan drag release animation. E.g. if you drag image and release finger without momentum.\n\n        animData.calculateOverBoundsAnimOffset('x');\n        animData.calculateOverBoundsAnimOffset('y');\n        return true;\n      } // Animation loop that controls the acceleration after pan gesture ends\n\n\n      _registerStartAnimation('zoomPan');\n\n      animData.lastNow = _getCurrentTime();\n      animData.panAnimLoop();\n    },\n        _finishSwipeMainScrollGesture = function (gestureType, _releaseAnimData) {\n      var itemChanged;\n\n      if (!_mainScrollAnimating) {\n        _currZoomedItemIndex = _currentItemIndex;\n      }\n\n      var itemsDiff;\n\n      if (gestureType === 'swipe') {\n        var totalShiftDist = _currPoint.x - _startPoint.x,\n            isFastLastFlick = _releaseAnimData.lastFlickDist.x < 10; // if container is shifted for more than MIN_SWIPE_DISTANCE, \n        // and last flick gesture was in right direction\n\n        if (totalShiftDist > MIN_SWIPE_DISTANCE && (isFastLastFlick || _releaseAnimData.lastFlickOffset.x > 20)) {\n          // go to prev item\n          itemsDiff = -1;\n        } else if (totalShiftDist < -MIN_SWIPE_DISTANCE && (isFastLastFlick || _releaseAnimData.lastFlickOffset.x < -20)) {\n          // go to next item\n          itemsDiff = 1;\n        }\n      }\n\n      var nextCircle;\n\n      if (itemsDiff) {\n        _currentItemIndex += itemsDiff;\n\n        if (_currentItemIndex < 0) {\n          _currentItemIndex = _options.loop ? _getNumItems() - 1 : 0;\n          nextCircle = true;\n        } else if (_currentItemIndex >= _getNumItems()) {\n          _currentItemIndex = _options.loop ? 0 : _getNumItems() - 1;\n          nextCircle = true;\n        }\n\n        if (!nextCircle || _options.loop) {\n          _indexDiff += itemsDiff;\n          _currPositionIndex -= itemsDiff;\n          itemChanged = true;\n        }\n      }\n\n      var animateToX = _slideSize.x * _currPositionIndex;\n      var animateToDist = Math.abs(animateToX - _mainScrollPos.x);\n      var finishAnimDuration;\n\n      if (!itemChanged && animateToX > _mainScrollPos.x !== _releaseAnimData.lastFlickSpeed.x > 0) {\n        // \"return to current\" duration, e.g. when dragging from slide 0 to -1\n        finishAnimDuration = 333;\n      } else {\n        finishAnimDuration = Math.abs(_releaseAnimData.lastFlickSpeed.x) > 0 ? animateToDist / Math.abs(_releaseAnimData.lastFlickSpeed.x) : 333;\n        finishAnimDuration = Math.min(finishAnimDuration, 400);\n        finishAnimDuration = Math.max(finishAnimDuration, 250);\n      }\n\n      if (_currZoomedItemIndex === _currentItemIndex) {\n        itemChanged = false;\n      }\n\n      _mainScrollAnimating = true;\n\n      _shout('mainScrollAnimStart');\n\n      _animateProp('mainScroll', _mainScrollPos.x, animateToX, finishAnimDuration, framework.easing.cubic.out, _moveMainScroll, function () {\n        _stopAllAnimations();\n\n        _mainScrollAnimating = false;\n        _currZoomedItemIndex = -1;\n\n        if (itemChanged || _currZoomedItemIndex !== _currentItemIndex) {\n          self.updateCurrItem();\n        }\n\n        _shout('mainScrollAnimComplete');\n      });\n\n      if (itemChanged) {\n        self.updateCurrItem(true);\n      }\n\n      return itemChanged;\n    },\n        _calculateZoomLevel = function (touchesDistance) {\n      return 1 / _startPointsDistance * touchesDistance * _startZoomLevel;\n    },\n        // Resets zoom if it's out of bounds\n    _completeZoomGesture = function () {\n      var destZoomLevel = _currZoomLevel,\n          minZoomLevel = _getMinZoomLevel(),\n          maxZoomLevel = _getMaxZoomLevel();\n\n      if (_currZoomLevel < minZoomLevel) {\n        destZoomLevel = minZoomLevel;\n      } else if (_currZoomLevel > maxZoomLevel) {\n        destZoomLevel = maxZoomLevel;\n      }\n\n      var destOpacity = 1,\n          onUpdate,\n          initialOpacity = _bgOpacity;\n\n      if (_opacityChanged && !_isZoomingIn && !_wasOverInitialZoom && _currZoomLevel < minZoomLevel) {\n        //_closedByScroll = true;\n        self.close();\n        return true;\n      }\n\n      if (_opacityChanged) {\n        onUpdate = function (now) {\n          _applyBgOpacity((destOpacity - initialOpacity) * now + initialOpacity);\n        };\n      }\n\n      self.zoomTo(destZoomLevel, 0, 200, framework.easing.cubic.out, onUpdate);\n      return true;\n    };\n\n    _registerModule('Gestures', {\n      publicMethods: {\n        initGestures: function () {\n          // helper function that builds touch/pointer/mouse events\n          var addEventNames = function (pref, down, move, up, cancel) {\n            _dragStartEvent = pref + down;\n            _dragMoveEvent = pref + move;\n            _dragEndEvent = pref + up;\n\n            if (cancel) {\n              _dragCancelEvent = pref + cancel;\n            } else {\n              _dragCancelEvent = '';\n            }\n          };\n\n          _pointerEventEnabled = _features.pointerEvent;\n\n          if (_pointerEventEnabled && _features.touch) {\n            // we don't need touch events, if browser supports pointer events\n            _features.touch = false;\n          }\n\n          if (_pointerEventEnabled) {\n            if (navigator.msPointerEnabled) {\n              // IE10 pointer events are case-sensitive\n              addEventNames('MSPointer', 'Down', 'Move', 'Up', 'Cancel');\n            } else {\n              addEventNames('pointer', 'down', 'move', 'up', 'cancel');\n            }\n          } else if (_features.touch) {\n            addEventNames('touch', 'start', 'move', 'end', 'cancel');\n            _likelyTouchDevice = true;\n          } else {\n            addEventNames('mouse', 'down', 'move', 'up');\n          }\n\n          _upMoveEvents = _dragMoveEvent + ' ' + _dragEndEvent + ' ' + _dragCancelEvent;\n          _downEvents = _dragStartEvent;\n\n          if (_pointerEventEnabled && !_likelyTouchDevice) {\n            _likelyTouchDevice = navigator.maxTouchPoints > 1 || navigator.msMaxTouchPoints > 1;\n          } // make variable public\n\n\n          self.likelyTouchDevice = _likelyTouchDevice;\n          _globalEventHandlers[_dragStartEvent] = _onDragStart;\n          _globalEventHandlers[_dragMoveEvent] = _onDragMove;\n          _globalEventHandlers[_dragEndEvent] = _onDragRelease; // the Kraken\n\n          if (_dragCancelEvent) {\n            _globalEventHandlers[_dragCancelEvent] = _globalEventHandlers[_dragEndEvent];\n          } // Bind mouse events on device with detected hardware touch support, in case it supports multiple types of input.\n\n\n          if (_features.touch) {\n            _downEvents += ' mousedown';\n            _upMoveEvents += ' mousemove mouseup';\n            _globalEventHandlers.mousedown = _globalEventHandlers[_dragStartEvent];\n            _globalEventHandlers.mousemove = _globalEventHandlers[_dragMoveEvent];\n            _globalEventHandlers.mouseup = _globalEventHandlers[_dragEndEvent];\n          }\n\n          if (!_likelyTouchDevice) {\n            // don't allow pan to next slide from zoomed state on Desktop\n            _options.allowPanToNext = false;\n          }\n        }\n      }\n    });\n    /*>>gestures*/\n\n    /*>>show-hide-transition*/\n\n    /**\n     * show-hide-transition.js:\n     *\n     * Manages initial opening or closing transition.\n     *\n     * If you're not planning to use transition for gallery at all,\n     * you may set options hideAnimationDuration and showAnimationDuration to 0,\n     * and just delete startAnimation function.\n     * \n     */\n\n\n    var _showOrHideTimeout,\n        _showOrHide = function (item, img, out, completeFn) {\n      if (_showOrHideTimeout) {\n        clearTimeout(_showOrHideTimeout);\n      }\n\n      _initialZoomRunning = true;\n      _initialContentSet = true; // dimensions of small thumbnail {x:,y:,w:}.\n      // Height is optional, as calculated based on large image.\n\n      var thumbBounds;\n\n      if (item.initialLayout) {\n        thumbBounds = item.initialLayout;\n        item.initialLayout = null;\n      } else {\n        thumbBounds = _options.getThumbBoundsFn && _options.getThumbBoundsFn(_currentItemIndex);\n      }\n\n      var duration = out ? _options.hideAnimationDuration : _options.showAnimationDuration;\n\n      var onComplete = function () {\n        _stopAnimation('initialZoom');\n\n        if (!out) {\n          _applyBgOpacity(1);\n\n          if (img) {\n            img.style.display = 'block';\n          }\n\n          framework.addClass(template, 'pswp--animated-in');\n\n          _shout('initialZoom' + (out ? 'OutEnd' : 'InEnd'));\n        } else {\n          self.template.removeAttribute('style');\n          self.bg.removeAttribute('style');\n        }\n\n        if (completeFn) {\n          completeFn();\n        }\n\n        _initialZoomRunning = false;\n      }; // if bounds aren't provided, just open gallery without animation\n\n\n      if (!duration || !thumbBounds || thumbBounds.x === undefined) {\n        _shout('initialZoom' + (out ? 'Out' : 'In'));\n\n        _currZoomLevel = item.initialZoomLevel;\n\n        _equalizePoints(_panOffset, item.initialPosition);\n\n        _applyCurrentZoomPan();\n\n        template.style.opacity = out ? 0 : 1;\n\n        _applyBgOpacity(1);\n\n        if (duration) {\n          setTimeout(function () {\n            onComplete();\n          }, duration);\n        } else {\n          onComplete();\n        }\n\n        return;\n      }\n\n      var startAnimation = function () {\n        var closeWithRaf = _closedByScroll,\n            fadeEverything = !self.currItem.src || self.currItem.loadError || _options.showHideOpacity; // apply hw-acceleration to image\n\n        if (item.miniImg) {\n          item.miniImg.style.webkitBackfaceVisibility = 'hidden';\n        }\n\n        if (!out) {\n          _currZoomLevel = thumbBounds.w / item.w;\n          _panOffset.x = thumbBounds.x;\n          _panOffset.y = thumbBounds.y - _initalWindowScrollY;\n          self[fadeEverything ? 'template' : 'bg'].style.opacity = 0.001;\n\n          _applyCurrentZoomPan();\n        }\n\n        _registerStartAnimation('initialZoom');\n\n        if (out && !closeWithRaf) {\n          framework.removeClass(template, 'pswp--animated-in');\n        }\n\n        if (fadeEverything) {\n          if (out) {\n            framework[(closeWithRaf ? 'remove' : 'add') + 'Class'](template, 'pswp--animate_opacity');\n          } else {\n            setTimeout(function () {\n              framework.addClass(template, 'pswp--animate_opacity');\n            }, 30);\n          }\n        }\n\n        _showOrHideTimeout = setTimeout(function () {\n          _shout('initialZoom' + (out ? 'Out' : 'In'));\n\n          if (!out) {\n            // \"in\" animation always uses CSS transitions (instead of rAF).\n            // CSS transition work faster here, \n            // as developer may also want to animate other things, \n            // like ui on top of sliding area, which can be animated just via CSS\n            _currZoomLevel = item.initialZoomLevel;\n\n            _equalizePoints(_panOffset, item.initialPosition);\n\n            _applyCurrentZoomPan();\n\n            _applyBgOpacity(1);\n\n            if (fadeEverything) {\n              template.style.opacity = 1;\n            } else {\n              _applyBgOpacity(1);\n            }\n\n            _showOrHideTimeout = setTimeout(onComplete, duration + 20);\n          } else {\n            // \"out\" animation uses rAF only when PhotoSwipe is closed by browser scroll, to recalculate position\n            var destZoomLevel = thumbBounds.w / item.w,\n                initialPanOffset = {\n              x: _panOffset.x,\n              y: _panOffset.y\n            },\n                initialZoomLevel = _currZoomLevel,\n                initalBgOpacity = _bgOpacity,\n                onUpdate = function (now) {\n              if (now === 1) {\n                _currZoomLevel = destZoomLevel;\n                _panOffset.x = thumbBounds.x;\n                _panOffset.y = thumbBounds.y - _currentWindowScrollY;\n              } else {\n                _currZoomLevel = (destZoomLevel - initialZoomLevel) * now + initialZoomLevel;\n                _panOffset.x = (thumbBounds.x - initialPanOffset.x) * now + initialPanOffset.x;\n                _panOffset.y = (thumbBounds.y - _currentWindowScrollY - initialPanOffset.y) * now + initialPanOffset.y;\n              }\n\n              _applyCurrentZoomPan();\n\n              if (fadeEverything) {\n                template.style.opacity = 1 - now;\n              } else {\n                _applyBgOpacity(initalBgOpacity - now * initalBgOpacity);\n              }\n            };\n\n            if (closeWithRaf) {\n              _animateProp('initialZoom', 0, 1, duration, framework.easing.cubic.out, onUpdate, onComplete);\n            } else {\n              onUpdate(1);\n              _showOrHideTimeout = setTimeout(onComplete, duration + 20);\n            }\n          }\n        }, out ? 25 : 90); // Main purpose of this delay is to give browser time to paint and\n        // create composite layers of PhotoSwipe UI parts (background, controls, caption, arrows).\n        // Which avoids lag at the beginning of scale transition.\n      };\n\n      startAnimation();\n    };\n    /*>>show-hide-transition*/\n\n    /*>>items-controller*/\n\n    /**\n    *\n    * Controller manages gallery items, their dimensions, and their content.\n    * \n    */\n\n\n    var _items,\n        _tempPanAreaSize = {},\n        _imagesToAppendPool = [],\n        _initialContentSet,\n        _initialZoomRunning,\n        _controllerDefaultOptions = {\n      index: 0,\n      errorMsg: '<div class=\"pswp__error-msg\"><a href=\"%url%\" target=\"_blank\">The image</a> could not be loaded.</div>',\n      forceProgressiveLoading: false,\n      // TODO\n      preload: [1, 1],\n      getNumItemsFn: function () {\n        return _items.length;\n      }\n    };\n\n    var _getItemAt,\n        _getNumItems,\n        _initialIsLoop,\n        _getZeroBounds = function () {\n      return {\n        center: {\n          x: 0,\n          y: 0\n        },\n        max: {\n          x: 0,\n          y: 0\n        },\n        min: {\n          x: 0,\n          y: 0\n        }\n      };\n    },\n        _calculateSingleItemPanBounds = function (item, realPanElementW, realPanElementH) {\n      var bounds = item.bounds; // position of element when it's centered\n\n      bounds.center.x = Math.round((_tempPanAreaSize.x - realPanElementW) / 2);\n      bounds.center.y = Math.round((_tempPanAreaSize.y - realPanElementH) / 2) + item.vGap.top; // maximum pan position\n\n      bounds.max.x = realPanElementW > _tempPanAreaSize.x ? Math.round(_tempPanAreaSize.x - realPanElementW) : bounds.center.x;\n      bounds.max.y = realPanElementH > _tempPanAreaSize.y ? Math.round(_tempPanAreaSize.y - realPanElementH) + item.vGap.top : bounds.center.y; // minimum pan position\n\n      bounds.min.x = realPanElementW > _tempPanAreaSize.x ? 0 : bounds.center.x;\n      bounds.min.y = realPanElementH > _tempPanAreaSize.y ? item.vGap.top : bounds.center.y;\n    },\n        _calculateItemSize = function (item, viewportSize, zoomLevel) {\n      if (item.src && !item.loadError) {\n        var isInitial = !zoomLevel;\n\n        if (isInitial) {\n          if (!item.vGap) {\n            item.vGap = {\n              top: 0,\n              bottom: 0\n            };\n          } // allows overriding vertical margin for individual items\n\n\n          _shout('parseVerticalMargin', item);\n        }\n\n        _tempPanAreaSize.x = viewportSize.x;\n        _tempPanAreaSize.y = viewportSize.y - item.vGap.top - item.vGap.bottom;\n\n        if (isInitial) {\n          var hRatio = _tempPanAreaSize.x / item.w;\n          var vRatio = _tempPanAreaSize.y / item.h;\n          item.fitRatio = hRatio < vRatio ? hRatio : vRatio; //item.fillRatio = hRatio > vRatio ? hRatio : vRatio;\n\n          var scaleMode = _options.scaleMode;\n\n          if (scaleMode === 'orig') {\n            zoomLevel = 1;\n          } else if (scaleMode === 'fit') {\n            zoomLevel = item.fitRatio;\n          }\n\n          if (zoomLevel > 1) {\n            zoomLevel = 1;\n          }\n\n          item.initialZoomLevel = zoomLevel;\n\n          if (!item.bounds) {\n            // reuse bounds object\n            item.bounds = _getZeroBounds();\n          }\n        }\n\n        if (!zoomLevel) {\n          return;\n        }\n\n        _calculateSingleItemPanBounds(item, item.w * zoomLevel, item.h * zoomLevel);\n\n        if (isInitial && zoomLevel === item.initialZoomLevel) {\n          item.initialPosition = item.bounds.center;\n        }\n\n        return item.bounds;\n      } else {\n        item.w = item.h = 0;\n        item.initialZoomLevel = item.fitRatio = 1;\n        item.bounds = _getZeroBounds();\n        item.initialPosition = item.bounds.center; // if it's not image, we return zero bounds (content is not zoomable)\n\n        return item.bounds;\n      }\n    },\n        _appendImage = function (index, item, baseDiv, img, preventAnimation, keepPlaceholder) {\n      if (item.loadError) {\n        return;\n      }\n\n      if (img) {\n        item.imageAppended = true;\n\n        _setImageSize(item, img, item === self.currItem && _renderMaxResolution);\n\n        baseDiv.appendChild(img);\n\n        if (keepPlaceholder) {\n          setTimeout(function () {\n            if (item && item.loaded && item.placeholder) {\n              item.placeholder.style.display = 'none';\n              item.placeholder = null;\n            }\n          }, 500);\n        }\n      }\n    },\n        _preloadImage = function (item) {\n      item.loading = true;\n      item.loaded = false;\n      var img = item.img = framework.createEl('pswp__img', 'img');\n\n      var onComplete = function () {\n        item.loading = false;\n        item.loaded = true;\n\n        if (item.loadComplete) {\n          item.loadComplete(item);\n        } else {\n          item.img = null; // no need to store image object\n        }\n\n        img.onload = img.onerror = null;\n        img = null;\n      };\n\n      img.onload = onComplete;\n\n      img.onerror = function () {\n        item.loadError = true;\n        onComplete();\n      };\n\n      img.src = item.src; // + '?a=' + Math.random();\n\n      return img;\n    },\n        _checkForError = function (item, cleanUp) {\n      if (item.src && item.loadError && item.container) {\n        if (cleanUp) {\n          item.container.innerHTML = '';\n        }\n\n        item.container.innerHTML = _options.errorMsg.replace('%url%', item.src);\n        return true;\n      }\n    },\n        _setImageSize = function (item, img, maxRes) {\n      if (!item.src) {\n        return;\n      }\n\n      if (!img) {\n        img = item.container.lastChild;\n      }\n\n      var w = maxRes ? item.w : Math.round(item.w * item.fitRatio),\n          h = maxRes ? item.h : Math.round(item.h * item.fitRatio);\n\n      if (item.placeholder && !item.loaded) {\n        item.placeholder.style.width = w + 'px';\n        item.placeholder.style.height = h + 'px';\n      }\n\n      img.style.width = w + 'px';\n      img.style.height = h + 'px';\n    },\n        _appendImagesPool = function () {\n      if (_imagesToAppendPool.length) {\n        var poolItem;\n\n        for (var i = 0; i < _imagesToAppendPool.length; i++) {\n          poolItem = _imagesToAppendPool[i];\n\n          if (poolItem.holder.index === poolItem.index) {\n            _appendImage(poolItem.index, poolItem.item, poolItem.baseDiv, poolItem.img, false, poolItem.clearPlaceholder);\n          }\n        }\n\n        _imagesToAppendPool = [];\n      }\n    };\n\n    _registerModule('Controller', {\n      publicMethods: {\n        lazyLoadItem: function (index) {\n          index = _getLoopedId(index);\n\n          var item = _getItemAt(index);\n\n          if (!item || (item.loaded || item.loading) && !_itemsNeedUpdate) {\n            return;\n          }\n\n          _shout('gettingData', index, item);\n\n          if (!item.src) {\n            return;\n          }\n\n          _preloadImage(item);\n        },\n        initController: function () {\n          framework.extend(_options, _controllerDefaultOptions, true);\n          self.items = _items = items;\n          _getItemAt = self.getItemAt;\n          _getNumItems = _options.getNumItemsFn; //self.getNumItems;\n\n          _initialIsLoop = _options.loop;\n\n          if (_getNumItems() < 3) {\n            _options.loop = false; // disable loop if less then 3 items\n          }\n\n          _listen('beforeChange', function (diff) {\n            var p = _options.preload,\n                isNext = diff === null ? true : diff >= 0,\n                preloadBefore = Math.min(p[0], _getNumItems()),\n                preloadAfter = Math.min(p[1], _getNumItems()),\n                i;\n\n            for (i = 1; i <= (isNext ? preloadAfter : preloadBefore); i++) {\n              self.lazyLoadItem(_currentItemIndex + i);\n            }\n\n            for (i = 1; i <= (isNext ? preloadBefore : preloadAfter); i++) {\n              self.lazyLoadItem(_currentItemIndex - i);\n            }\n          });\n\n          _listen('initialLayout', function () {\n            self.currItem.initialLayout = _options.getThumbBoundsFn && _options.getThumbBoundsFn(_currentItemIndex);\n          });\n\n          _listen('mainScrollAnimComplete', _appendImagesPool);\n\n          _listen('initialZoomInEnd', _appendImagesPool);\n\n          _listen('destroy', function () {\n            var item;\n\n            for (var i = 0; i < _items.length; i++) {\n              item = _items[i]; // remove reference to DOM elements, for GC\n\n              if (item.container) {\n                item.container = null;\n              }\n\n              if (item.placeholder) {\n                item.placeholder = null;\n              }\n\n              if (item.img) {\n                item.img = null;\n              }\n\n              if (item.preloader) {\n                item.preloader = null;\n              }\n\n              if (item.loadError) {\n                item.loaded = item.loadError = false;\n              }\n            }\n\n            _imagesToAppendPool = null;\n          });\n        },\n        getItemAt: function (index) {\n          if (index >= 0) {\n            return _items[index] !== undefined ? _items[index] : false;\n          }\n\n          return false;\n        },\n        allowProgressiveImg: function () {\n          // 1. Progressive image loading isn't working on webkit/blink \n          //    when hw-acceleration (e.g. translateZ) is applied to IMG element.\n          //    That's why in PhotoSwipe parent element gets zoom transform, not image itself.\n          //    \n          // 2. Progressive image loading sometimes blinks in webkit/blink when applying animation to parent element.\n          //    That's why it's disabled on touch devices (mainly because of swipe transition)\n          //    \n          // 3. Progressive image loading sometimes doesn't work in IE (up to 11).\n          // Don't allow progressive loading on non-large touch devices\n          return _options.forceProgressiveLoading || !_likelyTouchDevice || _options.mouseUsed || screen.width > 1200; // 1200 - to eliminate touch devices with large screen (like Chromebook Pixel)\n        },\n        setContent: function (holder, index) {\n          if (_options.loop) {\n            index = _getLoopedId(index);\n          }\n\n          var prevItem = self.getItemAt(holder.index);\n\n          if (prevItem) {\n            prevItem.container = null;\n          }\n\n          var item = self.getItemAt(index),\n              img;\n\n          if (!item) {\n            holder.el.innerHTML = '';\n            return;\n          } // allow to override data\n\n\n          _shout('gettingData', index, item);\n\n          holder.index = index;\n          holder.item = item; // base container DIV is created only once for each of 3 holders\n\n          var baseDiv = item.container = framework.createEl('pswp__zoom-wrap');\n\n          if (!item.src && item.html) {\n            if (item.html.tagName) {\n              baseDiv.appendChild(item.html);\n            } else {\n              baseDiv.innerHTML = item.html;\n            }\n          }\n\n          _checkForError(item);\n\n          _calculateItemSize(item, _viewportSize);\n\n          if (item.src && !item.loadError && !item.loaded) {\n            item.loadComplete = function (item) {\n              // gallery closed before image finished loading\n              if (!_isOpen) {\n                return;\n              } // check if holder hasn't changed while image was loading\n\n\n              if (holder && holder.index === index) {\n                if (_checkForError(item, true)) {\n                  item.loadComplete = item.img = null;\n\n                  _calculateItemSize(item, _viewportSize);\n\n                  _applyZoomPanToItem(item);\n\n                  if (holder.index === _currentItemIndex) {\n                    // recalculate dimensions\n                    self.updateCurrZoomItem();\n                  }\n\n                  return;\n                }\n\n                if (!item.imageAppended) {\n                  if (_features.transform && (_mainScrollAnimating || _initialZoomRunning)) {\n                    _imagesToAppendPool.push({\n                      item: item,\n                      baseDiv: baseDiv,\n                      img: item.img,\n                      index: index,\n                      holder: holder,\n                      clearPlaceholder: true\n                    });\n                  } else {\n                    _appendImage(index, item, baseDiv, item.img, _mainScrollAnimating || _initialZoomRunning, true);\n                  }\n                } else {\n                  // remove preloader & mini-img\n                  if (!_initialZoomRunning && item.placeholder) {\n                    item.placeholder.style.display = 'none';\n                    item.placeholder = null;\n                  }\n                }\n              }\n\n              item.loadComplete = null;\n              item.img = null; // no need to store image element after it's added\n\n              _shout('imageLoadComplete', index, item);\n            };\n\n            if (framework.features.transform) {\n              var placeholderClassName = 'pswp__img pswp__img--placeholder';\n              placeholderClassName += item.msrc ? '' : ' pswp__img--placeholder--blank';\n              var placeholder = framework.createEl(placeholderClassName, item.msrc ? 'img' : '');\n\n              if (item.msrc) {\n                placeholder.src = item.msrc;\n              }\n\n              _setImageSize(item, placeholder);\n\n              baseDiv.appendChild(placeholder);\n              item.placeholder = placeholder;\n            }\n\n            if (!item.loading) {\n              _preloadImage(item);\n            }\n\n            if (self.allowProgressiveImg()) {\n              // just append image\n              if (!_initialContentSet && _features.transform) {\n                _imagesToAppendPool.push({\n                  item: item,\n                  baseDiv: baseDiv,\n                  img: item.img,\n                  index: index,\n                  holder: holder\n                });\n              } else {\n                _appendImage(index, item, baseDiv, item.img, true, true);\n              }\n            }\n          } else if (item.src && !item.loadError) {\n            // image object is created every time, due to bugs of image loading & delay when switching images\n            img = framework.createEl('pswp__img', 'img');\n            img.style.opacity = 1;\n            img.src = item.src;\n\n            _setImageSize(item, img);\n\n            _appendImage(index, item, baseDiv, img, true);\n          }\n\n          if (!_initialContentSet && index === _currentItemIndex) {\n            _currZoomElementStyle = baseDiv.style;\n\n            _showOrHide(item, img || item.img);\n          } else {\n            _applyZoomPanToItem(item);\n          }\n\n          holder.el.innerHTML = '';\n          holder.el.appendChild(baseDiv);\n        },\n        cleanSlide: function (item) {\n          if (item.img) {\n            item.img.onload = item.img.onerror = null;\n          }\n\n          item.loaded = item.loading = item.img = item.imageAppended = false;\n        }\n      }\n    });\n    /*>>items-controller*/\n\n    /*>>tap*/\n\n    /**\n     * tap.js:\n     *\n     * Displatches tap and double-tap events.\n     * \n     */\n\n\n    var tapTimer,\n        tapReleasePoint = {},\n        _dispatchTapEvent = function (origEvent, releasePoint, pointerType) {\n      var e = document.createEvent('CustomEvent'),\n          eDetail = {\n        origEvent: origEvent,\n        target: origEvent.target,\n        releasePoint: releasePoint,\n        pointerType: pointerType || 'touch'\n      };\n      e.initCustomEvent('pswpTap', true, true, eDetail);\n      origEvent.target.dispatchEvent(e);\n    };\n\n    _registerModule('Tap', {\n      publicMethods: {\n        initTap: function () {\n          _listen('firstTouchStart', self.onTapStart);\n\n          _listen('touchRelease', self.onTapRelease);\n\n          _listen('destroy', function () {\n            tapReleasePoint = {};\n            tapTimer = null;\n          });\n        },\n        onTapStart: function (touchList) {\n          if (touchList.length > 1) {\n            clearTimeout(tapTimer);\n            tapTimer = null;\n          }\n        },\n        onTapRelease: function (e, releasePoint) {\n          if (!releasePoint) {\n            return;\n          }\n\n          if (!_moved && !_isMultitouch && !_numAnimations) {\n            var p0 = releasePoint;\n\n            if (tapTimer) {\n              clearTimeout(tapTimer);\n              tapTimer = null; // Check if taped on the same place\n\n              if (_isNearbyPoints(p0, tapReleasePoint)) {\n                _shout('doubleTap', p0);\n\n                return;\n              }\n            }\n\n            if (releasePoint.type === 'mouse') {\n              _dispatchTapEvent(e, releasePoint, 'mouse');\n\n              return;\n            }\n\n            var clickedTagName = e.target.tagName.toUpperCase(); // avoid double tap delay on buttons and elements that have class pswp__single-tap\n\n            if (clickedTagName === 'BUTTON' || framework.hasClass(e.target, 'pswp__single-tap')) {\n              _dispatchTapEvent(e, releasePoint);\n\n              return;\n            }\n\n            _equalizePoints(tapReleasePoint, p0);\n\n            tapTimer = setTimeout(function () {\n              _dispatchTapEvent(e, releasePoint);\n\n              tapTimer = null;\n            }, 300);\n          }\n        }\n      }\n    });\n    /*>>tap*/\n\n    /*>>desktop-zoom*/\n\n    /**\n     *\n     * desktop-zoom.js:\n     *\n     * - Binds mousewheel event for paning zoomed image.\n     * - Manages \"dragging\", \"zoomed-in\", \"zoom-out\" classes.\n     *   (which are used for cursors and zoom icon)\n     * - Adds toggleDesktopZoom function.\n     * \n     */\n\n\n    var _wheelDelta;\n\n    _registerModule('DesktopZoom', {\n      publicMethods: {\n        initDesktopZoom: function () {\n          if (_oldIE) {\n            // no zoom for old IE (<=8)\n            return;\n          }\n\n          if (_likelyTouchDevice) {\n            // if detected hardware touch support, we wait until mouse is used,\n            // and only then apply desktop-zoom features\n            _listen('mouseUsed', function () {\n              self.setupDesktopZoom();\n            });\n          } else {\n            self.setupDesktopZoom(true);\n          }\n        },\n        setupDesktopZoom: function (onInit) {\n          _wheelDelta = {};\n          var events = 'wheel mousewheel DOMMouseScroll';\n\n          _listen('bindEvents', function () {\n            framework.bind(template, events, self.handleMouseWheel);\n          });\n\n          _listen('unbindEvents', function () {\n            if (_wheelDelta) {\n              framework.unbind(template, events, self.handleMouseWheel);\n            }\n          });\n\n          self.mouseZoomedIn = false;\n\n          var hasDraggingClass,\n              updateZoomable = function () {\n            if (self.mouseZoomedIn) {\n              framework.removeClass(template, 'pswp--zoomed-in');\n              self.mouseZoomedIn = false;\n            }\n\n            if (_currZoomLevel < 1) {\n              framework.addClass(template, 'pswp--zoom-allowed');\n            } else {\n              framework.removeClass(template, 'pswp--zoom-allowed');\n            }\n\n            removeDraggingClass();\n          },\n              removeDraggingClass = function () {\n            if (hasDraggingClass) {\n              framework.removeClass(template, 'pswp--dragging');\n              hasDraggingClass = false;\n            }\n          };\n\n          _listen('resize', updateZoomable);\n\n          _listen('afterChange', updateZoomable);\n\n          _listen('pointerDown', function () {\n            if (self.mouseZoomedIn) {\n              hasDraggingClass = true;\n              framework.addClass(template, 'pswp--dragging');\n            }\n          });\n\n          _listen('pointerUp', removeDraggingClass);\n\n          if (!onInit) {\n            updateZoomable();\n          }\n        },\n        handleMouseWheel: function (e) {\n          if (_currZoomLevel <= self.currItem.fitRatio) {\n            if (_options.modal) {\n              if (!_options.closeOnScroll || _numAnimations || _isDragging) {\n                e.preventDefault();\n              } else if (_transformKey && Math.abs(e.deltaY) > 2) {\n                // close PhotoSwipe\n                // if browser supports transforms & scroll changed enough\n                _closedByScroll = true;\n                self.close();\n              }\n            }\n\n            return true;\n          } // allow just one event to fire\n\n\n          e.stopPropagation(); // https://developer.mozilla.org/en-US/docs/Web/Events/wheel\n\n          _wheelDelta.x = 0;\n\n          if ('deltaX' in e) {\n            if (e.deltaMode === 1\n            /* DOM_DELTA_LINE */\n            ) {\n                // 18 - average line height\n                _wheelDelta.x = e.deltaX * 18;\n                _wheelDelta.y = e.deltaY * 18;\n              } else {\n              _wheelDelta.x = e.deltaX;\n              _wheelDelta.y = e.deltaY;\n            }\n          } else if ('wheelDelta' in e) {\n            if (e.wheelDeltaX) {\n              _wheelDelta.x = -0.16 * e.wheelDeltaX;\n            }\n\n            if (e.wheelDeltaY) {\n              _wheelDelta.y = -0.16 * e.wheelDeltaY;\n            } else {\n              _wheelDelta.y = -0.16 * e.wheelDelta;\n            }\n          } else if ('detail' in e) {\n            _wheelDelta.y = e.detail;\n          } else {\n            return;\n          }\n\n          _calculatePanBounds(_currZoomLevel, true);\n\n          var newPanX = _panOffset.x - _wheelDelta.x,\n              newPanY = _panOffset.y - _wheelDelta.y; // only prevent scrolling in nonmodal mode when not at edges\n\n          if (_options.modal || newPanX <= _currPanBounds.min.x && newPanX >= _currPanBounds.max.x && newPanY <= _currPanBounds.min.y && newPanY >= _currPanBounds.max.y) {\n            e.preventDefault();\n          } // TODO: use rAF instead of mousewheel?\n\n\n          self.panTo(newPanX, newPanY);\n        },\n        toggleDesktopZoom: function (centerPoint) {\n          centerPoint = centerPoint || {\n            x: _viewportSize.x / 2 + _offset.x,\n            y: _viewportSize.y / 2 + _offset.y\n          };\n\n          var doubleTapZoomLevel = _options.getDoubleTapZoom(true, self.currItem);\n\n          var zoomOut = _currZoomLevel === doubleTapZoomLevel;\n          self.mouseZoomedIn = !zoomOut;\n          self.zoomTo(zoomOut ? self.currItem.initialZoomLevel : doubleTapZoomLevel, centerPoint, 333);\n          framework[(!zoomOut ? 'add' : 'remove') + 'Class'](template, 'pswp--zoomed-in');\n        }\n      }\n    });\n    /*>>desktop-zoom*/\n\n    /*>>history*/\n\n    /**\n     *\n     * history.js:\n     *\n     * - Back button to close gallery.\n     * \n     * - Unique URL for each slide: example.com/&pid=1&gid=3\n     *   (where PID is picture index, and GID and gallery index)\n     *   \n     * - Switch URL when slides change.\n     * \n     */\n\n\n    var _historyDefaultOptions = {\n      history: true,\n      galleryUID: 1\n    };\n\n    var _historyUpdateTimeout,\n        _hashChangeTimeout,\n        _hashAnimCheckTimeout,\n        _hashChangedByScript,\n        _hashChangedByHistory,\n        _hashReseted,\n        _initialHash,\n        _historyChanged,\n        _closedFromURL,\n        _urlChangedOnce,\n        _windowLoc,\n        _supportsPushState,\n        _getHash = function () {\n      return _windowLoc.hash.substring(1);\n    },\n        _cleanHistoryTimeouts = function () {\n      if (_historyUpdateTimeout) {\n        clearTimeout(_historyUpdateTimeout);\n      }\n\n      if (_hashAnimCheckTimeout) {\n        clearTimeout(_hashAnimCheckTimeout);\n      }\n    },\n        // pid - Picture index\n    // gid - Gallery index\n    _parseItemIndexFromURL = function () {\n      var hash = _getHash(),\n          params = {};\n\n      if (hash.length < 5) {\n        // pid=1\n        return params;\n      }\n\n      var i,\n          vars = hash.split('&');\n\n      for (i = 0; i < vars.length; i++) {\n        if (!vars[i]) {\n          continue;\n        }\n\n        var pair = vars[i].split('=');\n\n        if (pair.length < 2) {\n          continue;\n        }\n\n        params[pair[0]] = pair[1];\n      }\n\n      if (_options.galleryPIDs) {\n        // detect custom pid in hash and search for it among the items collection\n        var searchfor = params.pid;\n        params.pid = 0; // if custom pid cannot be found, fallback to the first item\n\n        for (i = 0; i < _items.length; i++) {\n          if (_items[i].pid === searchfor) {\n            params.pid = i;\n            break;\n          }\n        }\n      } else {\n        params.pid = parseInt(params.pid, 10) - 1;\n      }\n\n      if (params.pid < 0) {\n        params.pid = 0;\n      }\n\n      return params;\n    },\n        _updateHash = function () {\n      if (_hashAnimCheckTimeout) {\n        clearTimeout(_hashAnimCheckTimeout);\n      }\n\n      if (_numAnimations || _isDragging) {\n        // changing browser URL forces layout/paint in some browsers, which causes noticable lag during animation\n        // that's why we update hash only when no animations running\n        _hashAnimCheckTimeout = setTimeout(_updateHash, 500);\n        return;\n      }\n\n      if (_hashChangedByScript) {\n        clearTimeout(_hashChangeTimeout);\n      } else {\n        _hashChangedByScript = true;\n      }\n\n      var pid = _currentItemIndex + 1;\n\n      var item = _getItemAt(_currentItemIndex);\n\n      if (item.hasOwnProperty('pid')) {\n        // carry forward any custom pid assigned to the item\n        pid = item.pid;\n      }\n\n      var newHash = _initialHash + '&' + 'gid=' + _options.galleryUID + '&' + 'pid=' + pid;\n\n      if (!_historyChanged) {\n        if (_windowLoc.hash.indexOf(newHash) === -1) {\n          _urlChangedOnce = true;\n        } // first time - add new hisory record, then just replace\n\n      }\n\n      var newURL = _windowLoc.href.split('#')[0] + '#' + newHash;\n\n      if (_supportsPushState) {\n        if ('#' + newHash !== window.location.hash) {\n          history[_historyChanged ? 'replaceState' : 'pushState']('', document.title, newURL);\n        }\n      } else {\n        if (_historyChanged) {\n          _windowLoc.replace(newURL);\n        } else {\n          _windowLoc.hash = newHash;\n        }\n      }\n\n      _historyChanged = true;\n      _hashChangeTimeout = setTimeout(function () {\n        _hashChangedByScript = false;\n      }, 60);\n    };\n\n    _registerModule('History', {\n      publicMethods: {\n        initHistory: function () {\n          framework.extend(_options, _historyDefaultOptions, true);\n\n          if (!_options.history) {\n            return;\n          }\n\n          _windowLoc = window.location;\n          _urlChangedOnce = false;\n          _closedFromURL = false;\n          _historyChanged = false;\n          _initialHash = _getHash();\n          _supportsPushState = 'pushState' in history;\n\n          if (_initialHash.indexOf('gid=') > -1) {\n            _initialHash = _initialHash.split('&gid=')[0];\n            _initialHash = _initialHash.split('?gid=')[0];\n          }\n\n          _listen('afterChange', self.updateURL);\n\n          _listen('unbindEvents', function () {\n            framework.unbind(window, 'hashchange', self.onHashChange);\n          });\n\n          var returnToOriginal = function () {\n            _hashReseted = true;\n\n            if (!_closedFromURL) {\n              if (_urlChangedOnce) {\n                history.back();\n              } else {\n                if (_initialHash) {\n                  _windowLoc.hash = _initialHash;\n                } else {\n                  if (_supportsPushState) {\n                    // remove hash from url without refreshing it or scrolling to top\n                    history.pushState('', document.title, _windowLoc.pathname + _windowLoc.search);\n                  } else {\n                    _windowLoc.hash = '';\n                  }\n                }\n              }\n            }\n\n            _cleanHistoryTimeouts();\n          };\n\n          _listen('unbindEvents', function () {\n            if (_closedByScroll) {\n              // if PhotoSwipe is closed by scroll, we go \"back\" before the closing animation starts\n              // this is done to keep the scroll position\n              returnToOriginal();\n            }\n          });\n\n          _listen('destroy', function () {\n            if (!_hashReseted) {\n              returnToOriginal();\n            }\n          });\n\n          _listen('firstUpdate', function () {\n            _currentItemIndex = _parseItemIndexFromURL().pid;\n          });\n\n          var index = _initialHash.indexOf('pid=');\n\n          if (index > -1) {\n            _initialHash = _initialHash.substring(0, index);\n\n            if (_initialHash.slice(-1) === '&') {\n              _initialHash = _initialHash.slice(0, -1);\n            }\n          }\n\n          setTimeout(function () {\n            if (_isOpen) {\n              // hasn't destroyed yet\n              framework.bind(window, 'hashchange', self.onHashChange);\n            }\n          }, 40);\n        },\n        onHashChange: function () {\n          if (_getHash() === _initialHash) {\n            _closedFromURL = true;\n            self.close();\n            return;\n          }\n\n          if (!_hashChangedByScript) {\n            _hashChangedByHistory = true;\n            self.goTo(_parseItemIndexFromURL().pid);\n            _hashChangedByHistory = false;\n          }\n        },\n        updateURL: function () {\n          // Delay the update of URL, to avoid lag during transition, \n          // and to not to trigger actions like \"refresh page sound\" or \"blinking favicon\" to often\n          _cleanHistoryTimeouts();\n\n          if (_hashChangedByHistory) {\n            return;\n          }\n\n          if (!_historyChanged) {\n            _updateHash(); // first time\n\n          } else {\n            _historyUpdateTimeout = setTimeout(_updateHash, 800);\n          }\n        }\n      }\n    });\n    /*>>history*/\n\n\n    framework.extend(self, publicMethods);\n  };\n\n  return PhotoSwipe;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _sass_style_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);\n/* harmony import */ var _sass_style_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_sass_style_scss__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _js_navigation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);\n/* harmony import */ var _js_navigation__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_js_navigation__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _js_skip_link_focus_fix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);\n/* harmony import */ var _js_skip_link_focus_fix__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_js_skip_link_focus_fix__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _js_main__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);\n/* harmony import */ var _js_main__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_js_main__WEBPACK_IMPORTED_MODULE_3__);\n// Theme Sass.\n // Theme JavaScript.\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/YjYzNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtDQUdBOztBQUNBO0FBQ0EiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZW1lIFNhc3MuXG5pbXBvcnQgJy4vc2Fzcy9zdHlsZS5zY3NzJztcblxuLy8gVGhlbWUgSmF2YVNjcmlwdC5cbmltcG9ydCAnLi9qcy9uYXZpZ2F0aW9uJztcbmltcG9ydCAnLi9qcy9za2lwLWxpbmstZm9jdXMtZml4JztcbmltcG9ydCAnLi9qcy9tYWluJzsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n")},function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2Fzcy9zdHlsZS5zY3NzPzM1MDMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n")},function(module,exports){eval("/**\n * File navigation.js.\n *\n * Handles toggling the navigation menu for small screens and enables TAB key\n * navigation support for dropdown menus.\n */\n(function () {\n  var container, button, menu, links, i, len;\n  container = document.getElementById('site-navigation');\n\n  if (!container) {\n    return;\n  }\n\n  button = container.getElementsByTagName('button')[0];\n\n  if ('undefined' === typeof button) {\n    return;\n  }\n\n  menu = container.getElementsByTagName('ul')[0]; // Hide menu toggle button if menu is empty and return early.\n\n  if ('undefined' === typeof menu) {\n    button.style.display = 'none';\n    return;\n  }\n\n  menu.setAttribute('aria-expanded', 'false');\n\n  if (-1 === menu.className.indexOf('nav-menu')) {\n    menu.className += ' nav-menu';\n  }\n\n  button.onclick = function () {\n    if (-1 !== container.className.indexOf('toggled')) {\n      container.className = container.className.replace(' toggled', '');\n      button.setAttribute('aria-expanded', 'false');\n      menu.setAttribute('aria-expanded', 'false');\n    } else {\n      container.className += ' toggled';\n      button.setAttribute('aria-expanded', 'true');\n      menu.setAttribute('aria-expanded', 'true');\n    }\n  }; // Get all the link elements within the menu.\n\n\n  links = menu.getElementsByTagName('a'); // Each time a menu link is focused or blurred, toggle focus.\n\n  for (i = 0, len = links.length; i < len; i++) {\n    links[i].addEventListener('focus', toggleFocus, true);\n    links[i].addEventListener('blur', toggleFocus, true);\n  }\n  /**\n   * Sets or removes .focus class on an element.\n   */\n\n\n  function toggleFocus() {\n    var self = this; // Move up through the ancestors of the current link until we hit .nav-menu.\n\n    while (-1 === self.className.indexOf('nav-menu')) {\n      // On li elements toggle the class .focus.\n      if ('li' === self.tagName.toLowerCase()) {\n        if (-1 !== self.className.indexOf('focus')) {\n          self.className = self.className.replace(' focus', '');\n        } else {\n          self.className += ' focus';\n        }\n      }\n\n      self = self.parentElement;\n    }\n  }\n  /**\n   * Toggles `focus` class to allow submenu access on tablets.\n   */\n\n\n  (function (container) {\n    var touchStartFn,\n        i,\n        parentLink = container.querySelectorAll('.menu-item-has-children > a, .page_item_has_children > a');\n\n    if ('ontouchstart' in window) {\n      touchStartFn = function touchStartFn(e) {\n        var menuItem = this.parentNode,\n            i;\n\n        if (!menuItem.classList.contains('focus')) {\n          e.preventDefault();\n\n          for (i = 0; i < menuItem.parentNode.children.length; ++i) {\n            if (menuItem === menuItem.parentNode.children[i]) {\n              continue;\n            }\n\n            menuItem.parentNode.children[i].classList.remove('focus');\n          }\n\n          menuItem.classList.add('focus');\n        } else {\n          menuItem.classList.remove('focus');\n        }\n      };\n\n      for (i = 0; i < parentLink.length; ++i) {\n        parentLink[i].addEventListener('touchstart', touchStartFn, false);\n      }\n    }\n  })(container);\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n")},function(module,exports){eval("/**\n * File skip-link-focus-fix.js.\n *\n * Helps with accessibility for keyboard only users.\n *\n * Learn more: https://git.io/vWdr2\n */\n(function () {\n  var isIe = /(trident|msie)/i.test(navigator.userAgent);\n\n  if (isIe && document.getElementById && window.addEventListener) {\n    window.addEventListener('hashchange', function () {\n      var id = location.hash.substring(1),\n          element;\n\n      if (!/^[A-z0-9_-]+$/.test(id)) {\n        return;\n      }\n\n      element = document.getElementById(id);\n\n      if (element) {\n        if (!/^(?:a|select|input|button|textarea)$/i.test(element.tagName)) {\n          element.tabIndex = -1;\n        }\n\n        element.focus();\n      }\n    }, false);\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvc2tpcC1saW5rLWZvY3VzLWZpeC5qcz82NmUyIl0sIm5hbWVzIjpbImlzSWUiLCJ0ZXN0IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJpZCIsImxvY2F0aW9uIiwiaGFzaCIsInN1YnN0cmluZyIsImVsZW1lbnQiLCJ0YWdOYW1lIiwidGFiSW5kZXgiLCJmb2N1cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFPQSxDQUFFLFlBQVc7QUFDWixNQUFJQSxJQUFJLEdBQUcsa0JBQWtCQyxJQUFsQixDQUF3QkMsU0FBUyxDQUFDQyxTQUFsQyxDQUFYOztBQUVBLE1BQUtILElBQUksSUFBSUksUUFBUSxDQUFDQyxjQUFqQixJQUFtQ0MsTUFBTSxDQUFDQyxnQkFBL0MsRUFBa0U7QUFDakVELFVBQU0sQ0FBQ0MsZ0JBQVAsQ0FBeUIsWUFBekIsRUFBdUMsWUFBVztBQUNqRCxVQUFJQyxFQUFFLEdBQUdDLFFBQVEsQ0FBQ0MsSUFBVCxDQUFjQyxTQUFkLENBQXlCLENBQXpCLENBQVQ7QUFBQSxVQUNDQyxPQUREOztBQUdBLFVBQUssQ0FBSSxnQkFBZ0JYLElBQWhCLENBQXNCTyxFQUF0QixDQUFULEVBQXdDO0FBQ3ZDO0FBQ0E7O0FBRURJLGFBQU8sR0FBR1IsUUFBUSxDQUFDQyxjQUFULENBQXlCRyxFQUF6QixDQUFWOztBQUVBLFVBQUtJLE9BQUwsRUFBZTtBQUNkLFlBQUssQ0FBSSx3Q0FBd0NYLElBQXhDLENBQThDVyxPQUFPLENBQUNDLE9BQXRELENBQVQsRUFBNkU7QUFDNUVELGlCQUFPLENBQUNFLFFBQVIsR0FBbUIsQ0FBQyxDQUFwQjtBQUNBOztBQUVERixlQUFPLENBQUNHLEtBQVI7QUFDQTtBQUNELEtBakJELEVBaUJHLEtBakJIO0FBa0JBO0FBQ0QsQ0F2QkQiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRmlsZSBza2lwLWxpbmstZm9jdXMtZml4LmpzLlxuICpcbiAqIEhlbHBzIHdpdGggYWNjZXNzaWJpbGl0eSBmb3Iga2V5Ym9hcmQgb25seSB1c2Vycy5cbiAqXG4gKiBMZWFybiBtb3JlOiBodHRwczovL2dpdC5pby92V2RyMlxuICovXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaXNJZSA9IC8odHJpZGVudHxtc2llKS9pLnRlc3QoIG5hdmlnYXRvci51c2VyQWdlbnQgKTtcblxuXHRpZiAoIGlzSWUgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQgJiYgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdoYXNoY2hhbmdlJywgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaWQgPSBsb2NhdGlvbi5oYXNoLnN1YnN0cmluZyggMSApLFxuXHRcdFx0XHRlbGVtZW50O1xuXG5cdFx0XHRpZiAoICEgKCAvXltBLXowLTlfLV0rJC8udGVzdCggaWQgKSApICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0aWYgKCBlbGVtZW50ICkge1xuXHRcdFx0XHRpZiAoICEgKCAvXig/OmF8c2VsZWN0fGlucHV0fGJ1dHRvbnx0ZXh0YXJlYSkkL2kudGVzdCggZWxlbWVudC50YWdOYW1lICkgKSApIHtcblx0XHRcdFx0XHRlbGVtZW50LnRhYkluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRlbGVtZW50LmZvY3VzKCk7XG5cdFx0XHR9XG5cdFx0fSwgZmFsc2UgKTtcblx0fVxufSApKCk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5\n")},function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(PhotoSwipeUI_Default) {var PhotoSwipe = __webpack_require__(1);\n\nvar PhotoSwipeUIDefault = __webpack_require__(7);\n\nvar initPhotoSwipeFromDOM = function initPhotoSwipeFromDOM(gallerySelector) {\n  // parse slide data (url, title, size ...) from DOM elements \n  // (children of gallerySelector)\n  var parseThumbnailElements = function parseThumbnailElements(el) {\n    var thumbElements = el.childNodes,\n        numNodes = thumbElements.length,\n        items = [],\n        figureEl,\n        linkEl,\n        size,\n        item;\n\n    for (var i = 0; i < numNodes; i++) {\n      figureEl = thumbElements[i]; // <figure> element\n      // include only element nodes \n\n      if (figureEl.nodeType !== 1) {\n        continue;\n      }\n\n      linkEl = figureEl.children[0]; // <a> element\n\n      size = linkEl.getAttribute('data-size').split('x'); // create slide object\n\n      item = {\n        src: linkEl.getAttribute('href'),\n        w: parseInt(size[0], 10),\n        h: parseInt(size[1], 10)\n      };\n\n      if (figureEl.children.length > 1) {\n        // <figcaption> content\n        item.title = figureEl.children[1].innerHTML;\n      }\n\n      if (linkEl.children.length > 0) {\n        // <img> thumbnail element, retrieving thumbnail url\n        item.msrc = linkEl.children[0].getAttribute('src');\n      }\n\n      item.el = figureEl; // save link to element for getThumbBoundsFn\n\n      items.push(item);\n    }\n\n    return items;\n  }; // find nearest parent element\n\n\n  var closest = function closest(el, fn) {\n    return el && (fn(el) ? el : closest(el.parentNode, fn));\n  }; // triggers when user clicks on thumbnail\n\n\n  var onThumbnailsClick = function onThumbnailsClick(e) {\n    e = e || window.event;\n    e.preventDefault ? e.preventDefault() : e.returnValue = false;\n    var eTarget = e.target || e.srcElement; // find root element of slide\n\n    var clickedListItem = closest(eTarget, function (el) {\n      return el.tagName && el.tagName.toUpperCase() === 'FIGURE';\n    });\n\n    if (!clickedListItem) {\n      return;\n    } // find index of clicked item by looping through all child nodes\n    // alternatively, you may define index via data- attribute\n\n\n    var clickedGallery = clickedListItem.parentNode,\n        childNodes = clickedListItem.parentNode.childNodes,\n        numChildNodes = childNodes.length,\n        nodeIndex = 0,\n        index;\n\n    for (var i = 0; i < numChildNodes; i++) {\n      if (childNodes[i].nodeType !== 1) {\n        continue;\n      }\n\n      if (childNodes[i] === clickedListItem) {\n        index = nodeIndex;\n        break;\n      }\n\n      nodeIndex++;\n    }\n\n    if (index >= 0) {\n      // open PhotoSwipe if valid index found\n      openPhotoSwipe(index, clickedGallery);\n    }\n\n    return false;\n  }; // parse picture index and gallery index from URL (#&pid=1&gid=2)\n\n\n  var photoswipeParseHash = function photoswipeParseHash() {\n    var hash = window.location.hash.substring(1),\n        params = {};\n\n    if (hash.length < 5) {\n      return params;\n    }\n\n    var vars = hash.split('&');\n\n    for (var i = 0; i < vars.length; i++) {\n      if (!vars[i]) {\n        continue;\n      }\n\n      var pair = vars[i].split('=');\n\n      if (pair.length < 2) {\n        continue;\n      }\n\n      params[pair[0]] = pair[1];\n    }\n\n    if (params.gid) {\n      params.gid = parseInt(params.gid, 10);\n    }\n\n    return params;\n  };\n\n  var openPhotoSwipe = function openPhotoSwipe(index, galleryElement, disableAnimation, fromURL) {\n    var pswpElement = document.querySelectorAll('.pswp')[0],\n        gallery,\n        options,\n        items;\n    items = parseThumbnailElements(galleryElement); // define options (if needed)\n\n    options = {\n      // define gallery index (for URL)\n      galleryUID: galleryElement.getAttribute('data-pswp-uid'),\n      getThumbBoundsFn: function getThumbBoundsFn(index) {\n        // See Options -> getThumbBoundsFn section of documentation for more info\n        var thumbnail = items[index].el.getElementsByTagName('img')[0],\n            // find thumbnail\n        pageYScroll = window.pageYOffset || document.documentElement.scrollTop,\n            rect = thumbnail.getBoundingClientRect();\n        return {\n          x: rect.left,\n          y: rect.top + pageYScroll,\n          w: rect.width\n        };\n      }\n    }; // PhotoSwipe opened from URL\n\n    if (fromURL) {\n      if (options.galleryPIDs) {\n        // parse real index when custom PIDs are used \n        // http://photoswipe.com/documentation/faq.html#custom-pid-in-url\n        for (var j = 0; j < items.length; j++) {\n          if (items[j].pid == index) {\n            options.index = j;\n            break;\n          }\n        }\n      } else {\n        // in URL indexes start from 1\n        options.index = parseInt(index, 10) - 1;\n      }\n    } else {\n      options.index = parseInt(index, 10);\n    } // exit if index not found\n\n\n    if (isNaN(options.index)) {\n      return;\n    }\n\n    if (disableAnimation) {\n      options.showAnimationDuration = 0;\n    } // Pass data to PhotoSwipe and initialize it\n\n\n    gallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, items, options);\n    gallery.init();\n  }; // loop through all gallery elements and bind events\n\n\n  var galleryElements = document.querySelectorAll(gallerySelector);\n\n  for (var i = 0, l = galleryElements.length; i < l; i++) {\n    galleryElements[i].setAttribute('data-pswp-uid', i + 1);\n    galleryElements[i].onclick = onThumbnailsClick;\n  } // Parse URL and open gallery if it contains #&pid=3&gid=1\n\n\n  var hashData = photoswipeParseHash();\n\n  if (hashData.pid && hashData.gid) {\n    openPhotoSwipe(hashData.pid, galleryElements[hashData.gid - 1], true, true);\n  }\n}; // execute above function\n\n\ninitPhotoSwipeFromDOM('.gallery'); // Add button elements to mobile \n\n(function () {\n  var parentLinks = Array.from(document.querySelectorAll('.menu-item-has-children, .page_item_has_children'));\n  var buttonHtml = '<button class=\"sub-menu-toggle js-sub-menu-toggle\" aria-expanded=\"false\"></button>';\n  parentLinks.forEach(function (el) {\n    el.insertAdjacentHTML('afterbegin', buttonHtml);\n  }); // Register click events button\n\n  var button = Array.from(document.querySelectorAll('.js-sub-menu-toggle'));\n  button.forEach(function (el) {\n    el.addEventListener('click', function () {\n      if (this.getAttribute('aria-expanded') === 'false') {\n        this.setAttribute('aria-expanded', 'true');\n        this.parentNode.classList.add('toggled-on');\n      } else {\n        this.setAttribute('aria-expanded', 'false');\n        this.parentNode.classList.remove('toggled-on');\n      }\n    });\n  });\n})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvbWFpbi5qcz85MjkxIl0sIm5hbWVzIjpbIlBob3RvU3dpcGUiLCJyZXF1aXJlIiwiUGhvdG9Td2lwZVVJRGVmYXVsdCIsImluaXRQaG90b1N3aXBlRnJvbURPTSIsImdhbGxlcnlTZWxlY3RvciIsInBhcnNlVGh1bWJuYWlsRWxlbWVudHMiLCJlbCIsInRodW1iRWxlbWVudHMiLCJjaGlsZE5vZGVzIiwibnVtTm9kZXMiLCJsZW5ndGgiLCJpdGVtcyIsImZpZ3VyZUVsIiwibGlua0VsIiwic2l6ZSIsIml0ZW0iLCJpIiwibm9kZVR5cGUiLCJjaGlsZHJlbiIsImdldEF0dHJpYnV0ZSIsInNwbGl0Iiwic3JjIiwidyIsInBhcnNlSW50IiwiaCIsInRpdGxlIiwiaW5uZXJIVE1MIiwibXNyYyIsInB1c2giLCJjbG9zZXN0IiwiZm4iLCJwYXJlbnROb2RlIiwib25UaHVtYm5haWxzQ2xpY2siLCJlIiwid2luZG93IiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInJldHVyblZhbHVlIiwiZVRhcmdldCIsInRhcmdldCIsInNyY0VsZW1lbnQiLCJjbGlja2VkTGlzdEl0ZW0iLCJ0YWdOYW1lIiwidG9VcHBlckNhc2UiLCJjbGlja2VkR2FsbGVyeSIsIm51bUNoaWxkTm9kZXMiLCJub2RlSW5kZXgiLCJpbmRleCIsIm9wZW5QaG90b1N3aXBlIiwicGhvdG9zd2lwZVBhcnNlSGFzaCIsImhhc2giLCJsb2NhdGlvbiIsInN1YnN0cmluZyIsInBhcmFtcyIsInZhcnMiLCJwYWlyIiwiZ2lkIiwiZ2FsbGVyeUVsZW1lbnQiLCJkaXNhYmxlQW5pbWF0aW9uIiwiZnJvbVVSTCIsInBzd3BFbGVtZW50IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZ2FsbGVyeSIsIm9wdGlvbnMiLCJnYWxsZXJ5VUlEIiwiZ2V0VGh1bWJCb3VuZHNGbiIsInRodW1ibmFpbCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicGFnZVlTY3JvbGwiLCJwYWdlWU9mZnNldCIsImRvY3VtZW50RWxlbWVudCIsInNjcm9sbFRvcCIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ4IiwibGVmdCIsInkiLCJ0b3AiLCJ3aWR0aCIsImdhbGxlcnlQSURzIiwiaiIsInBpZCIsImlzTmFOIiwic2hvd0FuaW1hdGlvbkR1cmF0aW9uIiwiUGhvdG9Td2lwZVVJX0RlZmF1bHQiLCJpbml0IiwiZ2FsbGVyeUVsZW1lbnRzIiwibCIsInNldEF0dHJpYnV0ZSIsIm9uY2xpY2siLCJoYXNoRGF0YSIsInBhcmVudExpbmtzIiwiQXJyYXkiLCJmcm9tIiwiYnV0dG9uSHRtbCIsImZvckVhY2giLCJpbnNlcnRBZGphY2VudEhUTUwiLCJidXR0b24iLCJhZGRFdmVudExpc3RlbmVyIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIl0sIm1hcHBpbmdzIjoiQUFBQSxnRUFBSUEsVUFBVSxHQUFHQyxtQkFBTyxDQUFDLENBQUQsQ0FBeEI7O0FBQ0EsSUFBSUMsbUJBQW1CLEdBQUdELG1CQUFPLENBQUMsQ0FBRCxDQUFqQzs7QUFFQSxJQUFJRSxxQkFBcUIsR0FBRyxTQUF4QkEscUJBQXdCLENBQVNDLGVBQVQsRUFBMEI7QUFDbEQ7QUFDQTtBQUNBLE1BQUlDLHNCQUFzQixHQUFHLFNBQXpCQSxzQkFBeUIsQ0FBU0MsRUFBVCxFQUFhO0FBQ3RDLFFBQUlDLGFBQWEsR0FBR0QsRUFBRSxDQUFDRSxVQUF2QjtBQUFBLFFBQ0lDLFFBQVEsR0FBR0YsYUFBYSxDQUFDRyxNQUQ3QjtBQUFBLFFBRUlDLEtBQUssR0FBRyxFQUZaO0FBQUEsUUFHSUMsUUFISjtBQUFBLFFBSUlDLE1BSko7QUFBQSxRQUtJQyxJQUxKO0FBQUEsUUFNSUMsSUFOSjs7QUFRQSxTQUFJLElBQUlDLENBQUMsR0FBRyxDQUFaLEVBQWVBLENBQUMsR0FBR1AsUUFBbkIsRUFBNkJPLENBQUMsRUFBOUIsRUFBa0M7QUFFOUJKLGNBQVEsR0FBR0wsYUFBYSxDQUFDUyxDQUFELENBQXhCLENBRjhCLENBRUQ7QUFFN0I7O0FBQ0EsVUFBR0osUUFBUSxDQUFDSyxRQUFULEtBQXNCLENBQXpCLEVBQTRCO0FBQ3hCO0FBQ0g7O0FBRURKLFlBQU0sR0FBR0QsUUFBUSxDQUFDTSxRQUFULENBQWtCLENBQWxCLENBQVQsQ0FUOEIsQ0FTQzs7QUFFL0JKLFVBQUksR0FBR0QsTUFBTSxDQUFDTSxZQUFQLENBQW9CLFdBQXBCLEVBQWlDQyxLQUFqQyxDQUF1QyxHQUF2QyxDQUFQLENBWDhCLENBYTlCOztBQUNBTCxVQUFJLEdBQUc7QUFDSE0sV0FBRyxFQUFFUixNQUFNLENBQUNNLFlBQVAsQ0FBb0IsTUFBcEIsQ0FERjtBQUVIRyxTQUFDLEVBQUVDLFFBQVEsQ0FBQ1QsSUFBSSxDQUFDLENBQUQsQ0FBTCxFQUFVLEVBQVYsQ0FGUjtBQUdIVSxTQUFDLEVBQUVELFFBQVEsQ0FBQ1QsSUFBSSxDQUFDLENBQUQsQ0FBTCxFQUFVLEVBQVY7QUFIUixPQUFQOztBQU1BLFVBQUdGLFFBQVEsQ0FBQ00sUUFBVCxDQUFrQlIsTUFBbEIsR0FBMkIsQ0FBOUIsRUFBaUM7QUFDN0I7QUFDQUssWUFBSSxDQUFDVSxLQUFMLEdBQWFiLFFBQVEsQ0FBQ00sUUFBVCxDQUFrQixDQUFsQixFQUFxQlEsU0FBbEM7QUFDSDs7QUFFRCxVQUFHYixNQUFNLENBQUNLLFFBQVAsQ0FBZ0JSLE1BQWhCLEdBQXlCLENBQTVCLEVBQStCO0FBQzNCO0FBQ0FLLFlBQUksQ0FBQ1ksSUFBTCxHQUFZZCxNQUFNLENBQUNLLFFBQVAsQ0FBZ0IsQ0FBaEIsRUFBbUJDLFlBQW5CLENBQWdDLEtBQWhDLENBQVo7QUFDSDs7QUFFREosVUFBSSxDQUFDVCxFQUFMLEdBQVVNLFFBQVYsQ0E5QjhCLENBOEJWOztBQUNwQkQsV0FBSyxDQUFDaUIsSUFBTixDQUFXYixJQUFYO0FBQ0g7O0FBQ0QsV0FBT0osS0FBUDtBQUNILEdBM0NELENBSGtELENBZ0RsRDs7O0FBQ0EsTUFBSWtCLE9BQU8sR0FBRyxTQUFTQSxPQUFULENBQWlCdkIsRUFBakIsRUFBcUJ3QixFQUFyQixFQUF5QjtBQUNuQyxXQUFPeEIsRUFBRSxLQUFNd0IsRUFBRSxDQUFDeEIsRUFBRCxDQUFGLEdBQVNBLEVBQVQsR0FBY3VCLE9BQU8sQ0FBQ3ZCLEVBQUUsQ0FBQ3lCLFVBQUosRUFBZ0JELEVBQWhCLENBQTNCLENBQVQ7QUFDSCxHQUZELENBakRrRCxDQXFEbEQ7OztBQUNBLE1BQUlFLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0IsQ0FBU0MsQ0FBVCxFQUFZO0FBQ2hDQSxLQUFDLEdBQUdBLENBQUMsSUFBSUMsTUFBTSxDQUFDQyxLQUFoQjtBQUNBRixLQUFDLENBQUNHLGNBQUYsR0FBbUJILENBQUMsQ0FBQ0csY0FBRixFQUFuQixHQUF3Q0gsQ0FBQyxDQUFDSSxXQUFGLEdBQWdCLEtBQXhEO0FBRUEsUUFBSUMsT0FBTyxHQUFHTCxDQUFDLENBQUNNLE1BQUYsSUFBWU4sQ0FBQyxDQUFDTyxVQUE1QixDQUpnQyxDQU1oQzs7QUFDQSxRQUFJQyxlQUFlLEdBQUdaLE9BQU8sQ0FBQ1MsT0FBRCxFQUFVLFVBQVNoQyxFQUFULEVBQWE7QUFDaEQsYUFBUUEsRUFBRSxDQUFDb0MsT0FBSCxJQUFjcEMsRUFBRSxDQUFDb0MsT0FBSCxDQUFXQyxXQUFYLE9BQTZCLFFBQW5EO0FBQ0gsS0FGNEIsQ0FBN0I7O0FBSUEsUUFBRyxDQUFDRixlQUFKLEVBQXFCO0FBQ2pCO0FBQ0gsS0FiK0IsQ0FlaEM7QUFDQTs7O0FBQ0EsUUFBSUcsY0FBYyxHQUFHSCxlQUFlLENBQUNWLFVBQXJDO0FBQUEsUUFDSXZCLFVBQVUsR0FBR2lDLGVBQWUsQ0FBQ1YsVUFBaEIsQ0FBMkJ2QixVQUQ1QztBQUFBLFFBRUlxQyxhQUFhLEdBQUdyQyxVQUFVLENBQUNFLE1BRi9CO0FBQUEsUUFHSW9DLFNBQVMsR0FBRyxDQUhoQjtBQUFBLFFBSUlDLEtBSko7O0FBTUEsU0FBSyxJQUFJL0IsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRzZCLGFBQXBCLEVBQW1DN0IsQ0FBQyxFQUFwQyxFQUF3QztBQUNwQyxVQUFHUixVQUFVLENBQUNRLENBQUQsQ0FBVixDQUFjQyxRQUFkLEtBQTJCLENBQTlCLEVBQWlDO0FBQzdCO0FBQ0g7O0FBRUQsVUFBR1QsVUFBVSxDQUFDUSxDQUFELENBQVYsS0FBa0J5QixlQUFyQixFQUFzQztBQUNsQ00sYUFBSyxHQUFHRCxTQUFSO0FBQ0E7QUFDSDs7QUFDREEsZUFBUztBQUNaOztBQUlELFFBQUdDLEtBQUssSUFBSSxDQUFaLEVBQWU7QUFDWDtBQUNBQyxvQkFBYyxDQUFFRCxLQUFGLEVBQVNILGNBQVQsQ0FBZDtBQUNIOztBQUNELFdBQU8sS0FBUDtBQUNILEdBMUNELENBdERrRCxDQWtHbEQ7OztBQUNBLE1BQUlLLG1CQUFtQixHQUFHLFNBQXRCQSxtQkFBc0IsR0FBVztBQUNqQyxRQUFJQyxJQUFJLEdBQUdoQixNQUFNLENBQUNpQixRQUFQLENBQWdCRCxJQUFoQixDQUFxQkUsU0FBckIsQ0FBK0IsQ0FBL0IsQ0FBWDtBQUFBLFFBQ0FDLE1BQU0sR0FBRyxFQURUOztBQUdBLFFBQUdILElBQUksQ0FBQ3hDLE1BQUwsR0FBYyxDQUFqQixFQUFvQjtBQUNoQixhQUFPMkMsTUFBUDtBQUNIOztBQUVELFFBQUlDLElBQUksR0FBR0osSUFBSSxDQUFDOUIsS0FBTCxDQUFXLEdBQVgsQ0FBWDs7QUFDQSxTQUFLLElBQUlKLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdzQyxJQUFJLENBQUM1QyxNQUF6QixFQUFpQ00sQ0FBQyxFQUFsQyxFQUFzQztBQUNsQyxVQUFHLENBQUNzQyxJQUFJLENBQUN0QyxDQUFELENBQVIsRUFBYTtBQUNUO0FBQ0g7O0FBQ0QsVUFBSXVDLElBQUksR0FBR0QsSUFBSSxDQUFDdEMsQ0FBRCxDQUFKLENBQVFJLEtBQVIsQ0FBYyxHQUFkLENBQVg7O0FBQ0EsVUFBR21DLElBQUksQ0FBQzdDLE1BQUwsR0FBYyxDQUFqQixFQUFvQjtBQUNoQjtBQUNIOztBQUNEMkMsWUFBTSxDQUFDRSxJQUFJLENBQUMsQ0FBRCxDQUFMLENBQU4sR0FBa0JBLElBQUksQ0FBQyxDQUFELENBQXRCO0FBQ0g7O0FBRUQsUUFBR0YsTUFBTSxDQUFDRyxHQUFWLEVBQWU7QUFDWEgsWUFBTSxDQUFDRyxHQUFQLEdBQWFqQyxRQUFRLENBQUM4QixNQUFNLENBQUNHLEdBQVIsRUFBYSxFQUFiLENBQXJCO0FBQ0g7O0FBRUQsV0FBT0gsTUFBUDtBQUNILEdBekJEOztBQTJCQSxNQUFJTCxjQUFjLEdBQUcsU0FBakJBLGNBQWlCLENBQVNELEtBQVQsRUFBZ0JVLGNBQWhCLEVBQWdDQyxnQkFBaEMsRUFBa0RDLE9BQWxELEVBQTJEO0FBQzVFLFFBQUlDLFdBQVcsR0FBR0MsUUFBUSxDQUFDQyxnQkFBVCxDQUEwQixPQUExQixFQUFtQyxDQUFuQyxDQUFsQjtBQUFBLFFBQ0lDLE9BREo7QUFBQSxRQUVJQyxPQUZKO0FBQUEsUUFHSXJELEtBSEo7QUFLQUEsU0FBSyxHQUFHTixzQkFBc0IsQ0FBQ29ELGNBQUQsQ0FBOUIsQ0FONEUsQ0FRNUU7O0FBQ0FPLFdBQU8sR0FBRztBQUVOO0FBQ0FDLGdCQUFVLEVBQUVSLGNBQWMsQ0FBQ3RDLFlBQWYsQ0FBNEIsZUFBNUIsQ0FITjtBQUtOK0Msc0JBQWdCLEVBQUUsMEJBQVNuQixLQUFULEVBQWdCO0FBQzlCO0FBQ0EsWUFBSW9CLFNBQVMsR0FBR3hELEtBQUssQ0FBQ29DLEtBQUQsQ0FBTCxDQUFhekMsRUFBYixDQUFnQjhELG9CQUFoQixDQUFxQyxLQUFyQyxFQUE0QyxDQUE1QyxDQUFoQjtBQUFBLFlBQWdFO0FBQzVEQyxtQkFBVyxHQUFHbkMsTUFBTSxDQUFDb0MsV0FBUCxJQUFzQlQsUUFBUSxDQUFDVSxlQUFULENBQXlCQyxTQURqRTtBQUFBLFlBRUlDLElBQUksR0FBR04sU0FBUyxDQUFDTyxxQkFBVixFQUZYO0FBSUEsZUFBTztBQUFDQyxXQUFDLEVBQUNGLElBQUksQ0FBQ0csSUFBUjtBQUFjQyxXQUFDLEVBQUNKLElBQUksQ0FBQ0ssR0FBTCxHQUFXVCxXQUEzQjtBQUF3Qy9DLFdBQUMsRUFBQ21ELElBQUksQ0FBQ007QUFBL0MsU0FBUDtBQUNIO0FBWkssS0FBVixDQVQ0RSxDQXlCNUU7O0FBQ0EsUUFBR3BCLE9BQUgsRUFBWTtBQUNSLFVBQUdLLE9BQU8sQ0FBQ2dCLFdBQVgsRUFBd0I7QUFDcEI7QUFDQTtBQUNBLGFBQUksSUFBSUMsQ0FBQyxHQUFHLENBQVosRUFBZUEsQ0FBQyxHQUFHdEUsS0FBSyxDQUFDRCxNQUF6QixFQUFpQ3VFLENBQUMsRUFBbEMsRUFBc0M7QUFDbEMsY0FBR3RFLEtBQUssQ0FBQ3NFLENBQUQsQ0FBTCxDQUFTQyxHQUFULElBQWdCbkMsS0FBbkIsRUFBMEI7QUFDdEJpQixtQkFBTyxDQUFDakIsS0FBUixHQUFnQmtDLENBQWhCO0FBQ0E7QUFDSDtBQUNKO0FBQ0osT0FURCxNQVNPO0FBQ0g7QUFDQWpCLGVBQU8sQ0FBQ2pCLEtBQVIsR0FBZ0J4QixRQUFRLENBQUN3QixLQUFELEVBQVEsRUFBUixDQUFSLEdBQXNCLENBQXRDO0FBQ0g7QUFDSixLQWRELE1BY087QUFDSGlCLGFBQU8sQ0FBQ2pCLEtBQVIsR0FBZ0J4QixRQUFRLENBQUN3QixLQUFELEVBQVEsRUFBUixDQUF4QjtBQUNILEtBMUMyRSxDQTRDNUU7OztBQUNBLFFBQUlvQyxLQUFLLENBQUNuQixPQUFPLENBQUNqQixLQUFULENBQVQsRUFBMkI7QUFDdkI7QUFDSDs7QUFFRCxRQUFHVyxnQkFBSCxFQUFxQjtBQUNqQk0sYUFBTyxDQUFDb0IscUJBQVIsR0FBZ0MsQ0FBaEM7QUFDSCxLQW5EMkUsQ0FxRDVFOzs7QUFDQXJCLFdBQU8sR0FBRyxJQUFJL0QsVUFBSixDQUFnQjRELFdBQWhCLEVBQTZCeUIsb0JBQTdCLEVBQW1EMUUsS0FBbkQsRUFBMERxRCxPQUExRCxDQUFWO0FBQ0FELFdBQU8sQ0FBQ3VCLElBQVI7QUFDSCxHQXhERCxDQTlIa0QsQ0F3TGxEOzs7QUFDQSxNQUFJQyxlQUFlLEdBQUcxQixRQUFRLENBQUNDLGdCQUFULENBQTJCMUQsZUFBM0IsQ0FBdEI7O0FBRUEsT0FBSSxJQUFJWSxDQUFDLEdBQUcsQ0FBUixFQUFXd0UsQ0FBQyxHQUFHRCxlQUFlLENBQUM3RSxNQUFuQyxFQUEyQ00sQ0FBQyxHQUFHd0UsQ0FBL0MsRUFBa0R4RSxDQUFDLEVBQW5ELEVBQXVEO0FBQ25EdUUsbUJBQWUsQ0FBQ3ZFLENBQUQsQ0FBZixDQUFtQnlFLFlBQW5CLENBQWdDLGVBQWhDLEVBQWlEekUsQ0FBQyxHQUFDLENBQW5EO0FBQ0F1RSxtQkFBZSxDQUFDdkUsQ0FBRCxDQUFmLENBQW1CMEUsT0FBbkIsR0FBNkIxRCxpQkFBN0I7QUFDSCxHQTlMaUQsQ0FnTWxEOzs7QUFDQSxNQUFJMkQsUUFBUSxHQUFHMUMsbUJBQW1CLEVBQWxDOztBQUNBLE1BQUcwQyxRQUFRLENBQUNULEdBQVQsSUFBZ0JTLFFBQVEsQ0FBQ25DLEdBQTVCLEVBQWlDO0FBQzdCUixrQkFBYyxDQUFFMkMsUUFBUSxDQUFDVCxHQUFYLEVBQWtCSyxlQUFlLENBQUVJLFFBQVEsQ0FBQ25DLEdBQVQsR0FBZSxDQUFqQixDQUFqQyxFQUF1RCxJQUF2RCxFQUE2RCxJQUE3RCxDQUFkO0FBQ0g7QUFDSixDQXJNRCxDLENBdU1BOzs7QUFDQXJELHFCQUFxQixDQUFDLFVBQUQsQ0FBckIsQyxDQUVBOztBQUNBLENBQUUsWUFBVztBQUNULE1BQUl5RixXQUFXLEdBQUdDLEtBQUssQ0FBQ0MsSUFBTixDQUFXakMsUUFBUSxDQUFDQyxnQkFBVCxDQUEwQixrREFBMUIsQ0FBWCxDQUFsQjtBQUNBLE1BQUlpQyxVQUFVLEdBQUcsb0ZBQWpCO0FBRUFILGFBQVcsQ0FBQ0ksT0FBWixDQUFvQixVQUFTMUYsRUFBVCxFQUFhO0FBQzdCQSxNQUFFLENBQUMyRixrQkFBSCxDQUFzQixZQUF0QixFQUFvQ0YsVUFBcEM7QUFDSCxHQUZELEVBSlMsQ0FTVDs7QUFDQSxNQUFJRyxNQUFNLEdBQUdMLEtBQUssQ0FBQ0MsSUFBTixDQUFXakMsUUFBUSxDQUFDQyxnQkFBVCxDQUEwQixxQkFBMUIsQ0FBWCxDQUFiO0FBRUFvQyxRQUFNLENBQUNGLE9BQVAsQ0FBZSxVQUFTMUYsRUFBVCxFQUFhO0FBQ3hCQSxNQUFFLENBQUM2RixnQkFBSCxDQUFvQixPQUFwQixFQUE2QixZQUFXO0FBQ3BDLFVBQUcsS0FBS2hGLFlBQUwsQ0FBa0IsZUFBbEIsTUFBdUMsT0FBMUMsRUFBbUQ7QUFDL0MsYUFBS3NFLFlBQUwsQ0FBa0IsZUFBbEIsRUFBbUMsTUFBbkM7QUFDQSxhQUFLMUQsVUFBTCxDQUFnQnFFLFNBQWhCLENBQTBCQyxHQUExQixDQUE4QixZQUE5QjtBQUNILE9BSEQsTUFHTztBQUNILGFBQUtaLFlBQUwsQ0FBa0IsZUFBbEIsRUFBbUMsT0FBbkM7QUFDQSxhQUFLMUQsVUFBTCxDQUFnQnFFLFNBQWhCLENBQTBCRSxNQUExQixDQUFpQyxZQUFqQztBQUNIO0FBQ0osS0FSRDtBQVNILEdBVkQ7QUFZSCxDQXhCRCxJIiwiZmlsZSI6IjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgUGhvdG9Td2lwZSA9IHJlcXVpcmUoJ3Bob3Rvc3dpcGUnKTtcbnZhciBQaG90b1N3aXBlVUlEZWZhdWx0ID0gcmVxdWlyZSgncGhvdG9zd2lwZS9kaXN0L3Bob3Rvc3dpcGUtdWktZGVmYXVsdCcpO1xuXG52YXIgaW5pdFBob3RvU3dpcGVGcm9tRE9NID0gZnVuY3Rpb24oZ2FsbGVyeVNlbGVjdG9yKSB7XG4gICAgLy8gcGFyc2Ugc2xpZGUgZGF0YSAodXJsLCB0aXRsZSwgc2l6ZSAuLi4pIGZyb20gRE9NIGVsZW1lbnRzIFxuICAgIC8vIChjaGlsZHJlbiBvZiBnYWxsZXJ5U2VsZWN0b3IpXG4gICAgdmFyIHBhcnNlVGh1bWJuYWlsRWxlbWVudHMgPSBmdW5jdGlvbihlbCkge1xuICAgICAgICB2YXIgdGh1bWJFbGVtZW50cyA9IGVsLmNoaWxkTm9kZXMsXG4gICAgICAgICAgICBudW1Ob2RlcyA9IHRodW1iRWxlbWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgaXRlbXMgPSBbXSxcbiAgICAgICAgICAgIGZpZ3VyZUVsLFxuICAgICAgICAgICAgbGlua0VsLFxuICAgICAgICAgICAgc2l6ZSxcbiAgICAgICAgICAgIGl0ZW07XG5cbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IG51bU5vZGVzOyBpKyspIHtcblxuICAgICAgICAgICAgZmlndXJlRWwgPSB0aHVtYkVsZW1lbnRzW2ldOyAvLyA8ZmlndXJlPiBlbGVtZW50XG5cbiAgICAgICAgICAgIC8vIGluY2x1ZGUgb25seSBlbGVtZW50IG5vZGVzIFxuICAgICAgICAgICAgaWYoZmlndXJlRWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGlua0VsID0gZmlndXJlRWwuY2hpbGRyZW5bMF07IC8vIDxhPiBlbGVtZW50XG5cbiAgICAgICAgICAgIHNpemUgPSBsaW5rRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXNpemUnKS5zcGxpdCgneCcpO1xuXG4gICAgICAgICAgICAvLyBjcmVhdGUgc2xpZGUgb2JqZWN0XG4gICAgICAgICAgICBpdGVtID0ge1xuICAgICAgICAgICAgICAgIHNyYzogbGlua0VsLmdldEF0dHJpYnV0ZSgnaHJlZicpLFxuICAgICAgICAgICAgICAgIHc6IHBhcnNlSW50KHNpemVbMF0sIDEwKSxcbiAgICAgICAgICAgICAgICBoOiBwYXJzZUludChzaXplWzFdLCAxMClcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmKGZpZ3VyZUVsLmNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAvLyA8ZmlnY2FwdGlvbj4gY29udGVudFxuICAgICAgICAgICAgICAgIGl0ZW0udGl0bGUgPSBmaWd1cmVFbC5jaGlsZHJlblsxXS5pbm5lckhUTUw7IFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihsaW5rRWwuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIDxpbWc+IHRodW1ibmFpbCBlbGVtZW50LCByZXRyaWV2aW5nIHRodW1ibmFpbCB1cmxcbiAgICAgICAgICAgICAgICBpdGVtLm1zcmMgPSBsaW5rRWwuY2hpbGRyZW5bMF0uZ2V0QXR0cmlidXRlKCdzcmMnKTtcbiAgICAgICAgICAgIH0gXG5cbiAgICAgICAgICAgIGl0ZW0uZWwgPSBmaWd1cmVFbDsgLy8gc2F2ZSBsaW5rIHRvIGVsZW1lbnQgZm9yIGdldFRodW1iQm91bmRzRm5cbiAgICAgICAgICAgIGl0ZW1zLnB1c2goaXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgIH07XG5cbiAgICAvLyBmaW5kIG5lYXJlc3QgcGFyZW50IGVsZW1lbnRcbiAgICB2YXIgY2xvc2VzdCA9IGZ1bmN0aW9uIGNsb3Nlc3QoZWwsIGZuKSB7XG4gICAgICAgIHJldHVybiBlbCAmJiAoIGZuKGVsKSA/IGVsIDogY2xvc2VzdChlbC5wYXJlbnROb2RlLCBmbikgKTtcbiAgICB9O1xuXG4gICAgLy8gdHJpZ2dlcnMgd2hlbiB1c2VyIGNsaWNrcyBvbiB0aHVtYm5haWxcbiAgICB2YXIgb25UaHVtYm5haWxzQ2xpY2sgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCA/IGUucHJldmVudERlZmF1bHQoKSA6IGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcblxuICAgICAgICB2YXIgZVRhcmdldCA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudDtcblxuICAgICAgICAvLyBmaW5kIHJvb3QgZWxlbWVudCBvZiBzbGlkZVxuICAgICAgICB2YXIgY2xpY2tlZExpc3RJdGVtID0gY2xvc2VzdChlVGFyZ2V0LCBmdW5jdGlvbihlbCkge1xuICAgICAgICAgICAgcmV0dXJuIChlbC50YWdOYW1lICYmIGVsLnRhZ05hbWUudG9VcHBlckNhc2UoKSA9PT0gJ0ZJR1VSRScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZighY2xpY2tlZExpc3RJdGVtKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmaW5kIGluZGV4IG9mIGNsaWNrZWQgaXRlbSBieSBsb29waW5nIHRocm91Z2ggYWxsIGNoaWxkIG5vZGVzXG4gICAgICAgIC8vIGFsdGVybmF0aXZlbHksIHlvdSBtYXkgZGVmaW5lIGluZGV4IHZpYSBkYXRhLSBhdHRyaWJ1dGVcbiAgICAgICAgdmFyIGNsaWNrZWRHYWxsZXJ5ID0gY2xpY2tlZExpc3RJdGVtLnBhcmVudE5vZGUsXG4gICAgICAgICAgICBjaGlsZE5vZGVzID0gY2xpY2tlZExpc3RJdGVtLnBhcmVudE5vZGUuY2hpbGROb2RlcyxcbiAgICAgICAgICAgIG51bUNoaWxkTm9kZXMgPSBjaGlsZE5vZGVzLmxlbmd0aCxcbiAgICAgICAgICAgIG5vZGVJbmRleCA9IDAsXG4gICAgICAgICAgICBpbmRleDtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bUNoaWxkTm9kZXM7IGkrKykge1xuICAgICAgICAgICAgaWYoY2hpbGROb2Rlc1tpXS5ub2RlVHlwZSAhPT0gMSkgeyBcbiAgICAgICAgICAgICAgICBjb250aW51ZTsgXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKGNoaWxkTm9kZXNbaV0gPT09IGNsaWNrZWRMaXN0SXRlbSkge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gbm9kZUluZGV4O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbm9kZUluZGV4Kys7XG4gICAgICAgIH1cblxuXG5cbiAgICAgICAgaWYoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgLy8gb3BlbiBQaG90b1N3aXBlIGlmIHZhbGlkIGluZGV4IGZvdW5kXG4gICAgICAgICAgICBvcGVuUGhvdG9Td2lwZSggaW5kZXgsIGNsaWNrZWRHYWxsZXJ5ICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICAvLyBwYXJzZSBwaWN0dXJlIGluZGV4IGFuZCBnYWxsZXJ5IGluZGV4IGZyb20gVVJMICgjJnBpZD0xJmdpZD0yKVxuICAgIHZhciBwaG90b3N3aXBlUGFyc2VIYXNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKDEpLFxuICAgICAgICBwYXJhbXMgPSB7fTtcblxuICAgICAgICBpZihoYXNoLmxlbmd0aCA8IDUpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJhbXM7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdmFycyA9IGhhc2guc3BsaXQoJyYnKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZighdmFyc1tpXSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHBhaXIgPSB2YXJzW2ldLnNwbGl0KCc9Jyk7ICBcbiAgICAgICAgICAgIGlmKHBhaXIubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfSAgICAgICAgICAgXG4gICAgICAgICAgICBwYXJhbXNbcGFpclswXV0gPSBwYWlyWzFdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYocGFyYW1zLmdpZCkge1xuICAgICAgICAgICAgcGFyYW1zLmdpZCA9IHBhcnNlSW50KHBhcmFtcy5naWQsIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXJhbXM7XG4gICAgfTtcblxuICAgIHZhciBvcGVuUGhvdG9Td2lwZSA9IGZ1bmN0aW9uKGluZGV4LCBnYWxsZXJ5RWxlbWVudCwgZGlzYWJsZUFuaW1hdGlvbiwgZnJvbVVSTCkge1xuICAgICAgICB2YXIgcHN3cEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucHN3cCcpWzBdLFxuICAgICAgICAgICAgZ2FsbGVyeSxcbiAgICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICAgICBpdGVtcztcblxuICAgICAgICBpdGVtcyA9IHBhcnNlVGh1bWJuYWlsRWxlbWVudHMoZ2FsbGVyeUVsZW1lbnQpO1xuXG4gICAgICAgIC8vIGRlZmluZSBvcHRpb25zIChpZiBuZWVkZWQpXG4gICAgICAgIG9wdGlvbnMgPSB7XG5cbiAgICAgICAgICAgIC8vIGRlZmluZSBnYWxsZXJ5IGluZGV4IChmb3IgVVJMKVxuICAgICAgICAgICAgZ2FsbGVyeVVJRDogZ2FsbGVyeUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXBzd3AtdWlkJyksXG5cbiAgICAgICAgICAgIGdldFRodW1iQm91bmRzRm46IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgLy8gU2VlIE9wdGlvbnMgLT4gZ2V0VGh1bWJCb3VuZHNGbiBzZWN0aW9uIG9mIGRvY3VtZW50YXRpb24gZm9yIG1vcmUgaW5mb1xuICAgICAgICAgICAgICAgIHZhciB0aHVtYm5haWwgPSBpdGVtc1tpbmRleF0uZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2ltZycpWzBdLCAvLyBmaW5kIHRodW1ibmFpbFxuICAgICAgICAgICAgICAgICAgICBwYWdlWVNjcm9sbCA9IHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wLFxuICAgICAgICAgICAgICAgICAgICByZWN0ID0gdGh1bWJuYWlsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOyBcblxuICAgICAgICAgICAgICAgIHJldHVybiB7eDpyZWN0LmxlZnQsIHk6cmVjdC50b3AgKyBwYWdlWVNjcm9sbCwgdzpyZWN0LndpZHRofTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFBob3RvU3dpcGUgb3BlbmVkIGZyb20gVVJMXG4gICAgICAgIGlmKGZyb21VUkwpIHtcbiAgICAgICAgICAgIGlmKG9wdGlvbnMuZ2FsbGVyeVBJRHMpIHtcbiAgICAgICAgICAgICAgICAvLyBwYXJzZSByZWFsIGluZGV4IHdoZW4gY3VzdG9tIFBJRHMgYXJlIHVzZWQgXG4gICAgICAgICAgICAgICAgLy8gaHR0cDovL3Bob3Rvc3dpcGUuY29tL2RvY3VtZW50YXRpb24vZmFxLmh0bWwjY3VzdG9tLXBpZC1pbi11cmxcbiAgICAgICAgICAgICAgICBmb3IodmFyIGogPSAwOyBqIDwgaXRlbXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYoaXRlbXNbal0ucGlkID09IGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmluZGV4ID0gajtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBpbiBVUkwgaW5kZXhlcyBzdGFydCBmcm9tIDFcbiAgICAgICAgICAgICAgICBvcHRpb25zLmluZGV4ID0gcGFyc2VJbnQoaW5kZXgsIDEwKSAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcHRpb25zLmluZGV4ID0gcGFyc2VJbnQoaW5kZXgsIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGV4aXQgaWYgaW5kZXggbm90IGZvdW5kXG4gICAgICAgIGlmKCBpc05hTihvcHRpb25zLmluZGV4KSApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGRpc2FibGVBbmltYXRpb24pIHtcbiAgICAgICAgICAgIG9wdGlvbnMuc2hvd0FuaW1hdGlvbkR1cmF0aW9uID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFBhc3MgZGF0YSB0byBQaG90b1N3aXBlIGFuZCBpbml0aWFsaXplIGl0XG4gICAgICAgIGdhbGxlcnkgPSBuZXcgUGhvdG9Td2lwZSggcHN3cEVsZW1lbnQsIFBob3RvU3dpcGVVSV9EZWZhdWx0LCBpdGVtcywgb3B0aW9ucyk7XG4gICAgICAgIGdhbGxlcnkuaW5pdCgpO1xuICAgIH07XG5cbiAgICAvLyBsb29wIHRocm91Z2ggYWxsIGdhbGxlcnkgZWxlbWVudHMgYW5kIGJpbmQgZXZlbnRzXG4gICAgdmFyIGdhbGxlcnlFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIGdhbGxlcnlTZWxlY3RvciApO1xuXG4gICAgZm9yKHZhciBpID0gMCwgbCA9IGdhbGxlcnlFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgZ2FsbGVyeUVsZW1lbnRzW2ldLnNldEF0dHJpYnV0ZSgnZGF0YS1wc3dwLXVpZCcsIGkrMSk7XG4gICAgICAgIGdhbGxlcnlFbGVtZW50c1tpXS5vbmNsaWNrID0gb25UaHVtYm5haWxzQ2xpY2s7XG4gICAgfVxuXG4gICAgLy8gUGFyc2UgVVJMIGFuZCBvcGVuIGdhbGxlcnkgaWYgaXQgY29udGFpbnMgIyZwaWQ9MyZnaWQ9MVxuICAgIHZhciBoYXNoRGF0YSA9IHBob3Rvc3dpcGVQYXJzZUhhc2goKTtcbiAgICBpZihoYXNoRGF0YS5waWQgJiYgaGFzaERhdGEuZ2lkKSB7XG4gICAgICAgIG9wZW5QaG90b1N3aXBlKCBoYXNoRGF0YS5waWQgLCAgZ2FsbGVyeUVsZW1lbnRzWyBoYXNoRGF0YS5naWQgLSAxIF0sIHRydWUsIHRydWUgKTtcbiAgICB9XG59O1xuXG4vLyBleGVjdXRlIGFib3ZlIGZ1bmN0aW9uXG5pbml0UGhvdG9Td2lwZUZyb21ET00oJy5nYWxsZXJ5Jyk7XG5cbi8vIEFkZCBidXR0b24gZWxlbWVudHMgdG8gbW9iaWxlIFxuKCBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGFyZW50TGlua3MgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tZW51LWl0ZW0taGFzLWNoaWxkcmVuLCAucGFnZV9pdGVtX2hhc19jaGlsZHJlbicpKTtcbiAgICB2YXIgYnV0dG9uSHRtbCA9ICc8YnV0dG9uIGNsYXNzPVwic3ViLW1lbnUtdG9nZ2xlIGpzLXN1Yi1tZW51LXRvZ2dsZVwiIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiPjwvYnV0dG9uPic7XG4gICAgXG4gICAgcGFyZW50TGlua3MuZm9yRWFjaChmdW5jdGlvbihlbCkge1xuICAgICAgICBlbC5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyYmVnaW4nLCBidXR0b25IdG1sKTtcbiAgICB9KTtcbiAgICBcblxuICAgIC8vIFJlZ2lzdGVyIGNsaWNrIGV2ZW50cyBidXR0b25cbiAgICB2YXIgYnV0dG9uID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuanMtc3ViLW1lbnUtdG9nZ2xlJykpO1xuXG4gICAgYnV0dG9uLmZvckVhY2goZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmKHRoaXMuZ2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJykgPT09ICdmYWxzZScpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ3RvZ2dsZWQtb24nKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgndG9nZ2xlZC1vbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcblxufSApKCk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n")},function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! PhotoSwipe Default UI - 4.1.3 - 2019-01-08\n* http://photoswipe.com\n* Copyright (c) 2019 Dmitry Semenov; */\n\n/**\n*\n* UI on top of main sliding area (caption, arrows, close button, etc.).\n* Built just using public methods/properties of PhotoSwipe.\n* \n*/\n(function (root, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(this, function () {\n  'use strict';\n\n  var PhotoSwipeUI_Default = function (pswp, framework) {\n    var ui = this;\n\n    var _overlayUIUpdated = false,\n        _controlsVisible = true,\n        _fullscrenAPI,\n        _controls,\n        _captionContainer,\n        _fakeCaptionContainer,\n        _indexIndicator,\n        _shareButton,\n        _shareModal,\n        _shareModalHidden = true,\n        _initalCloseOnScrollValue,\n        _isIdle,\n        _listen,\n        _loadingIndicator,\n        _loadingIndicatorHidden,\n        _loadingIndicatorTimeout,\n        _galleryHasOneSlide,\n        _options,\n        _defaultUIOptions = {\n      barsSize: {\n        top: 44,\n        bottom: 'auto'\n      },\n      closeElClasses: ['item', 'caption', 'zoom-wrap', 'ui', 'top-bar'],\n      timeToIdle: 4000,\n      timeToIdleOutside: 1000,\n      loadingIndicatorDelay: 1000,\n      // 2s\n      addCaptionHTMLFn: function (item, captionEl\n      /*, isFake */\n      ) {\n        if (!item.title) {\n          captionEl.children[0].innerHTML = '';\n          return false;\n        }\n\n        captionEl.children[0].innerHTML = item.title;\n        return true;\n      },\n      closeEl: true,\n      captionEl: true,\n      fullscreenEl: true,\n      zoomEl: true,\n      shareEl: true,\n      counterEl: true,\n      arrowEl: true,\n      preloaderEl: true,\n      tapToClose: false,\n      tapToToggleControls: true,\n      clickToCloseNonZoomable: true,\n      shareButtons: [{\n        id: 'facebook',\n        label: 'Share on Facebook',\n        url: 'https://www.facebook.com/sharer/sharer.php?u={{url}}'\n      }, {\n        id: 'twitter',\n        label: 'Tweet',\n        url: 'https://twitter.com/intent/tweet?text={{text}}&url={{url}}'\n      }, {\n        id: 'pinterest',\n        label: 'Pin it',\n        url: 'http://www.pinterest.com/pin/create/button/' + '?url={{url}}&media={{image_url}}&description={{text}}'\n      }, {\n        id: 'download',\n        label: 'Download image',\n        url: '{{raw_image_url}}',\n        download: true\n      }],\n      getImageURLForShare: function ()\n      /* shareButtonData */\n      {\n        return pswp.currItem.src || '';\n      },\n      getPageURLForShare: function ()\n      /* shareButtonData */\n      {\n        return window.location.href;\n      },\n      getTextForShare: function ()\n      /* shareButtonData */\n      {\n        return pswp.currItem.title || '';\n      },\n      indexIndicatorSep: ' / ',\n      fitControlsWidth: 1200\n    },\n        _blockControlsTap,\n        _blockControlsTapTimeout;\n\n    var _onControlsTap = function (e) {\n      if (_blockControlsTap) {\n        return true;\n      }\n\n      e = e || window.event;\n\n      if (_options.timeToIdle && _options.mouseUsed && !_isIdle) {\n        // reset idle timer\n        _onIdleMouseMove();\n      }\n\n      var target = e.target || e.srcElement,\n          uiElement,\n          clickedClass = target.getAttribute('class') || '',\n          found;\n\n      for (var i = 0; i < _uiElements.length; i++) {\n        uiElement = _uiElements[i];\n\n        if (uiElement.onTap && clickedClass.indexOf('pswp__' + uiElement.name) > -1) {\n          uiElement.onTap();\n          found = true;\n        }\n      }\n\n      if (found) {\n        if (e.stopPropagation) {\n          e.stopPropagation();\n        }\n\n        _blockControlsTap = true; // Some versions of Android don't prevent ghost click event \n        // when preventDefault() was called on touchstart and/or touchend.\n        // \n        // This happens on v4.3, 4.2, 4.1, \n        // older versions strangely work correctly, \n        // but just in case we add delay on all of them)\t\n\n        var tapDelay = framework.features.isOldAndroid ? 600 : 30;\n        _blockControlsTapTimeout = setTimeout(function () {\n          _blockControlsTap = false;\n        }, tapDelay);\n      }\n    },\n        _fitControlsInViewport = function () {\n      return !pswp.likelyTouchDevice || _options.mouseUsed || screen.width > _options.fitControlsWidth;\n    },\n        _togglePswpClass = function (el, cName, add) {\n      framework[(add ? 'add' : 'remove') + 'Class'](el, 'pswp__' + cName);\n    },\n        // add class when there is just one item in the gallery\n    // (by default it hides left/right arrows and 1ofX counter)\n    _countNumItems = function () {\n      var hasOneSlide = _options.getNumItemsFn() === 1;\n\n      if (hasOneSlide !== _galleryHasOneSlide) {\n        _togglePswpClass(_controls, 'ui--one-slide', hasOneSlide);\n\n        _galleryHasOneSlide = hasOneSlide;\n      }\n    },\n        _toggleShareModalClass = function () {\n      _togglePswpClass(_shareModal, 'share-modal--hidden', _shareModalHidden);\n    },\n        _toggleShareModal = function () {\n      _shareModalHidden = !_shareModalHidden;\n\n      if (!_shareModalHidden) {\n        _toggleShareModalClass();\n\n        setTimeout(function () {\n          if (!_shareModalHidden) {\n            framework.addClass(_shareModal, 'pswp__share-modal--fade-in');\n          }\n        }, 30);\n      } else {\n        framework.removeClass(_shareModal, 'pswp__share-modal--fade-in');\n        setTimeout(function () {\n          if (_shareModalHidden) {\n            _toggleShareModalClass();\n          }\n        }, 300);\n      }\n\n      if (!_shareModalHidden) {\n        _updateShareURLs();\n      }\n\n      return false;\n    },\n        _openWindowPopup = function (e) {\n      e = e || window.event;\n      var target = e.target || e.srcElement;\n      pswp.shout('shareLinkClick', e, target);\n\n      if (!target.href) {\n        return false;\n      }\n\n      if (target.hasAttribute('download')) {\n        return true;\n      }\n\n      window.open(target.href, 'pswp_share', 'scrollbars=yes,resizable=yes,toolbar=no,' + 'location=yes,width=550,height=420,top=100,left=' + (window.screen ? Math.round(screen.width / 2 - 275) : 100));\n\n      if (!_shareModalHidden) {\n        _toggleShareModal();\n      }\n\n      return false;\n    },\n        _updateShareURLs = function () {\n      var shareButtonOut = '',\n          shareButtonData,\n          shareURL,\n          image_url,\n          page_url,\n          share_text;\n\n      for (var i = 0; i < _options.shareButtons.length; i++) {\n        shareButtonData = _options.shareButtons[i];\n        image_url = _options.getImageURLForShare(shareButtonData);\n        page_url = _options.getPageURLForShare(shareButtonData);\n        share_text = _options.getTextForShare(shareButtonData);\n        shareURL = shareButtonData.url.replace('{{url}}', encodeURIComponent(page_url)).replace('{{image_url}}', encodeURIComponent(image_url)).replace('{{raw_image_url}}', image_url).replace('{{text}}', encodeURIComponent(share_text));\n        shareButtonOut += '<a href=\"' + shareURL + '\" target=\"_blank\" ' + 'class=\"pswp__share--' + shareButtonData.id + '\"' + (shareButtonData.download ? 'download' : '') + '>' + shareButtonData.label + '</a>';\n\n        if (_options.parseShareButtonOut) {\n          shareButtonOut = _options.parseShareButtonOut(shareButtonData, shareButtonOut);\n        }\n      }\n\n      _shareModal.children[0].innerHTML = shareButtonOut;\n      _shareModal.children[0].onclick = _openWindowPopup;\n    },\n        _hasCloseClass = function (target) {\n      for (var i = 0; i < _options.closeElClasses.length; i++) {\n        if (framework.hasClass(target, 'pswp__' + _options.closeElClasses[i])) {\n          return true;\n        }\n      }\n    },\n        _idleInterval,\n        _idleTimer,\n        _idleIncrement = 0,\n        _onIdleMouseMove = function () {\n      clearTimeout(_idleTimer);\n      _idleIncrement = 0;\n\n      if (_isIdle) {\n        ui.setIdle(false);\n      }\n    },\n        _onMouseLeaveWindow = function (e) {\n      e = e ? e : window.event;\n      var from = e.relatedTarget || e.toElement;\n\n      if (!from || from.nodeName === 'HTML') {\n        clearTimeout(_idleTimer);\n        _idleTimer = setTimeout(function () {\n          ui.setIdle(true);\n        }, _options.timeToIdleOutside);\n      }\n    },\n        _setupFullscreenAPI = function () {\n      if (_options.fullscreenEl && !framework.features.isOldAndroid) {\n        if (!_fullscrenAPI) {\n          _fullscrenAPI = ui.getFullscreenAPI();\n        }\n\n        if (_fullscrenAPI) {\n          framework.bind(document, _fullscrenAPI.eventK, ui.updateFullscreen);\n          ui.updateFullscreen();\n          framework.addClass(pswp.template, 'pswp--supports-fs');\n        } else {\n          framework.removeClass(pswp.template, 'pswp--supports-fs');\n        }\n      }\n    },\n        _setupLoadingIndicator = function () {\n      // Setup loading indicator\n      if (_options.preloaderEl) {\n        _toggleLoadingIndicator(true);\n\n        _listen('beforeChange', function () {\n          clearTimeout(_loadingIndicatorTimeout); // display loading indicator with delay\n\n          _loadingIndicatorTimeout = setTimeout(function () {\n            if (pswp.currItem && pswp.currItem.loading) {\n              if (!pswp.allowProgressiveImg() || pswp.currItem.img && !pswp.currItem.img.naturalWidth) {\n                // show preloader if progressive loading is not enabled, \n                // or image width is not defined yet (because of slow connection)\n                _toggleLoadingIndicator(false); // items-controller.js function allowProgressiveImg\n\n              }\n            } else {\n              _toggleLoadingIndicator(true); // hide preloader\n\n            }\n          }, _options.loadingIndicatorDelay);\n        });\n\n        _listen('imageLoadComplete', function (index, item) {\n          if (pswp.currItem === item) {\n            _toggleLoadingIndicator(true);\n          }\n        });\n      }\n    },\n        _toggleLoadingIndicator = function (hide) {\n      if (_loadingIndicatorHidden !== hide) {\n        _togglePswpClass(_loadingIndicator, 'preloader--active', !hide);\n\n        _loadingIndicatorHidden = hide;\n      }\n    },\n        _applyNavBarGaps = function (item) {\n      var gap = item.vGap;\n\n      if (_fitControlsInViewport()) {\n        var bars = _options.barsSize;\n\n        if (_options.captionEl && bars.bottom === 'auto') {\n          if (!_fakeCaptionContainer) {\n            _fakeCaptionContainer = framework.createEl('pswp__caption pswp__caption--fake');\n\n            _fakeCaptionContainer.appendChild(framework.createEl('pswp__caption__center'));\n\n            _controls.insertBefore(_fakeCaptionContainer, _captionContainer);\n\n            framework.addClass(_controls, 'pswp__ui--fit');\n          }\n\n          if (_options.addCaptionHTMLFn(item, _fakeCaptionContainer, true)) {\n            var captionSize = _fakeCaptionContainer.clientHeight;\n            gap.bottom = parseInt(captionSize, 10) || 44;\n          } else {\n            gap.bottom = bars.top; // if no caption, set size of bottom gap to size of top\n          }\n        } else {\n          gap.bottom = bars.bottom === 'auto' ? 0 : bars.bottom;\n        } // height of top bar is static, no need to calculate it\n\n\n        gap.top = bars.top;\n      } else {\n        gap.top = gap.bottom = 0;\n      }\n    },\n        _setupIdle = function () {\n      // Hide controls when mouse is used\n      if (_options.timeToIdle) {\n        _listen('mouseUsed', function () {\n          framework.bind(document, 'mousemove', _onIdleMouseMove);\n          framework.bind(document, 'mouseout', _onMouseLeaveWindow);\n          _idleInterval = setInterval(function () {\n            _idleIncrement++;\n\n            if (_idleIncrement === 2) {\n              ui.setIdle(true);\n            }\n          }, _options.timeToIdle / 2);\n        });\n      }\n    },\n        _setupHidingControlsDuringGestures = function () {\n      // Hide controls on vertical drag\n      _listen('onVerticalDrag', function (now) {\n        if (_controlsVisible && now < 0.95) {\n          ui.hideControls();\n        } else if (!_controlsVisible && now >= 0.95) {\n          ui.showControls();\n        }\n      }); // Hide controls when pinching to close\n\n\n      var pinchControlsHidden;\n\n      _listen('onPinchClose', function (now) {\n        if (_controlsVisible && now < 0.9) {\n          ui.hideControls();\n          pinchControlsHidden = true;\n        } else if (pinchControlsHidden && !_controlsVisible && now > 0.9) {\n          ui.showControls();\n        }\n      });\n\n      _listen('zoomGestureEnded', function () {\n        pinchControlsHidden = false;\n\n        if (pinchControlsHidden && !_controlsVisible) {\n          ui.showControls();\n        }\n      });\n    };\n\n    var _uiElements = [{\n      name: 'caption',\n      option: 'captionEl',\n      onInit: function (el) {\n        _captionContainer = el;\n      }\n    }, {\n      name: 'share-modal',\n      option: 'shareEl',\n      onInit: function (el) {\n        _shareModal = el;\n      },\n      onTap: function () {\n        _toggleShareModal();\n      }\n    }, {\n      name: 'button--share',\n      option: 'shareEl',\n      onInit: function (el) {\n        _shareButton = el;\n      },\n      onTap: function () {\n        _toggleShareModal();\n      }\n    }, {\n      name: 'button--zoom',\n      option: 'zoomEl',\n      onTap: pswp.toggleDesktopZoom\n    }, {\n      name: 'counter',\n      option: 'counterEl',\n      onInit: function (el) {\n        _indexIndicator = el;\n      }\n    }, {\n      name: 'button--close',\n      option: 'closeEl',\n      onTap: pswp.close\n    }, {\n      name: 'button--arrow--left',\n      option: 'arrowEl',\n      onTap: pswp.prev\n    }, {\n      name: 'button--arrow--right',\n      option: 'arrowEl',\n      onTap: pswp.next\n    }, {\n      name: 'button--fs',\n      option: 'fullscreenEl',\n      onTap: function () {\n        if (_fullscrenAPI.isFullscreen()) {\n          _fullscrenAPI.exit();\n        } else {\n          _fullscrenAPI.enter();\n        }\n      }\n    }, {\n      name: 'preloader',\n      option: 'preloaderEl',\n      onInit: function (el) {\n        _loadingIndicator = el;\n      }\n    }];\n\n    var _setupUIElements = function () {\n      var item, classAttr, uiElement;\n\n      var loopThroughChildElements = function (sChildren) {\n        if (!sChildren) {\n          return;\n        }\n\n        var l = sChildren.length;\n\n        for (var i = 0; i < l; i++) {\n          item = sChildren[i];\n          classAttr = item.className;\n\n          for (var a = 0; a < _uiElements.length; a++) {\n            uiElement = _uiElements[a];\n\n            if (classAttr.indexOf('pswp__' + uiElement.name) > -1) {\n              if (_options[uiElement.option]) {\n                // if element is not disabled from options\n                framework.removeClass(item, 'pswp__element--disabled');\n\n                if (uiElement.onInit) {\n                  uiElement.onInit(item);\n                } //item.style.display = 'block';\n\n              } else {\n                framework.addClass(item, 'pswp__element--disabled'); //item.style.display = 'none';\n              }\n            }\n          }\n        }\n      };\n\n      loopThroughChildElements(_controls.children);\n      var topBar = framework.getChildByClass(_controls, 'pswp__top-bar');\n\n      if (topBar) {\n        loopThroughChildElements(topBar.children);\n      }\n    };\n\n    ui.init = function () {\n      // extend options\n      framework.extend(pswp.options, _defaultUIOptions, true); // create local link for fast access\n\n      _options = pswp.options; // find pswp__ui element\n\n      _controls = framework.getChildByClass(pswp.scrollWrap, 'pswp__ui'); // create local link\n\n      _listen = pswp.listen;\n\n      _setupHidingControlsDuringGestures(); // update controls when slides change\n\n\n      _listen('beforeChange', ui.update); // toggle zoom on double-tap\n\n\n      _listen('doubleTap', function (point) {\n        var initialZoomLevel = pswp.currItem.initialZoomLevel;\n\n        if (pswp.getZoomLevel() !== initialZoomLevel) {\n          pswp.zoomTo(initialZoomLevel, point, 333);\n        } else {\n          pswp.zoomTo(_options.getDoubleTapZoom(false, pswp.currItem), point, 333);\n        }\n      }); // Allow text selection in caption\n\n\n      _listen('preventDragEvent', function (e, isDown, preventObj) {\n        var t = e.target || e.srcElement;\n\n        if (t && t.getAttribute('class') && e.type.indexOf('mouse') > -1 && (t.getAttribute('class').indexOf('__caption') > 0 || /(SMALL|STRONG|EM)/i.test(t.tagName))) {\n          preventObj.prevent = false;\n        }\n      }); // bind events for UI\n\n\n      _listen('bindEvents', function () {\n        framework.bind(_controls, 'pswpTap click', _onControlsTap);\n        framework.bind(pswp.scrollWrap, 'pswpTap', ui.onGlobalTap);\n\n        if (!pswp.likelyTouchDevice) {\n          framework.bind(pswp.scrollWrap, 'mouseover', ui.onMouseOver);\n        }\n      }); // unbind events for UI\n\n\n      _listen('unbindEvents', function () {\n        if (!_shareModalHidden) {\n          _toggleShareModal();\n        }\n\n        if (_idleInterval) {\n          clearInterval(_idleInterval);\n        }\n\n        framework.unbind(document, 'mouseout', _onMouseLeaveWindow);\n        framework.unbind(document, 'mousemove', _onIdleMouseMove);\n        framework.unbind(_controls, 'pswpTap click', _onControlsTap);\n        framework.unbind(pswp.scrollWrap, 'pswpTap', ui.onGlobalTap);\n        framework.unbind(pswp.scrollWrap, 'mouseover', ui.onMouseOver);\n\n        if (_fullscrenAPI) {\n          framework.unbind(document, _fullscrenAPI.eventK, ui.updateFullscreen);\n\n          if (_fullscrenAPI.isFullscreen()) {\n            _options.hideAnimationDuration = 0;\n\n            _fullscrenAPI.exit();\n          }\n\n          _fullscrenAPI = null;\n        }\n      }); // clean up things when gallery is destroyed\n\n\n      _listen('destroy', function () {\n        if (_options.captionEl) {\n          if (_fakeCaptionContainer) {\n            _controls.removeChild(_fakeCaptionContainer);\n          }\n\n          framework.removeClass(_captionContainer, 'pswp__caption--empty');\n        }\n\n        if (_shareModal) {\n          _shareModal.children[0].onclick = null;\n        }\n\n        framework.removeClass(_controls, 'pswp__ui--over-close');\n        framework.addClass(_controls, 'pswp__ui--hidden');\n        ui.setIdle(false);\n      });\n\n      if (!_options.showAnimationDuration) {\n        framework.removeClass(_controls, 'pswp__ui--hidden');\n      }\n\n      _listen('initialZoomIn', function () {\n        if (_options.showAnimationDuration) {\n          framework.removeClass(_controls, 'pswp__ui--hidden');\n        }\n      });\n\n      _listen('initialZoomOut', function () {\n        framework.addClass(_controls, 'pswp__ui--hidden');\n      });\n\n      _listen('parseVerticalMargin', _applyNavBarGaps);\n\n      _setupUIElements();\n\n      if (_options.shareEl && _shareButton && _shareModal) {\n        _shareModalHidden = true;\n      }\n\n      _countNumItems();\n\n      _setupIdle();\n\n      _setupFullscreenAPI();\n\n      _setupLoadingIndicator();\n    };\n\n    ui.setIdle = function (isIdle) {\n      _isIdle = isIdle;\n\n      _togglePswpClass(_controls, 'ui--idle', isIdle);\n    };\n\n    ui.update = function () {\n      // Don't update UI if it's hidden\n      if (_controlsVisible && pswp.currItem) {\n        ui.updateIndexIndicator();\n\n        if (_options.captionEl) {\n          _options.addCaptionHTMLFn(pswp.currItem, _captionContainer);\n\n          _togglePswpClass(_captionContainer, 'caption--empty', !pswp.currItem.title);\n        }\n\n        _overlayUIUpdated = true;\n      } else {\n        _overlayUIUpdated = false;\n      }\n\n      if (!_shareModalHidden) {\n        _toggleShareModal();\n      }\n\n      _countNumItems();\n    };\n\n    ui.updateFullscreen = function (e) {\n      if (e) {\n        // some browsers change window scroll position during the fullscreen\n        // so PhotoSwipe updates it just in case\n        setTimeout(function () {\n          pswp.setScrollOffset(0, framework.getScrollY());\n        }, 50);\n      } // toogle pswp--fs class on root element\n\n\n      framework[(_fullscrenAPI.isFullscreen() ? 'add' : 'remove') + 'Class'](pswp.template, 'pswp--fs');\n    };\n\n    ui.updateIndexIndicator = function () {\n      if (_options.counterEl) {\n        _indexIndicator.innerHTML = pswp.getCurrentIndex() + 1 + _options.indexIndicatorSep + _options.getNumItemsFn();\n      }\n    };\n\n    ui.onGlobalTap = function (e) {\n      e = e || window.event;\n      var target = e.target || e.srcElement;\n\n      if (_blockControlsTap) {\n        return;\n      }\n\n      if (e.detail && e.detail.pointerType === 'mouse') {\n        // close gallery if clicked outside of the image\n        if (_hasCloseClass(target)) {\n          pswp.close();\n          return;\n        }\n\n        if (framework.hasClass(target, 'pswp__img')) {\n          if (pswp.getZoomLevel() === 1 && pswp.getZoomLevel() <= pswp.currItem.fitRatio) {\n            if (_options.clickToCloseNonZoomable) {\n              pswp.close();\n            }\n          } else {\n            pswp.toggleDesktopZoom(e.detail.releasePoint);\n          }\n        }\n      } else {\n        // tap anywhere (except buttons) to toggle visibility of controls\n        if (_options.tapToToggleControls) {\n          if (_controlsVisible) {\n            ui.hideControls();\n          } else {\n            ui.showControls();\n          }\n        } // tap to close gallery\n\n\n        if (_options.tapToClose && (framework.hasClass(target, 'pswp__img') || _hasCloseClass(target))) {\n          pswp.close();\n          return;\n        }\n      }\n    };\n\n    ui.onMouseOver = function (e) {\n      e = e || window.event;\n      var target = e.target || e.srcElement; // add class when mouse is over an element that should close the gallery\n\n      _togglePswpClass(_controls, 'ui--over-close', _hasCloseClass(target));\n    };\n\n    ui.hideControls = function () {\n      framework.addClass(_controls, 'pswp__ui--hidden');\n      _controlsVisible = false;\n    };\n\n    ui.showControls = function () {\n      _controlsVisible = true;\n\n      if (!_overlayUIUpdated) {\n        ui.update();\n      }\n\n      framework.removeClass(_controls, 'pswp__ui--hidden');\n    };\n\n    ui.supportsFullscreen = function () {\n      var d = document;\n      return !!(d.exitFullscreen || d.mozCancelFullScreen || d.webkitExitFullscreen || d.msExitFullscreen);\n    };\n\n    ui.getFullscreenAPI = function () {\n      var dE = document.documentElement,\n          api,\n          tF = 'fullscreenchange';\n\n      if (dE.requestFullscreen) {\n        api = {\n          enterK: 'requestFullscreen',\n          exitK: 'exitFullscreen',\n          elementK: 'fullscreenElement',\n          eventK: tF\n        };\n      } else if (dE.mozRequestFullScreen) {\n        api = {\n          enterK: 'mozRequestFullScreen',\n          exitK: 'mozCancelFullScreen',\n          elementK: 'mozFullScreenElement',\n          eventK: 'moz' + tF\n        };\n      } else if (dE.webkitRequestFullscreen) {\n        api = {\n          enterK: 'webkitRequestFullscreen',\n          exitK: 'webkitExitFullscreen',\n          elementK: 'webkitFullscreenElement',\n          eventK: 'webkit' + tF\n        };\n      } else if (dE.msRequestFullscreen) {\n        api = {\n          enterK: 'msRequestFullscreen',\n          exitK: 'msExitFullscreen',\n          elementK: 'msFullscreenElement',\n          eventK: 'MSFullscreenChange'\n        };\n      }\n\n      if (api) {\n        api.enter = function () {\n          // disable close-on-scroll in fullscreen\n          _initalCloseOnScrollValue = _options.closeOnScroll;\n          _options.closeOnScroll = false;\n\n          if (this.enterK === 'webkitRequestFullscreen') {\n            pswp.template[this.enterK](Element.ALLOW_KEYBOARD_INPUT);\n          } else {\n            return pswp.template[this.enterK]();\n          }\n        };\n\n        api.exit = function () {\n          _options.closeOnScroll = _initalCloseOnScrollValue;\n          return document[this.exitK]();\n        };\n\n        api.isFullscreen = function () {\n          return document[this.elementK];\n        };\n      }\n\n      return api;\n    };\n  };\n\n  return PhotoSwipeUI_Default;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGhvdG9zd2lwZS9kaXN0L3Bob3Rvc3dpcGUtdWktZGVmYXVsdC5qcz8xNGZkIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZGVmaW5lIiwiUGhvdG9Td2lwZVVJX0RlZmF1bHQiLCJwc3dwIiwiZnJhbWV3b3JrIiwidWkiLCJfb3ZlcmxheVVJVXBkYXRlZCIsIl9jb250cm9sc1Zpc2libGUiLCJfZnVsbHNjcmVuQVBJIiwiX2NvbnRyb2xzIiwiX2NhcHRpb25Db250YWluZXIiLCJfZmFrZUNhcHRpb25Db250YWluZXIiLCJfaW5kZXhJbmRpY2F0b3IiLCJfc2hhcmVCdXR0b24iLCJfc2hhcmVNb2RhbCIsIl9zaGFyZU1vZGFsSGlkZGVuIiwiX2luaXRhbENsb3NlT25TY3JvbGxWYWx1ZSIsIl9pc0lkbGUiLCJfbGlzdGVuIiwiX2xvYWRpbmdJbmRpY2F0b3IiLCJfbG9hZGluZ0luZGljYXRvckhpZGRlbiIsIl9sb2FkaW5nSW5kaWNhdG9yVGltZW91dCIsIl9nYWxsZXJ5SGFzT25lU2xpZGUiLCJfb3B0aW9ucyIsIl9kZWZhdWx0VUlPcHRpb25zIiwiYmFyc1NpemUiLCJ0b3AiLCJib3R0b20iLCJjbG9zZUVsQ2xhc3NlcyIsInRpbWVUb0lkbGUiLCJ0aW1lVG9JZGxlT3V0c2lkZSIsImxvYWRpbmdJbmRpY2F0b3JEZWxheSIsImFkZENhcHRpb25IVE1MRm4iLCJpdGVtIiwiY2FwdGlvbkVsIiwidGl0bGUiLCJjaGlsZHJlbiIsImlubmVySFRNTCIsImNsb3NlRWwiLCJmdWxsc2NyZWVuRWwiLCJ6b29tRWwiLCJzaGFyZUVsIiwiY291bnRlckVsIiwiYXJyb3dFbCIsInByZWxvYWRlckVsIiwidGFwVG9DbG9zZSIsInRhcFRvVG9nZ2xlQ29udHJvbHMiLCJjbGlja1RvQ2xvc2VOb25ab29tYWJsZSIsInNoYXJlQnV0dG9ucyIsImlkIiwibGFiZWwiLCJ1cmwiLCJkb3dubG9hZCIsImdldEltYWdlVVJMRm9yU2hhcmUiLCJjdXJySXRlbSIsInNyYyIsImdldFBhZ2VVUkxGb3JTaGFyZSIsIndpbmRvdyIsImxvY2F0aW9uIiwiaHJlZiIsImdldFRleHRGb3JTaGFyZSIsImluZGV4SW5kaWNhdG9yU2VwIiwiZml0Q29udHJvbHNXaWR0aCIsIl9ibG9ja0NvbnRyb2xzVGFwIiwiX2Jsb2NrQ29udHJvbHNUYXBUaW1lb3V0IiwiX29uQ29udHJvbHNUYXAiLCJlIiwiZXZlbnQiLCJtb3VzZVVzZWQiLCJfb25JZGxlTW91c2VNb3ZlIiwidGFyZ2V0Iiwic3JjRWxlbWVudCIsInVpRWxlbWVudCIsImNsaWNrZWRDbGFzcyIsImdldEF0dHJpYnV0ZSIsImZvdW5kIiwiaSIsIl91aUVsZW1lbnRzIiwibGVuZ3RoIiwib25UYXAiLCJpbmRleE9mIiwibmFtZSIsInN0b3BQcm9wYWdhdGlvbiIsInRhcERlbGF5IiwiZmVhdHVyZXMiLCJpc09sZEFuZHJvaWQiLCJzZXRUaW1lb3V0IiwiX2ZpdENvbnRyb2xzSW5WaWV3cG9ydCIsImxpa2VseVRvdWNoRGV2aWNlIiwic2NyZWVuIiwid2lkdGgiLCJfdG9nZ2xlUHN3cENsYXNzIiwiZWwiLCJjTmFtZSIsImFkZCIsIl9jb3VudE51bUl0ZW1zIiwiaGFzT25lU2xpZGUiLCJnZXROdW1JdGVtc0ZuIiwiX3RvZ2dsZVNoYXJlTW9kYWxDbGFzcyIsIl90b2dnbGVTaGFyZU1vZGFsIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsIl91cGRhdGVTaGFyZVVSTHMiLCJfb3BlbldpbmRvd1BvcHVwIiwic2hvdXQiLCJoYXNBdHRyaWJ1dGUiLCJvcGVuIiwiTWF0aCIsInJvdW5kIiwic2hhcmVCdXR0b25PdXQiLCJzaGFyZUJ1dHRvbkRhdGEiLCJzaGFyZVVSTCIsImltYWdlX3VybCIsInBhZ2VfdXJsIiwic2hhcmVfdGV4dCIsInJlcGxhY2UiLCJlbmNvZGVVUklDb21wb25lbnQiLCJwYXJzZVNoYXJlQnV0dG9uT3V0Iiwib25jbGljayIsIl9oYXNDbG9zZUNsYXNzIiwiaGFzQ2xhc3MiLCJfaWRsZUludGVydmFsIiwiX2lkbGVUaW1lciIsIl9pZGxlSW5jcmVtZW50IiwiY2xlYXJUaW1lb3V0Iiwic2V0SWRsZSIsIl9vbk1vdXNlTGVhdmVXaW5kb3ciLCJmcm9tIiwicmVsYXRlZFRhcmdldCIsInRvRWxlbWVudCIsIm5vZGVOYW1lIiwiX3NldHVwRnVsbHNjcmVlbkFQSSIsImdldEZ1bGxzY3JlZW5BUEkiLCJiaW5kIiwiZG9jdW1lbnQiLCJldmVudEsiLCJ1cGRhdGVGdWxsc2NyZWVuIiwidGVtcGxhdGUiLCJfc2V0dXBMb2FkaW5nSW5kaWNhdG9yIiwiX3RvZ2dsZUxvYWRpbmdJbmRpY2F0b3IiLCJsb2FkaW5nIiwiYWxsb3dQcm9ncmVzc2l2ZUltZyIsImltZyIsIm5hdHVyYWxXaWR0aCIsImluZGV4IiwiaGlkZSIsIl9hcHBseU5hdkJhckdhcHMiLCJnYXAiLCJ2R2FwIiwiYmFycyIsImNyZWF0ZUVsIiwiYXBwZW5kQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJjYXB0aW9uU2l6ZSIsImNsaWVudEhlaWdodCIsInBhcnNlSW50IiwiX3NldHVwSWRsZSIsInNldEludGVydmFsIiwiX3NldHVwSGlkaW5nQ29udHJvbHNEdXJpbmdHZXN0dXJlcyIsIm5vdyIsImhpZGVDb250cm9scyIsInNob3dDb250cm9scyIsInBpbmNoQ29udHJvbHNIaWRkZW4iLCJvcHRpb24iLCJvbkluaXQiLCJ0b2dnbGVEZXNrdG9wWm9vbSIsImNsb3NlIiwicHJldiIsIm5leHQiLCJpc0Z1bGxzY3JlZW4iLCJleGl0IiwiZW50ZXIiLCJfc2V0dXBVSUVsZW1lbnRzIiwiY2xhc3NBdHRyIiwibG9vcFRocm91Z2hDaGlsZEVsZW1lbnRzIiwic0NoaWxkcmVuIiwibCIsImNsYXNzTmFtZSIsImEiLCJ0b3BCYXIiLCJnZXRDaGlsZEJ5Q2xhc3MiLCJpbml0IiwiZXh0ZW5kIiwib3B0aW9ucyIsInNjcm9sbFdyYXAiLCJsaXN0ZW4iLCJ1cGRhdGUiLCJwb2ludCIsImluaXRpYWxab29tTGV2ZWwiLCJnZXRab29tTGV2ZWwiLCJ6b29tVG8iLCJnZXREb3VibGVUYXBab29tIiwiaXNEb3duIiwicHJldmVudE9iaiIsInQiLCJ0eXBlIiwidGVzdCIsInRhZ05hbWUiLCJwcmV2ZW50Iiwib25HbG9iYWxUYXAiLCJvbk1vdXNlT3ZlciIsImNsZWFySW50ZXJ2YWwiLCJ1bmJpbmQiLCJoaWRlQW5pbWF0aW9uRHVyYXRpb24iLCJyZW1vdmVDaGlsZCIsInNob3dBbmltYXRpb25EdXJhdGlvbiIsImlzSWRsZSIsInVwZGF0ZUluZGV4SW5kaWNhdG9yIiwic2V0U2Nyb2xsT2Zmc2V0IiwiZ2V0U2Nyb2xsWSIsImdldEN1cnJlbnRJbmRleCIsImRldGFpbCIsInBvaW50ZXJUeXBlIiwiZml0UmF0aW8iLCJyZWxlYXNlUG9pbnQiLCJzdXBwb3J0c0Z1bGxzY3JlZW4iLCJkIiwiZXhpdEZ1bGxzY3JlZW4iLCJtb3pDYW5jZWxGdWxsU2NyZWVuIiwid2Via2l0RXhpdEZ1bGxzY3JlZW4iLCJtc0V4aXRGdWxsc2NyZWVuIiwiZEUiLCJkb2N1bWVudEVsZW1lbnQiLCJhcGkiLCJ0RiIsInJlcXVlc3RGdWxsc2NyZWVuIiwiZW50ZXJLIiwiZXhpdEsiLCJlbGVtZW50SyIsIm1velJlcXVlc3RGdWxsU2NyZWVuIiwid2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4iLCJtc1JlcXVlc3RGdWxsc2NyZWVuIiwiY2xvc2VPblNjcm9sbCIsIkVsZW1lbnQiLCJBTExPV19LRVlCT0FSRF9JTlBVVCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFHQTs7Ozs7O0FBTUEsQ0FBQyxVQUFVQSxJQUFWLEVBQWdCQyxPQUFoQixFQUF5QjtBQUN6QixNQUFJLElBQUosRUFBZ0Q7QUFDL0NDLHdDQUFPRCxPQUFEO0FBQUE7QUFBQTtBQUFBO0FBQUEsb0dBQU47QUFDQSxHQUZELE1BRU8sRUFJTjtBQUNELENBUkQsRUFRRyxJQVJILEVBUVMsWUFBWTtBQUVwQjs7QUFJRCxNQUFJRSxvQkFBb0IsR0FDdkIsVUFBU0MsSUFBVCxFQUFlQyxTQUFmLEVBQTBCO0FBRTFCLFFBQUlDLEVBQUUsR0FBRyxJQUFUOztBQUNBLFFBQUlDLGlCQUFpQixHQUFHLEtBQXhCO0FBQUEsUUFDQ0MsZ0JBQWdCLEdBQUcsSUFEcEI7QUFBQSxRQUVDQyxhQUZEO0FBQUEsUUFHQ0MsU0FIRDtBQUFBLFFBSUNDLGlCQUpEO0FBQUEsUUFLQ0MscUJBTEQ7QUFBQSxRQU1DQyxlQU5EO0FBQUEsUUFPQ0MsWUFQRDtBQUFBLFFBUUNDLFdBUkQ7QUFBQSxRQVNDQyxpQkFBaUIsR0FBRyxJQVRyQjtBQUFBLFFBVUNDLHlCQVZEO0FBQUEsUUFXQ0MsT0FYRDtBQUFBLFFBWUNDLE9BWkQ7QUFBQSxRQWNDQyxpQkFkRDtBQUFBLFFBZUNDLHVCQWZEO0FBQUEsUUFnQkNDLHdCQWhCRDtBQUFBLFFBa0JDQyxtQkFsQkQ7QUFBQSxRQW9CQ0MsUUFwQkQ7QUFBQSxRQXFCQ0MsaUJBQWlCLEdBQUc7QUFDbkJDLGNBQVEsRUFBRTtBQUFDQyxXQUFHLEVBQUMsRUFBTDtBQUFTQyxjQUFNLEVBQUM7QUFBaEIsT0FEUztBQUVuQkMsb0JBQWMsRUFBRSxDQUFDLE1BQUQsRUFBUyxTQUFULEVBQW9CLFdBQXBCLEVBQWlDLElBQWpDLEVBQXVDLFNBQXZDLENBRkc7QUFHbkJDLGdCQUFVLEVBQUUsSUFITztBQUluQkMsdUJBQWlCLEVBQUUsSUFKQTtBQUtuQkMsMkJBQXFCLEVBQUUsSUFMSjtBQUtVO0FBRTdCQyxzQkFBZ0IsRUFBRSxVQUFTQyxJQUFULEVBQWVDO0FBQVU7QUFBekIsUUFBd0M7QUFDekQsWUFBRyxDQUFDRCxJQUFJLENBQUNFLEtBQVQsRUFBZ0I7QUFDZkQsbUJBQVMsQ0FBQ0UsUUFBVixDQUFtQixDQUFuQixFQUFzQkMsU0FBdEIsR0FBa0MsRUFBbEM7QUFDQSxpQkFBTyxLQUFQO0FBQ0E7O0FBQ0RILGlCQUFTLENBQUNFLFFBQVYsQ0FBbUIsQ0FBbkIsRUFBc0JDLFNBQXRCLEdBQWtDSixJQUFJLENBQUNFLEtBQXZDO0FBQ0EsZUFBTyxJQUFQO0FBQ0EsT0Fka0I7QUFnQm5CRyxhQUFPLEVBQUMsSUFoQlc7QUFpQm5CSixlQUFTLEVBQUUsSUFqQlE7QUFrQm5CSyxrQkFBWSxFQUFFLElBbEJLO0FBbUJuQkMsWUFBTSxFQUFFLElBbkJXO0FBb0JuQkMsYUFBTyxFQUFFLElBcEJVO0FBcUJuQkMsZUFBUyxFQUFFLElBckJRO0FBc0JuQkMsYUFBTyxFQUFFLElBdEJVO0FBdUJuQkMsaUJBQVcsRUFBRSxJQXZCTTtBQXlCbkJDLGdCQUFVLEVBQUUsS0F6Qk87QUEwQm5CQyx5QkFBbUIsRUFBRSxJQTFCRjtBQTRCbkJDLDZCQUF1QixFQUFFLElBNUJOO0FBOEJuQkMsa0JBQVksRUFBRSxDQUNiO0FBQUNDLFVBQUUsRUFBQyxVQUFKO0FBQWdCQyxhQUFLLEVBQUMsbUJBQXRCO0FBQTJDQyxXQUFHLEVBQUM7QUFBL0MsT0FEYSxFQUViO0FBQUNGLFVBQUUsRUFBQyxTQUFKO0FBQWVDLGFBQUssRUFBQyxPQUFyQjtBQUE4QkMsV0FBRyxFQUFDO0FBQWxDLE9BRmEsRUFHYjtBQUFDRixVQUFFLEVBQUMsV0FBSjtBQUFpQkMsYUFBSyxFQUFDLFFBQXZCO0FBQWlDQyxXQUFHLEVBQUMsZ0RBQzVCO0FBRFQsT0FIYSxFQUtiO0FBQUNGLFVBQUUsRUFBQyxVQUFKO0FBQWdCQyxhQUFLLEVBQUMsZ0JBQXRCO0FBQXdDQyxXQUFHLEVBQUMsbUJBQTVDO0FBQWlFQyxnQkFBUSxFQUFDO0FBQTFFLE9BTGEsQ0E5Qks7QUFxQ25CQyx5QkFBbUIsRUFBRTtBQUFVO0FBQXdCO0FBQ3RELGVBQU9sRCxJQUFJLENBQUNtRCxRQUFMLENBQWNDLEdBQWQsSUFBcUIsRUFBNUI7QUFDQSxPQXZDa0I7QUF3Q25CQyx3QkFBa0IsRUFBRTtBQUFVO0FBQXdCO0FBQ3JELGVBQU9DLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQkMsSUFBdkI7QUFDQSxPQTFDa0I7QUEyQ25CQyxxQkFBZSxFQUFFO0FBQVU7QUFBd0I7QUFDbEQsZUFBT3pELElBQUksQ0FBQ21ELFFBQUwsQ0FBY25CLEtBQWQsSUFBdUIsRUFBOUI7QUFDQSxPQTdDa0I7QUErQ25CMEIsdUJBQWlCLEVBQUUsS0EvQ0E7QUFnRG5CQyxzQkFBZ0IsRUFBRTtBQWhEQyxLQXJCckI7QUFBQSxRQXdFQ0MsaUJBeEVEO0FBQUEsUUF5RUNDLHdCQXpFRDs7QUE2RUEsUUFBSUMsY0FBYyxHQUFHLFVBQVNDLENBQVQsRUFBWTtBQUMvQixVQUFHSCxpQkFBSCxFQUFzQjtBQUNyQixlQUFPLElBQVA7QUFDQTs7QUFHREcsT0FBQyxHQUFHQSxDQUFDLElBQUlULE1BQU0sQ0FBQ1UsS0FBaEI7O0FBRUEsVUFBRzVDLFFBQVEsQ0FBQ00sVUFBVCxJQUF1Qk4sUUFBUSxDQUFDNkMsU0FBaEMsSUFBNkMsQ0FBQ25ELE9BQWpELEVBQTBEO0FBQ3pEO0FBQ0FvRCx3QkFBZ0I7QUFDaEI7O0FBR0QsVUFBSUMsTUFBTSxHQUFHSixDQUFDLENBQUNJLE1BQUYsSUFBWUosQ0FBQyxDQUFDSyxVQUEzQjtBQUFBLFVBQ0NDLFNBREQ7QUFBQSxVQUVDQyxZQUFZLEdBQUdILE1BQU0sQ0FBQ0ksWUFBUCxDQUFvQixPQUFwQixLQUFnQyxFQUZoRDtBQUFBLFVBR0NDLEtBSEQ7O0FBS0EsV0FBSSxJQUFJQyxDQUFDLEdBQUcsQ0FBWixFQUFlQSxDQUFDLEdBQUdDLFdBQVcsQ0FBQ0MsTUFBL0IsRUFBdUNGLENBQUMsRUFBeEMsRUFBNEM7QUFDM0NKLGlCQUFTLEdBQUdLLFdBQVcsQ0FBQ0QsQ0FBRCxDQUF2Qjs7QUFDQSxZQUFHSixTQUFTLENBQUNPLEtBQVYsSUFBbUJOLFlBQVksQ0FBQ08sT0FBYixDQUFxQixXQUFXUixTQUFTLENBQUNTLElBQTFDLElBQW1ELENBQUMsQ0FBMUUsRUFBOEU7QUFDN0VULG1CQUFTLENBQUNPLEtBQVY7QUFDQUosZUFBSyxHQUFHLElBQVI7QUFFQTtBQUNEOztBQUVELFVBQUdBLEtBQUgsRUFBVTtBQUNULFlBQUdULENBQUMsQ0FBQ2dCLGVBQUwsRUFBc0I7QUFDckJoQixXQUFDLENBQUNnQixlQUFGO0FBQ0E7O0FBQ0RuQix5QkFBaUIsR0FBRyxJQUFwQixDQUpTLENBTVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFlBQUlvQixRQUFRLEdBQUcvRSxTQUFTLENBQUNnRixRQUFWLENBQW1CQyxZQUFuQixHQUFrQyxHQUFsQyxHQUF3QyxFQUF2RDtBQUNBckIsZ0NBQXdCLEdBQUdzQixVQUFVLENBQUMsWUFBVztBQUNoRHZCLDJCQUFpQixHQUFHLEtBQXBCO0FBQ0EsU0FGb0MsRUFFbENvQixRQUZrQyxDQUFyQztBQUdBO0FBRUQsS0E5Q0Y7QUFBQSxRQStDQ0ksc0JBQXNCLEdBQUcsWUFBVztBQUNuQyxhQUFPLENBQUNwRixJQUFJLENBQUNxRixpQkFBTixJQUEyQmpFLFFBQVEsQ0FBQzZDLFNBQXBDLElBQWlEcUIsTUFBTSxDQUFDQyxLQUFQLEdBQWVuRSxRQUFRLENBQUN1QyxnQkFBaEY7QUFDQSxLQWpERjtBQUFBLFFBa0RDNkIsZ0JBQWdCLEdBQUcsVUFBU0MsRUFBVCxFQUFhQyxLQUFiLEVBQW9CQyxHQUFwQixFQUF5QjtBQUMzQzFGLGVBQVMsQ0FBRSxDQUFDMEYsR0FBRyxHQUFHLEtBQUgsR0FBVyxRQUFmLElBQTJCLE9BQTdCLENBQVQsQ0FBZ0RGLEVBQWhELEVBQW9ELFdBQVdDLEtBQS9EO0FBQ0EsS0FwREY7QUFBQSxRQXNEQztBQUNBO0FBQ0FFLGtCQUFjLEdBQUcsWUFBVztBQUMzQixVQUFJQyxXQUFXLEdBQUl6RSxRQUFRLENBQUMwRSxhQUFULE9BQTZCLENBQWhEOztBQUVBLFVBQUdELFdBQVcsS0FBSzFFLG1CQUFuQixFQUF3QztBQUN2Q3FFLHdCQUFnQixDQUFDbEYsU0FBRCxFQUFZLGVBQVosRUFBNkJ1RixXQUE3QixDQUFoQjs7QUFDQTFFLDJCQUFtQixHQUFHMEUsV0FBdEI7QUFDQTtBQUNELEtBL0RGO0FBQUEsUUFnRUNFLHNCQUFzQixHQUFHLFlBQVc7QUFDbkNQLHNCQUFnQixDQUFDN0UsV0FBRCxFQUFjLHFCQUFkLEVBQXFDQyxpQkFBckMsQ0FBaEI7QUFDQSxLQWxFRjtBQUFBLFFBbUVDb0YsaUJBQWlCLEdBQUcsWUFBVztBQUU5QnBGLHVCQUFpQixHQUFHLENBQUNBLGlCQUFyQjs7QUFHQSxVQUFHLENBQUNBLGlCQUFKLEVBQXVCO0FBQ3RCbUYsOEJBQXNCOztBQUN0Qlosa0JBQVUsQ0FBQyxZQUFXO0FBQ3JCLGNBQUcsQ0FBQ3ZFLGlCQUFKLEVBQXVCO0FBQ3RCWCxxQkFBUyxDQUFDZ0csUUFBVixDQUFtQnRGLFdBQW5CLEVBQWdDLDRCQUFoQztBQUNBO0FBQ0QsU0FKUyxFQUlQLEVBSk8sQ0FBVjtBQUtBLE9BUEQsTUFPTztBQUNOVixpQkFBUyxDQUFDaUcsV0FBVixDQUFzQnZGLFdBQXRCLEVBQW1DLDRCQUFuQztBQUNBd0Usa0JBQVUsQ0FBQyxZQUFXO0FBQ3JCLGNBQUd2RSxpQkFBSCxFQUFzQjtBQUNyQm1GLGtDQUFzQjtBQUN0QjtBQUNELFNBSlMsRUFJUCxHQUpPLENBQVY7QUFLQTs7QUFFRCxVQUFHLENBQUNuRixpQkFBSixFQUF1QjtBQUN0QnVGLHdCQUFnQjtBQUNoQjs7QUFDRCxhQUFPLEtBQVA7QUFDQSxLQTVGRjtBQUFBLFFBOEZDQyxnQkFBZ0IsR0FBRyxVQUFTckMsQ0FBVCxFQUFZO0FBQzlCQSxPQUFDLEdBQUdBLENBQUMsSUFBSVQsTUFBTSxDQUFDVSxLQUFoQjtBQUNBLFVBQUlHLE1BQU0sR0FBR0osQ0FBQyxDQUFDSSxNQUFGLElBQVlKLENBQUMsQ0FBQ0ssVUFBM0I7QUFFQXBFLFVBQUksQ0FBQ3FHLEtBQUwsQ0FBVyxnQkFBWCxFQUE2QnRDLENBQTdCLEVBQWdDSSxNQUFoQzs7QUFFQSxVQUFHLENBQUNBLE1BQU0sQ0FBQ1gsSUFBWCxFQUFpQjtBQUNoQixlQUFPLEtBQVA7QUFDQTs7QUFFRCxVQUFJVyxNQUFNLENBQUNtQyxZQUFQLENBQW9CLFVBQXBCLENBQUosRUFBc0M7QUFDckMsZUFBTyxJQUFQO0FBQ0E7O0FBRURoRCxZQUFNLENBQUNpRCxJQUFQLENBQVlwQyxNQUFNLENBQUNYLElBQW5CLEVBQXlCLFlBQXpCLEVBQXVDLDZDQUNoQyxpREFEZ0MsSUFFL0JGLE1BQU0sQ0FBQ2dDLE1BQVAsR0FBZ0JrQixJQUFJLENBQUNDLEtBQUwsQ0FBV25CLE1BQU0sQ0FBQ0MsS0FBUCxHQUFlLENBQWYsR0FBbUIsR0FBOUIsQ0FBaEIsR0FBcUQsR0FGdEIsQ0FBdkM7O0FBSUEsVUFBRyxDQUFDM0UsaUJBQUosRUFBdUI7QUFDdEJvRix5QkFBaUI7QUFDakI7O0FBRUQsYUFBTyxLQUFQO0FBQ0EsS0FySEY7QUFBQSxRQXNIQ0csZ0JBQWdCLEdBQUcsWUFBVztBQUM3QixVQUFJTyxjQUFjLEdBQUcsRUFBckI7QUFBQSxVQUNDQyxlQUREO0FBQUEsVUFFQ0MsUUFGRDtBQUFBLFVBR0NDLFNBSEQ7QUFBQSxVQUlDQyxRQUpEO0FBQUEsVUFLQ0MsVUFMRDs7QUFPQSxXQUFJLElBQUl0QyxDQUFDLEdBQUcsQ0FBWixFQUFlQSxDQUFDLEdBQUdyRCxRQUFRLENBQUN5QixZQUFULENBQXNCOEIsTUFBekMsRUFBaURGLENBQUMsRUFBbEQsRUFBc0Q7QUFDckRrQyx1QkFBZSxHQUFHdkYsUUFBUSxDQUFDeUIsWUFBVCxDQUFzQjRCLENBQXRCLENBQWxCO0FBRUFvQyxpQkFBUyxHQUFHekYsUUFBUSxDQUFDOEIsbUJBQVQsQ0FBNkJ5RCxlQUE3QixDQUFaO0FBQ0FHLGdCQUFRLEdBQUcxRixRQUFRLENBQUNpQyxrQkFBVCxDQUE0QnNELGVBQTVCLENBQVg7QUFDQUksa0JBQVUsR0FBRzNGLFFBQVEsQ0FBQ3FDLGVBQVQsQ0FBeUJrRCxlQUF6QixDQUFiO0FBRUFDLGdCQUFRLEdBQUdELGVBQWUsQ0FBQzNELEdBQWhCLENBQW9CZ0UsT0FBcEIsQ0FBNEIsU0FBNUIsRUFBdUNDLGtCQUFrQixDQUFDSCxRQUFELENBQXpELEVBQ0xFLE9BREssQ0FDRyxlQURILEVBQ29CQyxrQkFBa0IsQ0FBQ0osU0FBRCxDQUR0QyxFQUVMRyxPQUZLLENBRUcsbUJBRkgsRUFFd0JILFNBRnhCLEVBR0xHLE9BSEssQ0FHRyxVQUhILEVBR2VDLGtCQUFrQixDQUFDRixVQUFELENBSGpDLENBQVg7QUFLQUwsc0JBQWMsSUFBSSxjQUFjRSxRQUFkLEdBQXlCLG9CQUF6QixHQUNiLHNCQURhLEdBQ1lELGVBQWUsQ0FBQzdELEVBRDVCLEdBQ2lDLEdBRGpDLElBRVo2RCxlQUFlLENBQUMxRCxRQUFoQixHQUEyQixVQUEzQixHQUF3QyxFQUY1QixJQUVrQyxHQUZsQyxHQUdiMEQsZUFBZSxDQUFDNUQsS0FISCxHQUdXLE1BSDdCOztBQUtBLFlBQUczQixRQUFRLENBQUM4RixtQkFBWixFQUFpQztBQUNoQ1Isd0JBQWMsR0FBR3RGLFFBQVEsQ0FBQzhGLG1CQUFULENBQTZCUCxlQUE3QixFQUE4Q0QsY0FBOUMsQ0FBakI7QUFDQTtBQUNEOztBQUNEL0YsaUJBQVcsQ0FBQ3NCLFFBQVosQ0FBcUIsQ0FBckIsRUFBd0JDLFNBQXhCLEdBQW9Dd0UsY0FBcEM7QUFDQS9GLGlCQUFXLENBQUNzQixRQUFaLENBQXFCLENBQXJCLEVBQXdCa0YsT0FBeEIsR0FBa0NmLGdCQUFsQztBQUVBLEtBdEpGO0FBQUEsUUF1SkNnQixjQUFjLEdBQUcsVUFBU2pELE1BQVQsRUFBaUI7QUFDakMsV0FBSSxJQUFLTSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHckQsUUFBUSxDQUFDSyxjQUFULENBQXdCa0QsTUFBNUMsRUFBb0RGLENBQUMsRUFBckQsRUFBeUQ7QUFDeEQsWUFBSXhFLFNBQVMsQ0FBQ29ILFFBQVYsQ0FBbUJsRCxNQUFuQixFQUEyQixXQUFXL0MsUUFBUSxDQUFDSyxjQUFULENBQXdCZ0QsQ0FBeEIsQ0FBdEMsQ0FBSixFQUF3RTtBQUN2RSxpQkFBTyxJQUFQO0FBQ0E7QUFDRDtBQUNELEtBN0pGO0FBQUEsUUE4SkM2QyxhQTlKRDtBQUFBLFFBK0pDQyxVQS9KRDtBQUFBLFFBZ0tDQyxjQUFjLEdBQUcsQ0FoS2xCO0FBQUEsUUFpS0N0RCxnQkFBZ0IsR0FBRyxZQUFXO0FBQzdCdUQsa0JBQVksQ0FBQ0YsVUFBRCxDQUFaO0FBQ0FDLG9CQUFjLEdBQUcsQ0FBakI7O0FBQ0EsVUFBRzFHLE9BQUgsRUFBWTtBQUNYWixVQUFFLENBQUN3SCxPQUFILENBQVcsS0FBWDtBQUNBO0FBQ0QsS0F2S0Y7QUFBQSxRQXdLQ0MsbUJBQW1CLEdBQUcsVUFBUzVELENBQVQsRUFBWTtBQUNqQ0EsT0FBQyxHQUFHQSxDQUFDLEdBQUdBLENBQUgsR0FBT1QsTUFBTSxDQUFDVSxLQUFuQjtBQUNBLFVBQUk0RCxJQUFJLEdBQUc3RCxDQUFDLENBQUM4RCxhQUFGLElBQW1COUQsQ0FBQyxDQUFDK0QsU0FBaEM7O0FBQ0EsVUFBSSxDQUFDRixJQUFELElBQVNBLElBQUksQ0FBQ0csUUFBTCxLQUFrQixNQUEvQixFQUF1QztBQUN0Q04sb0JBQVksQ0FBQ0YsVUFBRCxDQUFaO0FBQ0FBLGtCQUFVLEdBQUdwQyxVQUFVLENBQUMsWUFBVztBQUNsQ2pGLFlBQUUsQ0FBQ3dILE9BQUgsQ0FBVyxJQUFYO0FBQ0EsU0FGc0IsRUFFcEJ0RyxRQUFRLENBQUNPLGlCQUZXLENBQXZCO0FBR0E7QUFDRCxLQWpMRjtBQUFBLFFBa0xDcUcsbUJBQW1CLEdBQUcsWUFBVztBQUNoQyxVQUFHNUcsUUFBUSxDQUFDZ0IsWUFBVCxJQUF5QixDQUFDbkMsU0FBUyxDQUFDZ0YsUUFBVixDQUFtQkMsWUFBaEQsRUFBOEQ7QUFDN0QsWUFBRyxDQUFDN0UsYUFBSixFQUFtQjtBQUNsQkEsdUJBQWEsR0FBR0gsRUFBRSxDQUFDK0gsZ0JBQUgsRUFBaEI7QUFDQTs7QUFDRCxZQUFHNUgsYUFBSCxFQUFrQjtBQUNqQkosbUJBQVMsQ0FBQ2lJLElBQVYsQ0FBZUMsUUFBZixFQUF5QjlILGFBQWEsQ0FBQytILE1BQXZDLEVBQStDbEksRUFBRSxDQUFDbUksZ0JBQWxEO0FBQ0FuSSxZQUFFLENBQUNtSSxnQkFBSDtBQUNBcEksbUJBQVMsQ0FBQ2dHLFFBQVYsQ0FBbUJqRyxJQUFJLENBQUNzSSxRQUF4QixFQUFrQyxtQkFBbEM7QUFDQSxTQUpELE1BSU87QUFDTnJJLG1CQUFTLENBQUNpRyxXQUFWLENBQXNCbEcsSUFBSSxDQUFDc0ksUUFBM0IsRUFBcUMsbUJBQXJDO0FBQ0E7QUFDRDtBQUNELEtBL0xGO0FBQUEsUUFnTUNDLHNCQUFzQixHQUFHLFlBQVc7QUFDbkM7QUFDQSxVQUFHbkgsUUFBUSxDQUFDcUIsV0FBWixFQUF5QjtBQUV4QitGLCtCQUF1QixDQUFDLElBQUQsQ0FBdkI7O0FBRUF6SCxlQUFPLENBQUMsY0FBRCxFQUFpQixZQUFXO0FBRWxDMEcsc0JBQVksQ0FBQ3ZHLHdCQUFELENBQVosQ0FGa0MsQ0FJbEM7O0FBQ0FBLGtDQUF3QixHQUFHaUUsVUFBVSxDQUFDLFlBQVc7QUFFaEQsZ0JBQUduRixJQUFJLENBQUNtRCxRQUFMLElBQWlCbkQsSUFBSSxDQUFDbUQsUUFBTCxDQUFjc0YsT0FBbEMsRUFBMkM7QUFFMUMsa0JBQUksQ0FBQ3pJLElBQUksQ0FBQzBJLG1CQUFMLEVBQUQsSUFBZ0MxSSxJQUFJLENBQUNtRCxRQUFMLENBQWN3RixHQUFkLElBQXFCLENBQUMzSSxJQUFJLENBQUNtRCxRQUFMLENBQWN3RixHQUFkLENBQWtCQyxZQUE1RSxFQUE2RjtBQUM1RjtBQUNBO0FBQ0FKLHVDQUF1QixDQUFDLEtBQUQsQ0FBdkIsQ0FINEYsQ0FJNUY7O0FBQ0E7QUFFRCxhQVRELE1BU087QUFDTkEscUNBQXVCLENBQUMsSUFBRCxDQUF2QixDQURNLENBQ3lCOztBQUMvQjtBQUVELFdBZm9DLEVBZWxDcEgsUUFBUSxDQUFDUSxxQkFmeUIsQ0FBckM7QUFpQkEsU0F0Qk0sQ0FBUDs7QUF1QkFiLGVBQU8sQ0FBQyxtQkFBRCxFQUFzQixVQUFTOEgsS0FBVCxFQUFnQi9HLElBQWhCLEVBQXNCO0FBQ2xELGNBQUc5QixJQUFJLENBQUNtRCxRQUFMLEtBQWtCckIsSUFBckIsRUFBMkI7QUFDMUIwRyxtQ0FBdUIsQ0FBQyxJQUFELENBQXZCO0FBQ0E7QUFDRCxTQUpNLENBQVA7QUFNQTtBQUNELEtBcE9GO0FBQUEsUUFxT0NBLHVCQUF1QixHQUFHLFVBQVNNLElBQVQsRUFBZTtBQUN4QyxVQUFJN0gsdUJBQXVCLEtBQUs2SCxJQUFoQyxFQUF1QztBQUN0Q3RELHdCQUFnQixDQUFDeEUsaUJBQUQsRUFBb0IsbUJBQXBCLEVBQXlDLENBQUM4SCxJQUExQyxDQUFoQjs7QUFDQTdILCtCQUF1QixHQUFHNkgsSUFBMUI7QUFDQTtBQUNELEtBMU9GO0FBQUEsUUEyT0NDLGdCQUFnQixHQUFHLFVBQVNqSCxJQUFULEVBQWU7QUFDakMsVUFBSWtILEdBQUcsR0FBR2xILElBQUksQ0FBQ21ILElBQWY7O0FBRUEsVUFBSTdELHNCQUFzQixFQUExQixFQUErQjtBQUU5QixZQUFJOEQsSUFBSSxHQUFHOUgsUUFBUSxDQUFDRSxRQUFwQjs7QUFDQSxZQUFHRixRQUFRLENBQUNXLFNBQVQsSUFBc0JtSCxJQUFJLENBQUMxSCxNQUFMLEtBQWdCLE1BQXpDLEVBQWlEO0FBQ2hELGNBQUcsQ0FBQ2hCLHFCQUFKLEVBQTJCO0FBQzFCQSxpQ0FBcUIsR0FBR1AsU0FBUyxDQUFDa0osUUFBVixDQUFtQixtQ0FBbkIsQ0FBeEI7O0FBQ0EzSSxpQ0FBcUIsQ0FBQzRJLFdBQXRCLENBQW1DbkosU0FBUyxDQUFDa0osUUFBVixDQUFtQix1QkFBbkIsQ0FBbkM7O0FBQ0E3SSxxQkFBUyxDQUFDK0ksWUFBVixDQUF1QjdJLHFCQUF2QixFQUE4Q0QsaUJBQTlDOztBQUNBTixxQkFBUyxDQUFDZ0csUUFBVixDQUFtQjNGLFNBQW5CLEVBQThCLGVBQTlCO0FBQ0E7O0FBQ0QsY0FBSWMsUUFBUSxDQUFDUyxnQkFBVCxDQUEwQkMsSUFBMUIsRUFBZ0N0QixxQkFBaEMsRUFBdUQsSUFBdkQsQ0FBSixFQUFtRTtBQUVsRSxnQkFBSThJLFdBQVcsR0FBRzlJLHFCQUFxQixDQUFDK0ksWUFBeEM7QUFDQVAsZUFBRyxDQUFDeEgsTUFBSixHQUFhZ0ksUUFBUSxDQUFDRixXQUFELEVBQWEsRUFBYixDQUFSLElBQTRCLEVBQXpDO0FBQ0EsV0FKRCxNQUlPO0FBQ05OLGVBQUcsQ0FBQ3hILE1BQUosR0FBYTBILElBQUksQ0FBQzNILEdBQWxCLENBRE0sQ0FDaUI7QUFDdkI7QUFDRCxTQWRELE1BY087QUFDTnlILGFBQUcsQ0FBQ3hILE1BQUosR0FBYTBILElBQUksQ0FBQzFILE1BQUwsS0FBZ0IsTUFBaEIsR0FBeUIsQ0FBekIsR0FBNkIwSCxJQUFJLENBQUMxSCxNQUEvQztBQUNBLFNBbkI2QixDQXFCOUI7OztBQUNBd0gsV0FBRyxDQUFDekgsR0FBSixHQUFVMkgsSUFBSSxDQUFDM0gsR0FBZjtBQUNBLE9BdkJELE1BdUJPO0FBQ055SCxXQUFHLENBQUN6SCxHQUFKLEdBQVV5SCxHQUFHLENBQUN4SCxNQUFKLEdBQWEsQ0FBdkI7QUFDQTtBQUNELEtBeFFGO0FBQUEsUUF5UUNpSSxVQUFVLEdBQUcsWUFBVztBQUN2QjtBQUNBLFVBQUdySSxRQUFRLENBQUNNLFVBQVosRUFBd0I7QUFDdkJYLGVBQU8sQ0FBQyxXQUFELEVBQWMsWUFBVztBQUUvQmQsbUJBQVMsQ0FBQ2lJLElBQVYsQ0FBZUMsUUFBZixFQUF5QixXQUF6QixFQUFzQ2pFLGdCQUF0QztBQUNBakUsbUJBQVMsQ0FBQ2lJLElBQVYsQ0FBZUMsUUFBZixFQUF5QixVQUF6QixFQUFxQ1IsbUJBQXJDO0FBRUFMLHVCQUFhLEdBQUdvQyxXQUFXLENBQUMsWUFBVztBQUN0Q2xDLDBCQUFjOztBQUNkLGdCQUFHQSxjQUFjLEtBQUssQ0FBdEIsRUFBeUI7QUFDeEJ0SCxnQkFBRSxDQUFDd0gsT0FBSCxDQUFXLElBQVg7QUFDQTtBQUNELFdBTDBCLEVBS3hCdEcsUUFBUSxDQUFDTSxVQUFULEdBQXNCLENBTEUsQ0FBM0I7QUFNQSxTQVhNLENBQVA7QUFZQTtBQUNELEtBelJGO0FBQUEsUUEwUkNpSSxrQ0FBa0MsR0FBRyxZQUFXO0FBRS9DO0FBQ0E1SSxhQUFPLENBQUMsZ0JBQUQsRUFBbUIsVUFBUzZJLEdBQVQsRUFBYztBQUN2QyxZQUFHeEosZ0JBQWdCLElBQUl3SixHQUFHLEdBQUcsSUFBN0IsRUFBbUM7QUFDbEMxSixZQUFFLENBQUMySixZQUFIO0FBQ0EsU0FGRCxNQUVPLElBQUcsQ0FBQ3pKLGdCQUFELElBQXFCd0osR0FBRyxJQUFJLElBQS9CLEVBQXFDO0FBQzNDMUosWUFBRSxDQUFDNEosWUFBSDtBQUNBO0FBQ0QsT0FOTSxDQUFQLENBSCtDLENBVy9DOzs7QUFDQSxVQUFJQyxtQkFBSjs7QUFDQWhKLGFBQU8sQ0FBQyxjQUFELEVBQWtCLFVBQVM2SSxHQUFULEVBQWM7QUFDdEMsWUFBR3hKLGdCQUFnQixJQUFJd0osR0FBRyxHQUFHLEdBQTdCLEVBQWtDO0FBQ2pDMUosWUFBRSxDQUFDMkosWUFBSDtBQUNBRSw2QkFBbUIsR0FBRyxJQUF0QjtBQUNBLFNBSEQsTUFHTyxJQUFHQSxtQkFBbUIsSUFBSSxDQUFDM0osZ0JBQXhCLElBQTRDd0osR0FBRyxHQUFHLEdBQXJELEVBQTBEO0FBQ2hFMUosWUFBRSxDQUFDNEosWUFBSDtBQUNBO0FBQ0QsT0FQTSxDQUFQOztBQVNBL0ksYUFBTyxDQUFDLGtCQUFELEVBQXFCLFlBQVc7QUFDdENnSiwyQkFBbUIsR0FBRyxLQUF0Qjs7QUFDQSxZQUFHQSxtQkFBbUIsSUFBSSxDQUFDM0osZ0JBQTNCLEVBQTZDO0FBQzVDRixZQUFFLENBQUM0SixZQUFIO0FBQ0E7QUFDRCxPQUxNLENBQVA7QUFPQSxLQXZURjs7QUEyVEEsUUFBSXBGLFdBQVcsR0FBRyxDQUNqQjtBQUNDSSxVQUFJLEVBQUUsU0FEUDtBQUVDa0YsWUFBTSxFQUFFLFdBRlQ7QUFHQ0MsWUFBTSxFQUFFLFVBQVN4RSxFQUFULEVBQWE7QUFDcEJsRix5QkFBaUIsR0FBR2tGLEVBQXBCO0FBQ0E7QUFMRixLQURpQixFQVFqQjtBQUNDWCxVQUFJLEVBQUUsYUFEUDtBQUVDa0YsWUFBTSxFQUFFLFNBRlQ7QUFHQ0MsWUFBTSxFQUFFLFVBQVN4RSxFQUFULEVBQWE7QUFDcEI5RSxtQkFBVyxHQUFHOEUsRUFBZDtBQUNBLE9BTEY7QUFNQ2IsV0FBSyxFQUFFLFlBQVc7QUFDakJvQix5QkFBaUI7QUFDakI7QUFSRixLQVJpQixFQWtCakI7QUFDQ2xCLFVBQUksRUFBRSxlQURQO0FBRUNrRixZQUFNLEVBQUUsU0FGVDtBQUdDQyxZQUFNLEVBQUUsVUFBU3hFLEVBQVQsRUFBYTtBQUNwQi9FLG9CQUFZLEdBQUcrRSxFQUFmO0FBQ0EsT0FMRjtBQU1DYixXQUFLLEVBQUUsWUFBVztBQUNqQm9CLHlCQUFpQjtBQUNqQjtBQVJGLEtBbEJpQixFQTRCakI7QUFDQ2xCLFVBQUksRUFBRSxjQURQO0FBRUNrRixZQUFNLEVBQUUsUUFGVDtBQUdDcEYsV0FBSyxFQUFFNUUsSUFBSSxDQUFDa0s7QUFIYixLQTVCaUIsRUFpQ2pCO0FBQ0NwRixVQUFJLEVBQUUsU0FEUDtBQUVDa0YsWUFBTSxFQUFFLFdBRlQ7QUFHQ0MsWUFBTSxFQUFFLFVBQVN4RSxFQUFULEVBQWE7QUFDcEJoRix1QkFBZSxHQUFHZ0YsRUFBbEI7QUFDQTtBQUxGLEtBakNpQixFQXdDakI7QUFDQ1gsVUFBSSxFQUFFLGVBRFA7QUFFQ2tGLFlBQU0sRUFBRSxTQUZUO0FBR0NwRixXQUFLLEVBQUU1RSxJQUFJLENBQUNtSztBQUhiLEtBeENpQixFQTZDakI7QUFDQ3JGLFVBQUksRUFBRSxxQkFEUDtBQUVDa0YsWUFBTSxFQUFFLFNBRlQ7QUFHQ3BGLFdBQUssRUFBRTVFLElBQUksQ0FBQ29LO0FBSGIsS0E3Q2lCLEVBa0RqQjtBQUNDdEYsVUFBSSxFQUFFLHNCQURQO0FBRUNrRixZQUFNLEVBQUUsU0FGVDtBQUdDcEYsV0FBSyxFQUFFNUUsSUFBSSxDQUFDcUs7QUFIYixLQWxEaUIsRUF1RGpCO0FBQ0N2RixVQUFJLEVBQUUsWUFEUDtBQUVDa0YsWUFBTSxFQUFFLGNBRlQ7QUFHQ3BGLFdBQUssRUFBRSxZQUFXO0FBQ2pCLFlBQUd2RSxhQUFhLENBQUNpSyxZQUFkLEVBQUgsRUFBaUM7QUFDaENqSyx1QkFBYSxDQUFDa0ssSUFBZDtBQUNBLFNBRkQsTUFFTztBQUNObEssdUJBQWEsQ0FBQ21LLEtBQWQ7QUFDQTtBQUNEO0FBVEYsS0F2RGlCLEVBa0VqQjtBQUNDMUYsVUFBSSxFQUFFLFdBRFA7QUFFQ2tGLFlBQU0sRUFBRSxhQUZUO0FBR0NDLFlBQU0sRUFBRSxVQUFTeEUsRUFBVCxFQUFhO0FBQ3BCekUseUJBQWlCLEdBQUd5RSxFQUFwQjtBQUNBO0FBTEYsS0FsRWlCLENBQWxCOztBQTRFQSxRQUFJZ0YsZ0JBQWdCLEdBQUcsWUFBVztBQUNqQyxVQUFJM0ksSUFBSixFQUNDNEksU0FERCxFQUVDckcsU0FGRDs7QUFJQSxVQUFJc0csd0JBQXdCLEdBQUcsVUFBU0MsU0FBVCxFQUFvQjtBQUNsRCxZQUFHLENBQUNBLFNBQUosRUFBZTtBQUNkO0FBQ0E7O0FBRUQsWUFBSUMsQ0FBQyxHQUFHRCxTQUFTLENBQUNqRyxNQUFsQjs7QUFDQSxhQUFJLElBQUlGLENBQUMsR0FBRyxDQUFaLEVBQWVBLENBQUMsR0FBR29HLENBQW5CLEVBQXNCcEcsQ0FBQyxFQUF2QixFQUEyQjtBQUMxQjNDLGNBQUksR0FBRzhJLFNBQVMsQ0FBQ25HLENBQUQsQ0FBaEI7QUFDQWlHLG1CQUFTLEdBQUc1SSxJQUFJLENBQUNnSixTQUFqQjs7QUFFQSxlQUFJLElBQUlDLENBQUMsR0FBRyxDQUFaLEVBQWVBLENBQUMsR0FBR3JHLFdBQVcsQ0FBQ0MsTUFBL0IsRUFBdUNvRyxDQUFDLEVBQXhDLEVBQTRDO0FBQzNDMUcscUJBQVMsR0FBR0ssV0FBVyxDQUFDcUcsQ0FBRCxDQUF2Qjs7QUFFQSxnQkFBR0wsU0FBUyxDQUFDN0YsT0FBVixDQUFrQixXQUFXUixTQUFTLENBQUNTLElBQXZDLElBQStDLENBQUMsQ0FBbkQsRUFBd0Q7QUFFdkQsa0JBQUkxRCxRQUFRLENBQUNpRCxTQUFTLENBQUMyRixNQUFYLENBQVosRUFBaUM7QUFBRTtBQUVsQy9KLHlCQUFTLENBQUNpRyxXQUFWLENBQXNCcEUsSUFBdEIsRUFBNEIseUJBQTVCOztBQUNBLG9CQUFHdUMsU0FBUyxDQUFDNEYsTUFBYixFQUFxQjtBQUNwQjVGLDJCQUFTLENBQUM0RixNQUFWLENBQWlCbkksSUFBakI7QUFDQSxpQkFMK0IsQ0FPaEM7O0FBQ0EsZUFSRCxNQVFPO0FBQ043Qix5QkFBUyxDQUFDZ0csUUFBVixDQUFtQm5FLElBQW5CLEVBQXlCLHlCQUF6QixFQURNLENBRU47QUFDQTtBQUNEO0FBQ0Q7QUFDRDtBQUNELE9BOUJEOztBQStCQTZJLDhCQUF3QixDQUFDckssU0FBUyxDQUFDMkIsUUFBWCxDQUF4QjtBQUVBLFVBQUkrSSxNQUFNLEdBQUkvSyxTQUFTLENBQUNnTCxlQUFWLENBQTBCM0ssU0FBMUIsRUFBcUMsZUFBckMsQ0FBZDs7QUFDQSxVQUFHMEssTUFBSCxFQUFXO0FBQ1ZMLGdDQUF3QixDQUFFSyxNQUFNLENBQUMvSSxRQUFULENBQXhCO0FBQ0E7QUFDRCxLQTFDRDs7QUErQ0EvQixNQUFFLENBQUNnTCxJQUFILEdBQVUsWUFBVztBQUVwQjtBQUNBakwsZUFBUyxDQUFDa0wsTUFBVixDQUFpQm5MLElBQUksQ0FBQ29MLE9BQXRCLEVBQStCL0osaUJBQS9CLEVBQWtELElBQWxELEVBSG9CLENBS3BCOztBQUNBRCxjQUFRLEdBQUdwQixJQUFJLENBQUNvTCxPQUFoQixDQU5vQixDQVFwQjs7QUFDQTlLLGVBQVMsR0FBR0wsU0FBUyxDQUFDZ0wsZUFBVixDQUEwQmpMLElBQUksQ0FBQ3FMLFVBQS9CLEVBQTJDLFVBQTNDLENBQVosQ0FUb0IsQ0FXcEI7O0FBQ0F0SyxhQUFPLEdBQUdmLElBQUksQ0FBQ3NMLE1BQWY7O0FBR0EzQix3Q0FBa0MsR0FmZCxDQWlCcEI7OztBQUNBNUksYUFBTyxDQUFDLGNBQUQsRUFBaUJiLEVBQUUsQ0FBQ3FMLE1BQXBCLENBQVAsQ0FsQm9CLENBb0JwQjs7O0FBQ0F4SyxhQUFPLENBQUMsV0FBRCxFQUFjLFVBQVN5SyxLQUFULEVBQWdCO0FBQ3BDLFlBQUlDLGdCQUFnQixHQUFHekwsSUFBSSxDQUFDbUQsUUFBTCxDQUFjc0ksZ0JBQXJDOztBQUNBLFlBQUd6TCxJQUFJLENBQUMwTCxZQUFMLE9BQXdCRCxnQkFBM0IsRUFBNkM7QUFDNUN6TCxjQUFJLENBQUMyTCxNQUFMLENBQVlGLGdCQUFaLEVBQThCRCxLQUE5QixFQUFxQyxHQUFyQztBQUNBLFNBRkQsTUFFTztBQUNOeEwsY0FBSSxDQUFDMkwsTUFBTCxDQUFZdkssUUFBUSxDQUFDd0ssZ0JBQVQsQ0FBMEIsS0FBMUIsRUFBaUM1TCxJQUFJLENBQUNtRCxRQUF0QyxDQUFaLEVBQTZEcUksS0FBN0QsRUFBb0UsR0FBcEU7QUFDQTtBQUNELE9BUE0sQ0FBUCxDQXJCb0IsQ0E4QnBCOzs7QUFDQXpLLGFBQU8sQ0FBQyxrQkFBRCxFQUFxQixVQUFTZ0QsQ0FBVCxFQUFZOEgsTUFBWixFQUFvQkMsVUFBcEIsRUFBZ0M7QUFDM0QsWUFBSUMsQ0FBQyxHQUFHaEksQ0FBQyxDQUFDSSxNQUFGLElBQVlKLENBQUMsQ0FBQ0ssVUFBdEI7O0FBQ0EsWUFDQzJILENBQUMsSUFDREEsQ0FBQyxDQUFDeEgsWUFBRixDQUFlLE9BQWYsQ0FEQSxJQUMyQlIsQ0FBQyxDQUFDaUksSUFBRixDQUFPbkgsT0FBUCxDQUFlLE9BQWYsSUFBMEIsQ0FBQyxDQUR0RCxLQUVFa0gsQ0FBQyxDQUFDeEgsWUFBRixDQUFlLE9BQWYsRUFBd0JNLE9BQXhCLENBQWdDLFdBQWhDLElBQStDLENBQS9DLElBQXFELG9CQUFELENBQXVCb0gsSUFBdkIsQ0FBNEJGLENBQUMsQ0FBQ0csT0FBOUIsQ0FGdEQsQ0FERCxFQUlFO0FBQ0RKLG9CQUFVLENBQUNLLE9BQVgsR0FBcUIsS0FBckI7QUFDQTtBQUNELE9BVE0sQ0FBUCxDQS9Cb0IsQ0EwQ3BCOzs7QUFDQXBMLGFBQU8sQ0FBQyxZQUFELEVBQWUsWUFBVztBQUNoQ2QsaUJBQVMsQ0FBQ2lJLElBQVYsQ0FBZTVILFNBQWYsRUFBMEIsZUFBMUIsRUFBMkN3RCxjQUEzQztBQUNBN0QsaUJBQVMsQ0FBQ2lJLElBQVYsQ0FBZWxJLElBQUksQ0FBQ3FMLFVBQXBCLEVBQWdDLFNBQWhDLEVBQTJDbkwsRUFBRSxDQUFDa00sV0FBOUM7O0FBRUEsWUFBRyxDQUFDcE0sSUFBSSxDQUFDcUYsaUJBQVQsRUFBNEI7QUFDM0JwRixtQkFBUyxDQUFDaUksSUFBVixDQUFlbEksSUFBSSxDQUFDcUwsVUFBcEIsRUFBZ0MsV0FBaEMsRUFBNkNuTCxFQUFFLENBQUNtTSxXQUFoRDtBQUNBO0FBQ0QsT0FQTSxDQUFQLENBM0NvQixDQW9EcEI7OztBQUNBdEwsYUFBTyxDQUFDLGNBQUQsRUFBaUIsWUFBVztBQUNsQyxZQUFHLENBQUNILGlCQUFKLEVBQXVCO0FBQ3RCb0YsMkJBQWlCO0FBQ2pCOztBQUVELFlBQUdzQixhQUFILEVBQWtCO0FBQ2pCZ0YsdUJBQWEsQ0FBQ2hGLGFBQUQsQ0FBYjtBQUNBOztBQUNEckgsaUJBQVMsQ0FBQ3NNLE1BQVYsQ0FBaUJwRSxRQUFqQixFQUEyQixVQUEzQixFQUF1Q1IsbUJBQXZDO0FBQ0ExSCxpQkFBUyxDQUFDc00sTUFBVixDQUFpQnBFLFFBQWpCLEVBQTJCLFdBQTNCLEVBQXdDakUsZ0JBQXhDO0FBQ0FqRSxpQkFBUyxDQUFDc00sTUFBVixDQUFpQmpNLFNBQWpCLEVBQTRCLGVBQTVCLEVBQTZDd0QsY0FBN0M7QUFDQTdELGlCQUFTLENBQUNzTSxNQUFWLENBQWlCdk0sSUFBSSxDQUFDcUwsVUFBdEIsRUFBa0MsU0FBbEMsRUFBNkNuTCxFQUFFLENBQUNrTSxXQUFoRDtBQUNBbk0saUJBQVMsQ0FBQ3NNLE1BQVYsQ0FBaUJ2TSxJQUFJLENBQUNxTCxVQUF0QixFQUFrQyxXQUFsQyxFQUErQ25MLEVBQUUsQ0FBQ21NLFdBQWxEOztBQUVBLFlBQUdoTSxhQUFILEVBQWtCO0FBQ2pCSixtQkFBUyxDQUFDc00sTUFBVixDQUFpQnBFLFFBQWpCLEVBQTJCOUgsYUFBYSxDQUFDK0gsTUFBekMsRUFBaURsSSxFQUFFLENBQUNtSSxnQkFBcEQ7O0FBQ0EsY0FBR2hJLGFBQWEsQ0FBQ2lLLFlBQWQsRUFBSCxFQUFpQztBQUNoQ2xKLG9CQUFRLENBQUNvTCxxQkFBVCxHQUFpQyxDQUFqQzs7QUFDQW5NLHlCQUFhLENBQUNrSyxJQUFkO0FBQ0E7O0FBQ0RsSyx1QkFBYSxHQUFHLElBQWhCO0FBQ0E7QUFDRCxPQXRCTSxDQUFQLENBckRvQixDQThFcEI7OztBQUNBVSxhQUFPLENBQUMsU0FBRCxFQUFZLFlBQVc7QUFDN0IsWUFBR0ssUUFBUSxDQUFDVyxTQUFaLEVBQXVCO0FBQ3RCLGNBQUd2QixxQkFBSCxFQUEwQjtBQUN6QkYscUJBQVMsQ0FBQ21NLFdBQVYsQ0FBc0JqTSxxQkFBdEI7QUFDQTs7QUFDRFAsbUJBQVMsQ0FBQ2lHLFdBQVYsQ0FBc0IzRixpQkFBdEIsRUFBeUMsc0JBQXpDO0FBQ0E7O0FBRUQsWUFBR0ksV0FBSCxFQUFnQjtBQUNmQSxxQkFBVyxDQUFDc0IsUUFBWixDQUFxQixDQUFyQixFQUF3QmtGLE9BQXhCLEdBQWtDLElBQWxDO0FBQ0E7O0FBQ0RsSCxpQkFBUyxDQUFDaUcsV0FBVixDQUFzQjVGLFNBQXRCLEVBQWlDLHNCQUFqQztBQUNBTCxpQkFBUyxDQUFDZ0csUUFBVixDQUFvQjNGLFNBQXBCLEVBQStCLGtCQUEvQjtBQUNBSixVQUFFLENBQUN3SCxPQUFILENBQVcsS0FBWDtBQUNBLE9BZE0sQ0FBUDs7QUFpQkEsVUFBRyxDQUFDdEcsUUFBUSxDQUFDc0wscUJBQWIsRUFBb0M7QUFDbkN6TSxpQkFBUyxDQUFDaUcsV0FBVixDQUF1QjVGLFNBQXZCLEVBQWtDLGtCQUFsQztBQUNBOztBQUNEUyxhQUFPLENBQUMsZUFBRCxFQUFrQixZQUFXO0FBQ25DLFlBQUdLLFFBQVEsQ0FBQ3NMLHFCQUFaLEVBQW1DO0FBQ2xDek0sbUJBQVMsQ0FBQ2lHLFdBQVYsQ0FBdUI1RixTQUF2QixFQUFrQyxrQkFBbEM7QUFDQTtBQUNELE9BSk0sQ0FBUDs7QUFLQVMsYUFBTyxDQUFDLGdCQUFELEVBQW1CLFlBQVc7QUFDcENkLGlCQUFTLENBQUNnRyxRQUFWLENBQW9CM0YsU0FBcEIsRUFBK0Isa0JBQS9CO0FBQ0EsT0FGTSxDQUFQOztBQUlBUyxhQUFPLENBQUMscUJBQUQsRUFBd0JnSSxnQkFBeEIsQ0FBUDs7QUFFQTBCLHNCQUFnQjs7QUFFaEIsVUFBR3JKLFFBQVEsQ0FBQ2tCLE9BQVQsSUFBb0I1QixZQUFwQixJQUFvQ0MsV0FBdkMsRUFBb0Q7QUFDbkRDLHlCQUFpQixHQUFHLElBQXBCO0FBQ0E7O0FBRURnRixvQkFBYzs7QUFFZDZELGdCQUFVOztBQUVWekIseUJBQW1COztBQUVuQk8sNEJBQXNCO0FBQ3RCLEtBM0hEOztBQTZIQXJJLE1BQUUsQ0FBQ3dILE9BQUgsR0FBYSxVQUFTaUYsTUFBVCxFQUFpQjtBQUM3QjdMLGFBQU8sR0FBRzZMLE1BQVY7O0FBQ0FuSCxzQkFBZ0IsQ0FBQ2xGLFNBQUQsRUFBWSxVQUFaLEVBQXdCcU0sTUFBeEIsQ0FBaEI7QUFDQSxLQUhEOztBQUtBek0sTUFBRSxDQUFDcUwsTUFBSCxHQUFZLFlBQVc7QUFDdEI7QUFDQSxVQUFHbkwsZ0JBQWdCLElBQUlKLElBQUksQ0FBQ21ELFFBQTVCLEVBQXNDO0FBRXJDakQsVUFBRSxDQUFDME0sb0JBQUg7O0FBRUEsWUFBR3hMLFFBQVEsQ0FBQ1csU0FBWixFQUF1QjtBQUN0Qlgsa0JBQVEsQ0FBQ1MsZ0JBQVQsQ0FBMEI3QixJQUFJLENBQUNtRCxRQUEvQixFQUF5QzVDLGlCQUF6Qzs7QUFFQWlGLDBCQUFnQixDQUFDakYsaUJBQUQsRUFBb0IsZ0JBQXBCLEVBQXNDLENBQUNQLElBQUksQ0FBQ21ELFFBQUwsQ0FBY25CLEtBQXJELENBQWhCO0FBQ0E7O0FBRUQ3Qix5QkFBaUIsR0FBRyxJQUFwQjtBQUVBLE9BWkQsTUFZTztBQUNOQSx5QkFBaUIsR0FBRyxLQUFwQjtBQUNBOztBQUVELFVBQUcsQ0FBQ1MsaUJBQUosRUFBdUI7QUFDdEJvRix5QkFBaUI7QUFDakI7O0FBRURKLG9CQUFjO0FBQ2QsS0F2QkQ7O0FBeUJBMUYsTUFBRSxDQUFDbUksZ0JBQUgsR0FBc0IsVUFBU3RFLENBQVQsRUFBWTtBQUVqQyxVQUFHQSxDQUFILEVBQU07QUFDTDtBQUNBO0FBQ0FvQixrQkFBVSxDQUFDLFlBQVc7QUFDckJuRixjQUFJLENBQUM2TSxlQUFMLENBQXNCLENBQXRCLEVBQXlCNU0sU0FBUyxDQUFDNk0sVUFBVixFQUF6QjtBQUNBLFNBRlMsRUFFUCxFQUZPLENBQVY7QUFHQSxPQVJnQyxDQVVqQzs7O0FBQ0E3TSxlQUFTLENBQUUsQ0FBQ0ksYUFBYSxDQUFDaUssWUFBZCxLQUErQixLQUEvQixHQUF1QyxRQUF4QyxJQUFvRCxPQUF0RCxDQUFULENBQXlFdEssSUFBSSxDQUFDc0ksUUFBOUUsRUFBd0YsVUFBeEY7QUFDQSxLQVpEOztBQWNBcEksTUFBRSxDQUFDME0sb0JBQUgsR0FBMEIsWUFBVztBQUNwQyxVQUFHeEwsUUFBUSxDQUFDbUIsU0FBWixFQUF1QjtBQUN0QjlCLHVCQUFlLENBQUN5QixTQUFoQixHQUE2QmxDLElBQUksQ0FBQytNLGVBQUwsS0FBdUIsQ0FBeEIsR0FDckIzTCxRQUFRLENBQUNzQyxpQkFEWSxHQUVyQnRDLFFBQVEsQ0FBQzBFLGFBQVQsRUFGUDtBQUdBO0FBQ0QsS0FORDs7QUFRQTVGLE1BQUUsQ0FBQ2tNLFdBQUgsR0FBaUIsVUFBU3JJLENBQVQsRUFBWTtBQUM1QkEsT0FBQyxHQUFHQSxDQUFDLElBQUlULE1BQU0sQ0FBQ1UsS0FBaEI7QUFDQSxVQUFJRyxNQUFNLEdBQUdKLENBQUMsQ0FBQ0ksTUFBRixJQUFZSixDQUFDLENBQUNLLFVBQTNCOztBQUVBLFVBQUdSLGlCQUFILEVBQXNCO0FBQ3JCO0FBQ0E7O0FBRUQsVUFBR0csQ0FBQyxDQUFDaUosTUFBRixJQUFZakosQ0FBQyxDQUFDaUosTUFBRixDQUFTQyxXQUFULEtBQXlCLE9BQXhDLEVBQWlEO0FBRWhEO0FBQ0EsWUFBRzdGLGNBQWMsQ0FBQ2pELE1BQUQsQ0FBakIsRUFBMkI7QUFDMUJuRSxjQUFJLENBQUNtSyxLQUFMO0FBQ0E7QUFDQTs7QUFFRCxZQUFHbEssU0FBUyxDQUFDb0gsUUFBVixDQUFtQmxELE1BQW5CLEVBQTJCLFdBQTNCLENBQUgsRUFBNEM7QUFDM0MsY0FBR25FLElBQUksQ0FBQzBMLFlBQUwsT0FBd0IsQ0FBeEIsSUFBNkIxTCxJQUFJLENBQUMwTCxZQUFMLE1BQXVCMUwsSUFBSSxDQUFDbUQsUUFBTCxDQUFjK0osUUFBckUsRUFBK0U7QUFDOUUsZ0JBQUc5TCxRQUFRLENBQUN3Qix1QkFBWixFQUFxQztBQUNwQzVDLGtCQUFJLENBQUNtSyxLQUFMO0FBQ0E7QUFDRCxXQUpELE1BSU87QUFDTm5LLGdCQUFJLENBQUNrSyxpQkFBTCxDQUF1Qm5HLENBQUMsQ0FBQ2lKLE1BQUYsQ0FBU0csWUFBaEM7QUFDQTtBQUNEO0FBRUQsT0FsQkQsTUFrQk87QUFFTjtBQUNBLFlBQUcvTCxRQUFRLENBQUN1QixtQkFBWixFQUFpQztBQUNoQyxjQUFHdkMsZ0JBQUgsRUFBcUI7QUFDcEJGLGNBQUUsQ0FBQzJKLFlBQUg7QUFDQSxXQUZELE1BRU87QUFDTjNKLGNBQUUsQ0FBQzRKLFlBQUg7QUFDQTtBQUNELFNBVEssQ0FXTjs7O0FBQ0EsWUFBRzFJLFFBQVEsQ0FBQ3NCLFVBQVQsS0FBd0J6QyxTQUFTLENBQUNvSCxRQUFWLENBQW1CbEQsTUFBbkIsRUFBMkIsV0FBM0IsS0FBMkNpRCxjQUFjLENBQUNqRCxNQUFELENBQWpGLENBQUgsRUFBZ0c7QUFDL0ZuRSxjQUFJLENBQUNtSyxLQUFMO0FBQ0E7QUFDQTtBQUVEO0FBQ0QsS0E1Q0Q7O0FBNkNBakssTUFBRSxDQUFDbU0sV0FBSCxHQUFpQixVQUFTdEksQ0FBVCxFQUFZO0FBQzVCQSxPQUFDLEdBQUdBLENBQUMsSUFBSVQsTUFBTSxDQUFDVSxLQUFoQjtBQUNBLFVBQUlHLE1BQU0sR0FBR0osQ0FBQyxDQUFDSSxNQUFGLElBQVlKLENBQUMsQ0FBQ0ssVUFBM0IsQ0FGNEIsQ0FJNUI7O0FBQ0FvQixzQkFBZ0IsQ0FBQ2xGLFNBQUQsRUFBWSxnQkFBWixFQUE4QjhHLGNBQWMsQ0FBQ2pELE1BQUQsQ0FBNUMsQ0FBaEI7QUFDQSxLQU5EOztBQVFBakUsTUFBRSxDQUFDMkosWUFBSCxHQUFrQixZQUFXO0FBQzVCNUosZUFBUyxDQUFDZ0csUUFBVixDQUFtQjNGLFNBQW5CLEVBQTZCLGtCQUE3QjtBQUNBRixzQkFBZ0IsR0FBRyxLQUFuQjtBQUNBLEtBSEQ7O0FBS0FGLE1BQUUsQ0FBQzRKLFlBQUgsR0FBa0IsWUFBVztBQUM1QjFKLHNCQUFnQixHQUFHLElBQW5COztBQUNBLFVBQUcsQ0FBQ0QsaUJBQUosRUFBdUI7QUFDdEJELFVBQUUsQ0FBQ3FMLE1BQUg7QUFDQTs7QUFDRHRMLGVBQVMsQ0FBQ2lHLFdBQVYsQ0FBc0I1RixTQUF0QixFQUFnQyxrQkFBaEM7QUFDQSxLQU5EOztBQVFBSixNQUFFLENBQUNrTixrQkFBSCxHQUF3QixZQUFXO0FBQ2xDLFVBQUlDLENBQUMsR0FBR2xGLFFBQVI7QUFDQSxhQUFPLENBQUMsRUFBRWtGLENBQUMsQ0FBQ0MsY0FBRixJQUFvQkQsQ0FBQyxDQUFDRSxtQkFBdEIsSUFBNkNGLENBQUMsQ0FBQ0csb0JBQS9DLElBQXVFSCxDQUFDLENBQUNJLGdCQUEzRSxDQUFSO0FBQ0EsS0FIRDs7QUFLQXZOLE1BQUUsQ0FBQytILGdCQUFILEdBQXNCLFlBQVc7QUFDaEMsVUFBSXlGLEVBQUUsR0FBR3ZGLFFBQVEsQ0FBQ3dGLGVBQWxCO0FBQUEsVUFDQ0MsR0FERDtBQUFBLFVBRUNDLEVBQUUsR0FBRyxrQkFGTjs7QUFJQSxVQUFJSCxFQUFFLENBQUNJLGlCQUFQLEVBQTBCO0FBQ3pCRixXQUFHLEdBQUc7QUFDTEcsZ0JBQU0sRUFBRSxtQkFESDtBQUVMQyxlQUFLLEVBQUUsZ0JBRkY7QUFHTEMsa0JBQVEsRUFBRSxtQkFITDtBQUlMN0YsZ0JBQU0sRUFBRXlGO0FBSkgsU0FBTjtBQU9BLE9BUkQsTUFRTyxJQUFHSCxFQUFFLENBQUNRLG9CQUFOLEVBQTZCO0FBQ25DTixXQUFHLEdBQUc7QUFDTEcsZ0JBQU0sRUFBRSxzQkFESDtBQUVMQyxlQUFLLEVBQUUscUJBRkY7QUFHTEMsa0JBQVEsRUFBRSxzQkFITDtBQUlMN0YsZ0JBQU0sRUFBRSxRQUFReUY7QUFKWCxTQUFOO0FBU0EsT0FWTSxNQVVBLElBQUdILEVBQUUsQ0FBQ1MsdUJBQU4sRUFBK0I7QUFDckNQLFdBQUcsR0FBRztBQUNMRyxnQkFBTSxFQUFFLHlCQURIO0FBRUxDLGVBQUssRUFBRSxzQkFGRjtBQUdMQyxrQkFBUSxFQUFFLHlCQUhMO0FBSUw3RixnQkFBTSxFQUFFLFdBQVd5RjtBQUpkLFNBQU47QUFPQSxPQVJNLE1BUUEsSUFBR0gsRUFBRSxDQUFDVSxtQkFBTixFQUEyQjtBQUNqQ1IsV0FBRyxHQUFHO0FBQ0xHLGdCQUFNLEVBQUUscUJBREg7QUFFTEMsZUFBSyxFQUFFLGtCQUZGO0FBR0xDLGtCQUFRLEVBQUUscUJBSEw7QUFJTDdGLGdCQUFNLEVBQUU7QUFKSCxTQUFOO0FBTUE7O0FBRUQsVUFBR3dGLEdBQUgsRUFBUTtBQUNQQSxXQUFHLENBQUNwRCxLQUFKLEdBQVksWUFBVztBQUN0QjtBQUNBM0osbUNBQXlCLEdBQUdPLFFBQVEsQ0FBQ2lOLGFBQXJDO0FBQ0FqTixrQkFBUSxDQUFDaU4sYUFBVCxHQUF5QixLQUF6Qjs7QUFFQSxjQUFHLEtBQUtOLE1BQUwsS0FBZ0IseUJBQW5CLEVBQThDO0FBQzdDL04sZ0JBQUksQ0FBQ3NJLFFBQUwsQ0FBYyxLQUFLeUYsTUFBbkIsRUFBNEJPLE9BQU8sQ0FBQ0Msb0JBQXBDO0FBQ0EsV0FGRCxNQUVPO0FBQ04sbUJBQU92TyxJQUFJLENBQUNzSSxRQUFMLENBQWMsS0FBS3lGLE1BQW5CLEdBQVA7QUFDQTtBQUNELFNBVkQ7O0FBV0FILFdBQUcsQ0FBQ3JELElBQUosR0FBVyxZQUFXO0FBQ3JCbkosa0JBQVEsQ0FBQ2lOLGFBQVQsR0FBeUJ4Tix5QkFBekI7QUFFQSxpQkFBT3NILFFBQVEsQ0FBQyxLQUFLNkYsS0FBTixDQUFSLEVBQVA7QUFFQSxTQUxEOztBQU1BSixXQUFHLENBQUN0RCxZQUFKLEdBQW1CLFlBQVc7QUFBRSxpQkFBT25DLFFBQVEsQ0FBQyxLQUFLOEYsUUFBTixDQUFmO0FBQWlDLFNBQWpFO0FBQ0E7O0FBRUQsYUFBT0wsR0FBUDtBQUNBLEtBOUREO0FBa0VBLEdBajBCRDs7QUFrMEJBLFNBQU83TixvQkFBUDtBQUdDLENBbjFCRCIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohIFBob3RvU3dpcGUgRGVmYXVsdCBVSSAtIDQuMS4zIC0gMjAxOS0wMS0wOFxuKiBodHRwOi8vcGhvdG9zd2lwZS5jb21cbiogQ29weXJpZ2h0IChjKSAyMDE5IERtaXRyeSBTZW1lbm92OyAqL1xuLyoqXG4qXG4qIFVJIG9uIHRvcCBvZiBtYWluIHNsaWRpbmcgYXJlYSAoY2FwdGlvbiwgYXJyb3dzLCBjbG9zZSBidXR0b24sIGV0Yy4pLlxuKiBCdWlsdCBqdXN0IHVzaW5nIHB1YmxpYyBtZXRob2RzL3Byb3BlcnRpZXMgb2YgUGhvdG9Td2lwZS5cbiogXG4qL1xuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7IFxuXHRpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0ZGVmaW5lKGZhY3RvcnkpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHR9IGVsc2Uge1xuXHRcdHJvb3QuUGhvdG9Td2lwZVVJX0RlZmF1bHQgPSBmYWN0b3J5KCk7XG5cdH1cbn0pKHRoaXMsIGZ1bmN0aW9uICgpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblxuXG52YXIgUGhvdG9Td2lwZVVJX0RlZmF1bHQgPVxuIGZ1bmN0aW9uKHBzd3AsIGZyYW1ld29yaykge1xuXG5cdHZhciB1aSA9IHRoaXM7XG5cdHZhciBfb3ZlcmxheVVJVXBkYXRlZCA9IGZhbHNlLFxuXHRcdF9jb250cm9sc1Zpc2libGUgPSB0cnVlLFxuXHRcdF9mdWxsc2NyZW5BUEksXG5cdFx0X2NvbnRyb2xzLFxuXHRcdF9jYXB0aW9uQ29udGFpbmVyLFxuXHRcdF9mYWtlQ2FwdGlvbkNvbnRhaW5lcixcblx0XHRfaW5kZXhJbmRpY2F0b3IsXG5cdFx0X3NoYXJlQnV0dG9uLFxuXHRcdF9zaGFyZU1vZGFsLFxuXHRcdF9zaGFyZU1vZGFsSGlkZGVuID0gdHJ1ZSxcblx0XHRfaW5pdGFsQ2xvc2VPblNjcm9sbFZhbHVlLFxuXHRcdF9pc0lkbGUsXG5cdFx0X2xpc3RlbixcblxuXHRcdF9sb2FkaW5nSW5kaWNhdG9yLFxuXHRcdF9sb2FkaW5nSW5kaWNhdG9ySGlkZGVuLFxuXHRcdF9sb2FkaW5nSW5kaWNhdG9yVGltZW91dCxcblxuXHRcdF9nYWxsZXJ5SGFzT25lU2xpZGUsXG5cblx0XHRfb3B0aW9ucyxcblx0XHRfZGVmYXVsdFVJT3B0aW9ucyA9IHtcblx0XHRcdGJhcnNTaXplOiB7dG9wOjQ0LCBib3R0b206J2F1dG8nfSxcblx0XHRcdGNsb3NlRWxDbGFzc2VzOiBbJ2l0ZW0nLCAnY2FwdGlvbicsICd6b29tLXdyYXAnLCAndWknLCAndG9wLWJhciddLCBcblx0XHRcdHRpbWVUb0lkbGU6IDQwMDAsIFxuXHRcdFx0dGltZVRvSWRsZU91dHNpZGU6IDEwMDAsXG5cdFx0XHRsb2FkaW5nSW5kaWNhdG9yRGVsYXk6IDEwMDAsIC8vIDJzXG5cdFx0XHRcblx0XHRcdGFkZENhcHRpb25IVE1MRm46IGZ1bmN0aW9uKGl0ZW0sIGNhcHRpb25FbCAvKiwgaXNGYWtlICovKSB7XG5cdFx0XHRcdGlmKCFpdGVtLnRpdGxlKSB7XG5cdFx0XHRcdFx0Y2FwdGlvbkVsLmNoaWxkcmVuWzBdLmlubmVySFRNTCA9ICcnO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjYXB0aW9uRWwuY2hpbGRyZW5bMF0uaW5uZXJIVE1MID0gaXRlbS50aXRsZTtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9LFxuXG5cdFx0XHRjbG9zZUVsOnRydWUsXG5cdFx0XHRjYXB0aW9uRWw6IHRydWUsXG5cdFx0XHRmdWxsc2NyZWVuRWw6IHRydWUsXG5cdFx0XHR6b29tRWw6IHRydWUsXG5cdFx0XHRzaGFyZUVsOiB0cnVlLFxuXHRcdFx0Y291bnRlckVsOiB0cnVlLFxuXHRcdFx0YXJyb3dFbDogdHJ1ZSxcblx0XHRcdHByZWxvYWRlckVsOiB0cnVlLFxuXG5cdFx0XHR0YXBUb0Nsb3NlOiBmYWxzZSxcblx0XHRcdHRhcFRvVG9nZ2xlQ29udHJvbHM6IHRydWUsXG5cblx0XHRcdGNsaWNrVG9DbG9zZU5vblpvb21hYmxlOiB0cnVlLFxuXG5cdFx0XHRzaGFyZUJ1dHRvbnM6IFtcblx0XHRcdFx0e2lkOidmYWNlYm9vaycsIGxhYmVsOidTaGFyZSBvbiBGYWNlYm9vaycsIHVybDonaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3NoYXJlci9zaGFyZXIucGhwP3U9e3t1cmx9fSd9LFxuXHRcdFx0XHR7aWQ6J3R3aXR0ZXInLCBsYWJlbDonVHdlZXQnLCB1cmw6J2h0dHBzOi8vdHdpdHRlci5jb20vaW50ZW50L3R3ZWV0P3RleHQ9e3t0ZXh0fX0mdXJsPXt7dXJsfX0nfSxcblx0XHRcdFx0e2lkOidwaW50ZXJlc3QnLCBsYWJlbDonUGluIGl0JywgdXJsOidodHRwOi8vd3d3LnBpbnRlcmVzdC5jb20vcGluL2NyZWF0ZS9idXR0b24vJytcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Jz91cmw9e3t1cmx9fSZtZWRpYT17e2ltYWdlX3VybH19JmRlc2NyaXB0aW9uPXt7dGV4dH19J30sXG5cdFx0XHRcdHtpZDonZG93bmxvYWQnLCBsYWJlbDonRG93bmxvYWQgaW1hZ2UnLCB1cmw6J3t7cmF3X2ltYWdlX3VybH19JywgZG93bmxvYWQ6dHJ1ZX1cblx0XHRcdF0sXG5cdFx0XHRnZXRJbWFnZVVSTEZvclNoYXJlOiBmdW5jdGlvbiggLyogc2hhcmVCdXR0b25EYXRhICovICkge1xuXHRcdFx0XHRyZXR1cm4gcHN3cC5jdXJySXRlbS5zcmMgfHwgJyc7XG5cdFx0XHR9LFxuXHRcdFx0Z2V0UGFnZVVSTEZvclNoYXJlOiBmdW5jdGlvbiggLyogc2hhcmVCdXR0b25EYXRhICovICkge1xuXHRcdFx0XHRyZXR1cm4gd2luZG93LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHR9LFxuXHRcdFx0Z2V0VGV4dEZvclNoYXJlOiBmdW5jdGlvbiggLyogc2hhcmVCdXR0b25EYXRhICovICkge1xuXHRcdFx0XHRyZXR1cm4gcHN3cC5jdXJySXRlbS50aXRsZSB8fCAnJztcblx0XHRcdH0sXG5cdFx0XHRcdFxuXHRcdFx0aW5kZXhJbmRpY2F0b3JTZXA6ICcgLyAnLFxuXHRcdFx0Zml0Q29udHJvbHNXaWR0aDogMTIwMFxuXG5cdFx0fSxcblx0XHRfYmxvY2tDb250cm9sc1RhcCxcblx0XHRfYmxvY2tDb250cm9sc1RhcFRpbWVvdXQ7XG5cblxuXG5cdHZhciBfb25Db250cm9sc1RhcCA9IGZ1bmN0aW9uKGUpIHtcblx0XHRcdGlmKF9ibG9ja0NvbnRyb2xzVGFwKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXG5cblx0XHRcdGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcblxuXHRcdFx0aWYoX29wdGlvbnMudGltZVRvSWRsZSAmJiBfb3B0aW9ucy5tb3VzZVVzZWQgJiYgIV9pc0lkbGUpIHtcblx0XHRcdFx0Ly8gcmVzZXQgaWRsZSB0aW1lclxuXHRcdFx0XHRfb25JZGxlTW91c2VNb3ZlKCk7XG5cdFx0XHR9XG5cblxuXHRcdFx0dmFyIHRhcmdldCA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudCxcblx0XHRcdFx0dWlFbGVtZW50LFxuXHRcdFx0XHRjbGlja2VkQ2xhc3MgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnLFxuXHRcdFx0XHRmb3VuZDtcblxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IF91aUVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHVpRWxlbWVudCA9IF91aUVsZW1lbnRzW2ldO1xuXHRcdFx0XHRpZih1aUVsZW1lbnQub25UYXAgJiYgY2xpY2tlZENsYXNzLmluZGV4T2YoJ3Bzd3BfXycgKyB1aUVsZW1lbnQubmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdFx0dWlFbGVtZW50Lm9uVGFwKCk7XG5cdFx0XHRcdFx0Zm91bmQgPSB0cnVlO1xuXG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYoZm91bmQpIHtcblx0XHRcdFx0aWYoZS5zdG9wUHJvcGFnYXRpb24pIHtcblx0XHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdF9ibG9ja0NvbnRyb2xzVGFwID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBTb21lIHZlcnNpb25zIG9mIEFuZHJvaWQgZG9uJ3QgcHJldmVudCBnaG9zdCBjbGljayBldmVudCBcblx0XHRcdFx0Ly8gd2hlbiBwcmV2ZW50RGVmYXVsdCgpIHdhcyBjYWxsZWQgb24gdG91Y2hzdGFydCBhbmQvb3IgdG91Y2hlbmQuXG5cdFx0XHRcdC8vIFxuXHRcdFx0XHQvLyBUaGlzIGhhcHBlbnMgb24gdjQuMywgNC4yLCA0LjEsIFxuXHRcdFx0XHQvLyBvbGRlciB2ZXJzaW9ucyBzdHJhbmdlbHkgd29yayBjb3JyZWN0bHksIFxuXHRcdFx0XHQvLyBidXQganVzdCBpbiBjYXNlIHdlIGFkZCBkZWxheSBvbiBhbGwgb2YgdGhlbSlcdFxuXHRcdFx0XHR2YXIgdGFwRGVsYXkgPSBmcmFtZXdvcmsuZmVhdHVyZXMuaXNPbGRBbmRyb2lkID8gNjAwIDogMzA7XG5cdFx0XHRcdF9ibG9ja0NvbnRyb2xzVGFwVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0X2Jsb2NrQ29udHJvbHNUYXAgPSBmYWxzZTtcblx0XHRcdFx0fSwgdGFwRGVsYXkpO1xuXHRcdFx0fVxuXG5cdFx0fSxcblx0XHRfZml0Q29udHJvbHNJblZpZXdwb3J0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gIXBzd3AubGlrZWx5VG91Y2hEZXZpY2UgfHwgX29wdGlvbnMubW91c2VVc2VkIHx8IHNjcmVlbi53aWR0aCA+IF9vcHRpb25zLmZpdENvbnRyb2xzV2lkdGg7XG5cdFx0fSxcblx0XHRfdG9nZ2xlUHN3cENsYXNzID0gZnVuY3Rpb24oZWwsIGNOYW1lLCBhZGQpIHtcblx0XHRcdGZyYW1ld29ya1sgKGFkZCA/ICdhZGQnIDogJ3JlbW92ZScpICsgJ0NsYXNzJyBdKGVsLCAncHN3cF9fJyArIGNOYW1lKTtcblx0XHR9LFxuXG5cdFx0Ly8gYWRkIGNsYXNzIHdoZW4gdGhlcmUgaXMganVzdCBvbmUgaXRlbSBpbiB0aGUgZ2FsbGVyeVxuXHRcdC8vIChieSBkZWZhdWx0IGl0IGhpZGVzIGxlZnQvcmlnaHQgYXJyb3dzIGFuZCAxb2ZYIGNvdW50ZXIpXG5cdFx0X2NvdW50TnVtSXRlbXMgPSBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBoYXNPbmVTbGlkZSA9IChfb3B0aW9ucy5nZXROdW1JdGVtc0ZuKCkgPT09IDEpO1xuXG5cdFx0XHRpZihoYXNPbmVTbGlkZSAhPT0gX2dhbGxlcnlIYXNPbmVTbGlkZSkge1xuXHRcdFx0XHRfdG9nZ2xlUHN3cENsYXNzKF9jb250cm9scywgJ3VpLS1vbmUtc2xpZGUnLCBoYXNPbmVTbGlkZSk7XG5cdFx0XHRcdF9nYWxsZXJ5SGFzT25lU2xpZGUgPSBoYXNPbmVTbGlkZTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF90b2dnbGVTaGFyZU1vZGFsQ2xhc3MgPSBmdW5jdGlvbigpIHtcblx0XHRcdF90b2dnbGVQc3dwQ2xhc3MoX3NoYXJlTW9kYWwsICdzaGFyZS1tb2RhbC0taGlkZGVuJywgX3NoYXJlTW9kYWxIaWRkZW4pO1xuXHRcdH0sXG5cdFx0X3RvZ2dsZVNoYXJlTW9kYWwgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0X3NoYXJlTW9kYWxIaWRkZW4gPSAhX3NoYXJlTW9kYWxIaWRkZW47XG5cdFx0XHRcblx0XHRcdFxuXHRcdFx0aWYoIV9zaGFyZU1vZGFsSGlkZGVuKSB7XG5cdFx0XHRcdF90b2dnbGVTaGFyZU1vZGFsQ2xhc3MoKTtcblx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZighX3NoYXJlTW9kYWxIaWRkZW4pIHtcblx0XHRcdFx0XHRcdGZyYW1ld29yay5hZGRDbGFzcyhfc2hhcmVNb2RhbCwgJ3Bzd3BfX3NoYXJlLW1vZGFsLS1mYWRlLWluJyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LCAzMCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmcmFtZXdvcmsucmVtb3ZlQ2xhc3MoX3NoYXJlTW9kYWwsICdwc3dwX19zaGFyZS1tb2RhbC0tZmFkZS1pbicpO1xuXHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmKF9zaGFyZU1vZGFsSGlkZGVuKSB7XG5cdFx0XHRcdFx0XHRfdG9nZ2xlU2hhcmVNb2RhbENsYXNzKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LCAzMDApO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZighX3NoYXJlTW9kYWxIaWRkZW4pIHtcblx0XHRcdFx0X3VwZGF0ZVNoYXJlVVJMcygpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cblx0XHRfb3BlbldpbmRvd1BvcHVwID0gZnVuY3Rpb24oZSkge1xuXHRcdFx0ZSA9IGUgfHwgd2luZG93LmV2ZW50O1xuXHRcdFx0dmFyIHRhcmdldCA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudDtcblxuXHRcdFx0cHN3cC5zaG91dCgnc2hhcmVMaW5rQ2xpY2snLCBlLCB0YXJnZXQpO1xuXG5cdFx0XHRpZighdGFyZ2V0LmhyZWYpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiggdGFyZ2V0Lmhhc0F0dHJpYnV0ZSgnZG93bmxvYWQnKSApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdHdpbmRvdy5vcGVuKHRhcmdldC5ocmVmLCAncHN3cF9zaGFyZScsICdzY3JvbGxiYXJzPXllcyxyZXNpemFibGU9eWVzLHRvb2xiYXI9bm8sJytcblx0XHRcdFx0XHRcdFx0XHRcdFx0J2xvY2F0aW9uPXllcyx3aWR0aD01NTAsaGVpZ2h0PTQyMCx0b3A9MTAwLGxlZnQ9JyArIFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQod2luZG93LnNjcmVlbiA/IE1hdGgucm91bmQoc2NyZWVuLndpZHRoIC8gMiAtIDI3NSkgOiAxMDApICApO1xuXG5cdFx0XHRpZighX3NoYXJlTW9kYWxIaWRkZW4pIHtcblx0XHRcdFx0X3RvZ2dsZVNoYXJlTW9kYWwoKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0X3VwZGF0ZVNoYXJlVVJMcyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNoYXJlQnV0dG9uT3V0ID0gJycsXG5cdFx0XHRcdHNoYXJlQnV0dG9uRGF0YSxcblx0XHRcdFx0c2hhcmVVUkwsXG5cdFx0XHRcdGltYWdlX3VybCxcblx0XHRcdFx0cGFnZV91cmwsXG5cdFx0XHRcdHNoYXJlX3RleHQ7XG5cblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBfb3B0aW9ucy5zaGFyZUJ1dHRvbnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0c2hhcmVCdXR0b25EYXRhID0gX29wdGlvbnMuc2hhcmVCdXR0b25zW2ldO1xuXG5cdFx0XHRcdGltYWdlX3VybCA9IF9vcHRpb25zLmdldEltYWdlVVJMRm9yU2hhcmUoc2hhcmVCdXR0b25EYXRhKTtcblx0XHRcdFx0cGFnZV91cmwgPSBfb3B0aW9ucy5nZXRQYWdlVVJMRm9yU2hhcmUoc2hhcmVCdXR0b25EYXRhKTtcblx0XHRcdFx0c2hhcmVfdGV4dCA9IF9vcHRpb25zLmdldFRleHRGb3JTaGFyZShzaGFyZUJ1dHRvbkRhdGEpO1xuXG5cdFx0XHRcdHNoYXJlVVJMID0gc2hhcmVCdXR0b25EYXRhLnVybC5yZXBsYWNlKCd7e3VybH19JywgZW5jb2RlVVJJQ29tcG9uZW50KHBhZ2VfdXJsKSApXG5cdFx0XHRcdFx0XHRcdFx0XHQucmVwbGFjZSgne3tpbWFnZV91cmx9fScsIGVuY29kZVVSSUNvbXBvbmVudChpbWFnZV91cmwpIClcblx0XHRcdFx0XHRcdFx0XHRcdC5yZXBsYWNlKCd7e3Jhd19pbWFnZV91cmx9fScsIGltYWdlX3VybCApXG5cdFx0XHRcdFx0XHRcdFx0XHQucmVwbGFjZSgne3t0ZXh0fX0nLCBlbmNvZGVVUklDb21wb25lbnQoc2hhcmVfdGV4dCkgKTtcblxuXHRcdFx0XHRzaGFyZUJ1dHRvbk91dCArPSAnPGEgaHJlZj1cIicgKyBzaGFyZVVSTCArICdcIiB0YXJnZXQ9XCJfYmxhbmtcIiAnK1xuXHRcdFx0XHRcdFx0XHRcdFx0J2NsYXNzPVwicHN3cF9fc2hhcmUtLScgKyBzaGFyZUJ1dHRvbkRhdGEuaWQgKyAnXCInICtcblx0XHRcdFx0XHRcdFx0XHRcdChzaGFyZUJ1dHRvbkRhdGEuZG93bmxvYWQgPyAnZG93bmxvYWQnIDogJycpICsgJz4nICsgXG5cdFx0XHRcdFx0XHRcdFx0XHRzaGFyZUJ1dHRvbkRhdGEubGFiZWwgKyAnPC9hPic7XG5cblx0XHRcdFx0aWYoX29wdGlvbnMucGFyc2VTaGFyZUJ1dHRvbk91dCkge1xuXHRcdFx0XHRcdHNoYXJlQnV0dG9uT3V0ID0gX29wdGlvbnMucGFyc2VTaGFyZUJ1dHRvbk91dChzaGFyZUJ1dHRvbkRhdGEsIHNoYXJlQnV0dG9uT3V0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0X3NoYXJlTW9kYWwuY2hpbGRyZW5bMF0uaW5uZXJIVE1MID0gc2hhcmVCdXR0b25PdXQ7XG5cdFx0XHRfc2hhcmVNb2RhbC5jaGlsZHJlblswXS5vbmNsaWNrID0gX29wZW5XaW5kb3dQb3B1cDtcblxuXHRcdH0sXG5cdFx0X2hhc0Nsb3NlQ2xhc3MgPSBmdW5jdGlvbih0YXJnZXQpIHtcblx0XHRcdGZvcih2YXIgIGkgPSAwOyBpIDwgX29wdGlvbnMuY2xvc2VFbENsYXNzZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYoIGZyYW1ld29yay5oYXNDbGFzcyh0YXJnZXQsICdwc3dwX18nICsgX29wdGlvbnMuY2xvc2VFbENsYXNzZXNbaV0pICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfaWRsZUludGVydmFsLFxuXHRcdF9pZGxlVGltZXIsXG5cdFx0X2lkbGVJbmNyZW1lbnQgPSAwLFxuXHRcdF9vbklkbGVNb3VzZU1vdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdGNsZWFyVGltZW91dChfaWRsZVRpbWVyKTtcblx0XHRcdF9pZGxlSW5jcmVtZW50ID0gMDtcblx0XHRcdGlmKF9pc0lkbGUpIHtcblx0XHRcdFx0dWkuc2V0SWRsZShmYWxzZSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfb25Nb3VzZUxlYXZlV2luZG93ID0gZnVuY3Rpb24oZSkge1xuXHRcdFx0ZSA9IGUgPyBlIDogd2luZG93LmV2ZW50O1xuXHRcdFx0dmFyIGZyb20gPSBlLnJlbGF0ZWRUYXJnZXQgfHwgZS50b0VsZW1lbnQ7XG5cdFx0XHRpZiAoIWZyb20gfHwgZnJvbS5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG5cdFx0XHRcdGNsZWFyVGltZW91dChfaWRsZVRpbWVyKTtcblx0XHRcdFx0X2lkbGVUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dWkuc2V0SWRsZSh0cnVlKTtcblx0XHRcdFx0fSwgX29wdGlvbnMudGltZVRvSWRsZU91dHNpZGUpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0X3NldHVwRnVsbHNjcmVlbkFQSSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYoX29wdGlvbnMuZnVsbHNjcmVlbkVsICYmICFmcmFtZXdvcmsuZmVhdHVyZXMuaXNPbGRBbmRyb2lkKSB7XG5cdFx0XHRcdGlmKCFfZnVsbHNjcmVuQVBJKSB7XG5cdFx0XHRcdFx0X2Z1bGxzY3JlbkFQSSA9IHVpLmdldEZ1bGxzY3JlZW5BUEkoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZihfZnVsbHNjcmVuQVBJKSB7XG5cdFx0XHRcdFx0ZnJhbWV3b3JrLmJpbmQoZG9jdW1lbnQsIF9mdWxsc2NyZW5BUEkuZXZlbnRLLCB1aS51cGRhdGVGdWxsc2NyZWVuKTtcblx0XHRcdFx0XHR1aS51cGRhdGVGdWxsc2NyZWVuKCk7XG5cdFx0XHRcdFx0ZnJhbWV3b3JrLmFkZENsYXNzKHBzd3AudGVtcGxhdGUsICdwc3dwLS1zdXBwb3J0cy1mcycpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGZyYW1ld29yay5yZW1vdmVDbGFzcyhwc3dwLnRlbXBsYXRlLCAncHN3cC0tc3VwcG9ydHMtZnMnKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0X3NldHVwTG9hZGluZ0luZGljYXRvciA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gU2V0dXAgbG9hZGluZyBpbmRpY2F0b3Jcblx0XHRcdGlmKF9vcHRpb25zLnByZWxvYWRlckVsKSB7XG5cdFx0XHRcblx0XHRcdFx0X3RvZ2dsZUxvYWRpbmdJbmRpY2F0b3IodHJ1ZSk7XG5cblx0XHRcdFx0X2xpc3RlbignYmVmb3JlQ2hhbmdlJywgZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRjbGVhclRpbWVvdXQoX2xvYWRpbmdJbmRpY2F0b3JUaW1lb3V0KTtcblxuXHRcdFx0XHRcdC8vIGRpc3BsYXkgbG9hZGluZyBpbmRpY2F0b3Igd2l0aCBkZWxheVxuXHRcdFx0XHRcdF9sb2FkaW5nSW5kaWNhdG9yVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdGlmKHBzd3AuY3Vyckl0ZW0gJiYgcHN3cC5jdXJySXRlbS5sb2FkaW5nKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYoICFwc3dwLmFsbG93UHJvZ3Jlc3NpdmVJbWcoKSB8fCAocHN3cC5jdXJySXRlbS5pbWcgJiYgIXBzd3AuY3Vyckl0ZW0uaW1nLm5hdHVyYWxXaWR0aCkgICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIHNob3cgcHJlbG9hZGVyIGlmIHByb2dyZXNzaXZlIGxvYWRpbmcgaXMgbm90IGVuYWJsZWQsIFxuXHRcdFx0XHRcdFx0XHRcdC8vIG9yIGltYWdlIHdpZHRoIGlzIG5vdCBkZWZpbmVkIHlldCAoYmVjYXVzZSBvZiBzbG93IGNvbm5lY3Rpb24pXG5cdFx0XHRcdFx0XHRcdFx0X3RvZ2dsZUxvYWRpbmdJbmRpY2F0b3IoZmFsc2UpOyBcblx0XHRcdFx0XHRcdFx0XHQvLyBpdGVtcy1jb250cm9sbGVyLmpzIGZ1bmN0aW9uIGFsbG93UHJvZ3Jlc3NpdmVJbWdcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdF90b2dnbGVMb2FkaW5nSW5kaWNhdG9yKHRydWUpOyAvLyBoaWRlIHByZWxvYWRlclxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSwgX29wdGlvbnMubG9hZGluZ0luZGljYXRvckRlbGF5KTtcblx0XHRcdFx0XHRcblx0XHRcdFx0fSk7XG5cdFx0XHRcdF9saXN0ZW4oJ2ltYWdlTG9hZENvbXBsZXRlJywgZnVuY3Rpb24oaW5kZXgsIGl0ZW0pIHtcblx0XHRcdFx0XHRpZihwc3dwLmN1cnJJdGVtID09PSBpdGVtKSB7XG5cdFx0XHRcdFx0XHRfdG9nZ2xlTG9hZGluZ0luZGljYXRvcih0cnVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfdG9nZ2xlTG9hZGluZ0luZGljYXRvciA9IGZ1bmN0aW9uKGhpZGUpIHtcblx0XHRcdGlmKCBfbG9hZGluZ0luZGljYXRvckhpZGRlbiAhPT0gaGlkZSApIHtcblx0XHRcdFx0X3RvZ2dsZVBzd3BDbGFzcyhfbG9hZGluZ0luZGljYXRvciwgJ3ByZWxvYWRlci0tYWN0aXZlJywgIWhpZGUpO1xuXHRcdFx0XHRfbG9hZGluZ0luZGljYXRvckhpZGRlbiA9IGhpZGU7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfYXBwbHlOYXZCYXJHYXBzID0gZnVuY3Rpb24oaXRlbSkge1xuXHRcdFx0dmFyIGdhcCA9IGl0ZW0udkdhcDtcblxuXHRcdFx0aWYoIF9maXRDb250cm9sc0luVmlld3BvcnQoKSApIHtcblx0XHRcdFx0XG5cdFx0XHRcdHZhciBiYXJzID0gX29wdGlvbnMuYmFyc1NpemU7IFxuXHRcdFx0XHRpZihfb3B0aW9ucy5jYXB0aW9uRWwgJiYgYmFycy5ib3R0b20gPT09ICdhdXRvJykge1xuXHRcdFx0XHRcdGlmKCFfZmFrZUNhcHRpb25Db250YWluZXIpIHtcblx0XHRcdFx0XHRcdF9mYWtlQ2FwdGlvbkNvbnRhaW5lciA9IGZyYW1ld29yay5jcmVhdGVFbCgncHN3cF9fY2FwdGlvbiBwc3dwX19jYXB0aW9uLS1mYWtlJyk7XG5cdFx0XHRcdFx0XHRfZmFrZUNhcHRpb25Db250YWluZXIuYXBwZW5kQ2hpbGQoIGZyYW1ld29yay5jcmVhdGVFbCgncHN3cF9fY2FwdGlvbl9fY2VudGVyJykgKTtcblx0XHRcdFx0XHRcdF9jb250cm9scy5pbnNlcnRCZWZvcmUoX2Zha2VDYXB0aW9uQ29udGFpbmVyLCBfY2FwdGlvbkNvbnRhaW5lcik7XG5cdFx0XHRcdFx0XHRmcmFtZXdvcmsuYWRkQ2xhc3MoX2NvbnRyb2xzLCAncHN3cF9fdWktLWZpdCcpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiggX29wdGlvbnMuYWRkQ2FwdGlvbkhUTUxGbihpdGVtLCBfZmFrZUNhcHRpb25Db250YWluZXIsIHRydWUpICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgY2FwdGlvblNpemUgPSBfZmFrZUNhcHRpb25Db250YWluZXIuY2xpZW50SGVpZ2h0O1xuXHRcdFx0XHRcdFx0Z2FwLmJvdHRvbSA9IHBhcnNlSW50KGNhcHRpb25TaXplLDEwKSB8fCA0NDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Z2FwLmJvdHRvbSA9IGJhcnMudG9wOyAvLyBpZiBubyBjYXB0aW9uLCBzZXQgc2l6ZSBvZiBib3R0b20gZ2FwIHRvIHNpemUgb2YgdG9wXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGdhcC5ib3R0b20gPSBiYXJzLmJvdHRvbSA9PT0gJ2F1dG8nID8gMCA6IGJhcnMuYm90dG9tO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHQvLyBoZWlnaHQgb2YgdG9wIGJhciBpcyBzdGF0aWMsIG5vIG5lZWQgdG8gY2FsY3VsYXRlIGl0XG5cdFx0XHRcdGdhcC50b3AgPSBiYXJzLnRvcDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGdhcC50b3AgPSBnYXAuYm90dG9tID0gMDtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF9zZXR1cElkbGUgPSBmdW5jdGlvbigpIHtcblx0XHRcdC8vIEhpZGUgY29udHJvbHMgd2hlbiBtb3VzZSBpcyB1c2VkXG5cdFx0XHRpZihfb3B0aW9ucy50aW1lVG9JZGxlKSB7XG5cdFx0XHRcdF9saXN0ZW4oJ21vdXNlVXNlZCcsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGZyYW1ld29yay5iaW5kKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgX29uSWRsZU1vdXNlTW92ZSk7XG5cdFx0XHRcdFx0ZnJhbWV3b3JrLmJpbmQoZG9jdW1lbnQsICdtb3VzZW91dCcsIF9vbk1vdXNlTGVhdmVXaW5kb3cpO1xuXG5cdFx0XHRcdFx0X2lkbGVJbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0X2lkbGVJbmNyZW1lbnQrKztcblx0XHRcdFx0XHRcdGlmKF9pZGxlSW5jcmVtZW50ID09PSAyKSB7XG5cdFx0XHRcdFx0XHRcdHVpLnNldElkbGUodHJ1ZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSwgX29wdGlvbnMudGltZVRvSWRsZSAvIDIpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF9zZXR1cEhpZGluZ0NvbnRyb2xzRHVyaW5nR2VzdHVyZXMgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSGlkZSBjb250cm9scyBvbiB2ZXJ0aWNhbCBkcmFnXG5cdFx0XHRfbGlzdGVuKCdvblZlcnRpY2FsRHJhZycsIGZ1bmN0aW9uKG5vdykge1xuXHRcdFx0XHRpZihfY29udHJvbHNWaXNpYmxlICYmIG5vdyA8IDAuOTUpIHtcblx0XHRcdFx0XHR1aS5oaWRlQ29udHJvbHMoKTtcblx0XHRcdFx0fSBlbHNlIGlmKCFfY29udHJvbHNWaXNpYmxlICYmIG5vdyA+PSAwLjk1KSB7XG5cdFx0XHRcdFx0dWkuc2hvd0NvbnRyb2xzKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBIaWRlIGNvbnRyb2xzIHdoZW4gcGluY2hpbmcgdG8gY2xvc2Vcblx0XHRcdHZhciBwaW5jaENvbnRyb2xzSGlkZGVuO1xuXHRcdFx0X2xpc3Rlbignb25QaW5jaENsb3NlJyAsIGZ1bmN0aW9uKG5vdykge1xuXHRcdFx0XHRpZihfY29udHJvbHNWaXNpYmxlICYmIG5vdyA8IDAuOSkge1xuXHRcdFx0XHRcdHVpLmhpZGVDb250cm9scygpO1xuXHRcdFx0XHRcdHBpbmNoQ29udHJvbHNIaWRkZW4gPSB0cnVlO1xuXHRcdFx0XHR9IGVsc2UgaWYocGluY2hDb250cm9sc0hpZGRlbiAmJiAhX2NvbnRyb2xzVmlzaWJsZSAmJiBub3cgPiAwLjkpIHtcblx0XHRcdFx0XHR1aS5zaG93Q29udHJvbHMoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdF9saXN0ZW4oJ3pvb21HZXN0dXJlRW5kZWQnLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0cGluY2hDb250cm9sc0hpZGRlbiA9IGZhbHNlO1xuXHRcdFx0XHRpZihwaW5jaENvbnRyb2xzSGlkZGVuICYmICFfY29udHJvbHNWaXNpYmxlKSB7XG5cdFx0XHRcdFx0dWkuc2hvd0NvbnRyb2xzKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0fTtcblxuXG5cblx0dmFyIF91aUVsZW1lbnRzID0gW1xuXHRcdHsgXG5cdFx0XHRuYW1lOiAnY2FwdGlvbicsIFxuXHRcdFx0b3B0aW9uOiAnY2FwdGlvbkVsJyxcblx0XHRcdG9uSW5pdDogZnVuY3Rpb24oZWwpIHsgIFxuXHRcdFx0XHRfY2FwdGlvbkNvbnRhaW5lciA9IGVsOyBcblx0XHRcdH0gXG5cdFx0fSxcblx0XHR7IFxuXHRcdFx0bmFtZTogJ3NoYXJlLW1vZGFsJywgXG5cdFx0XHRvcHRpb246ICdzaGFyZUVsJyxcblx0XHRcdG9uSW5pdDogZnVuY3Rpb24oZWwpIHsgIFxuXHRcdFx0XHRfc2hhcmVNb2RhbCA9IGVsO1xuXHRcdFx0fSxcblx0XHRcdG9uVGFwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0X3RvZ2dsZVNoYXJlTW9kYWwoKTtcblx0XHRcdH0gXG5cdFx0fSxcblx0XHR7IFxuXHRcdFx0bmFtZTogJ2J1dHRvbi0tc2hhcmUnLCBcblx0XHRcdG9wdGlvbjogJ3NoYXJlRWwnLFxuXHRcdFx0b25Jbml0OiBmdW5jdGlvbihlbCkgeyBcblx0XHRcdFx0X3NoYXJlQnV0dG9uID0gZWw7XG5cdFx0XHR9LFxuXHRcdFx0b25UYXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRfdG9nZ2xlU2hhcmVNb2RhbCgpO1xuXHRcdFx0fSBcblx0XHR9LFxuXHRcdHsgXG5cdFx0XHRuYW1lOiAnYnV0dG9uLS16b29tJywgXG5cdFx0XHRvcHRpb246ICd6b29tRWwnLFxuXHRcdFx0b25UYXA6IHBzd3AudG9nZ2xlRGVza3RvcFpvb21cblx0XHR9LFxuXHRcdHsgXG5cdFx0XHRuYW1lOiAnY291bnRlcicsIFxuXHRcdFx0b3B0aW9uOiAnY291bnRlckVsJyxcblx0XHRcdG9uSW5pdDogZnVuY3Rpb24oZWwpIHsgIFxuXHRcdFx0XHRfaW5kZXhJbmRpY2F0b3IgPSBlbDtcblx0XHRcdH0gXG5cdFx0fSxcblx0XHR7IFxuXHRcdFx0bmFtZTogJ2J1dHRvbi0tY2xvc2UnLCBcblx0XHRcdG9wdGlvbjogJ2Nsb3NlRWwnLFxuXHRcdFx0b25UYXA6IHBzd3AuY2xvc2Vcblx0XHR9LFxuXHRcdHsgXG5cdFx0XHRuYW1lOiAnYnV0dG9uLS1hcnJvdy0tbGVmdCcsIFxuXHRcdFx0b3B0aW9uOiAnYXJyb3dFbCcsXG5cdFx0XHRvblRhcDogcHN3cC5wcmV2XG5cdFx0fSxcblx0XHR7IFxuXHRcdFx0bmFtZTogJ2J1dHRvbi0tYXJyb3ctLXJpZ2h0JywgXG5cdFx0XHRvcHRpb246ICdhcnJvd0VsJyxcblx0XHRcdG9uVGFwOiBwc3dwLm5leHRcblx0XHR9LFxuXHRcdHsgXG5cdFx0XHRuYW1lOiAnYnV0dG9uLS1mcycsIFxuXHRcdFx0b3B0aW9uOiAnZnVsbHNjcmVlbkVsJyxcblx0XHRcdG9uVGFwOiBmdW5jdGlvbigpIHsgIFxuXHRcdFx0XHRpZihfZnVsbHNjcmVuQVBJLmlzRnVsbHNjcmVlbigpKSB7XG5cdFx0XHRcdFx0X2Z1bGxzY3JlbkFQSS5leGl0KCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0X2Z1bGxzY3JlbkFQSS5lbnRlcigpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IFxuXHRcdH0sXG5cdFx0eyBcblx0XHRcdG5hbWU6ICdwcmVsb2FkZXInLCBcblx0XHRcdG9wdGlvbjogJ3ByZWxvYWRlckVsJyxcblx0XHRcdG9uSW5pdDogZnVuY3Rpb24oZWwpIHsgIFxuXHRcdFx0XHRfbG9hZGluZ0luZGljYXRvciA9IGVsO1xuXHRcdFx0fSBcblx0XHR9XG5cblx0XTtcblxuXHR2YXIgX3NldHVwVUlFbGVtZW50cyA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpdGVtLFxuXHRcdFx0Y2xhc3NBdHRyLFxuXHRcdFx0dWlFbGVtZW50O1xuXG5cdFx0dmFyIGxvb3BUaHJvdWdoQ2hpbGRFbGVtZW50cyA9IGZ1bmN0aW9uKHNDaGlsZHJlbikge1xuXHRcdFx0aWYoIXNDaGlsZHJlbikge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBsID0gc0NoaWxkcmVuLmxlbmd0aDtcblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0aXRlbSA9IHNDaGlsZHJlbltpXTtcblx0XHRcdFx0Y2xhc3NBdHRyID0gaXRlbS5jbGFzc05hbWU7XG5cblx0XHRcdFx0Zm9yKHZhciBhID0gMDsgYSA8IF91aUVsZW1lbnRzLmxlbmd0aDsgYSsrKSB7XG5cdFx0XHRcdFx0dWlFbGVtZW50ID0gX3VpRWxlbWVudHNbYV07XG5cblx0XHRcdFx0XHRpZihjbGFzc0F0dHIuaW5kZXhPZigncHN3cF9fJyArIHVpRWxlbWVudC5uYW1lKSA+IC0xICApIHtcblxuXHRcdFx0XHRcdFx0aWYoIF9vcHRpb25zW3VpRWxlbWVudC5vcHRpb25dICkgeyAvLyBpZiBlbGVtZW50IGlzIG5vdCBkaXNhYmxlZCBmcm9tIG9wdGlvbnNcblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdGZyYW1ld29yay5yZW1vdmVDbGFzcyhpdGVtLCAncHN3cF9fZWxlbWVudC0tZGlzYWJsZWQnKTtcblx0XHRcdFx0XHRcdFx0aWYodWlFbGVtZW50Lm9uSW5pdCkge1xuXHRcdFx0XHRcdFx0XHRcdHVpRWxlbWVudC5vbkluaXQoaXRlbSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdC8vaXRlbS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGZyYW1ld29yay5hZGRDbGFzcyhpdGVtLCAncHN3cF9fZWxlbWVudC0tZGlzYWJsZWQnKTtcblx0XHRcdFx0XHRcdFx0Ly9pdGVtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRsb29wVGhyb3VnaENoaWxkRWxlbWVudHMoX2NvbnRyb2xzLmNoaWxkcmVuKTtcblxuXHRcdHZhciB0b3BCYXIgPSAgZnJhbWV3b3JrLmdldENoaWxkQnlDbGFzcyhfY29udHJvbHMsICdwc3dwX190b3AtYmFyJyk7XG5cdFx0aWYodG9wQmFyKSB7XG5cdFx0XHRsb29wVGhyb3VnaENoaWxkRWxlbWVudHMoIHRvcEJhci5jaGlsZHJlbiApO1xuXHRcdH1cblx0fTtcblxuXG5cdFxuXG5cdHVpLmluaXQgPSBmdW5jdGlvbigpIHtcblxuXHRcdC8vIGV4dGVuZCBvcHRpb25zXG5cdFx0ZnJhbWV3b3JrLmV4dGVuZChwc3dwLm9wdGlvbnMsIF9kZWZhdWx0VUlPcHRpb25zLCB0cnVlKTtcblxuXHRcdC8vIGNyZWF0ZSBsb2NhbCBsaW5rIGZvciBmYXN0IGFjY2Vzc1xuXHRcdF9vcHRpb25zID0gcHN3cC5vcHRpb25zO1xuXG5cdFx0Ly8gZmluZCBwc3dwX191aSBlbGVtZW50XG5cdFx0X2NvbnRyb2xzID0gZnJhbWV3b3JrLmdldENoaWxkQnlDbGFzcyhwc3dwLnNjcm9sbFdyYXAsICdwc3dwX191aScpO1xuXG5cdFx0Ly8gY3JlYXRlIGxvY2FsIGxpbmtcblx0XHRfbGlzdGVuID0gcHN3cC5saXN0ZW47XG5cblxuXHRcdF9zZXR1cEhpZGluZ0NvbnRyb2xzRHVyaW5nR2VzdHVyZXMoKTtcblxuXHRcdC8vIHVwZGF0ZSBjb250cm9scyB3aGVuIHNsaWRlcyBjaGFuZ2Vcblx0XHRfbGlzdGVuKCdiZWZvcmVDaGFuZ2UnLCB1aS51cGRhdGUpO1xuXG5cdFx0Ly8gdG9nZ2xlIHpvb20gb24gZG91YmxlLXRhcFxuXHRcdF9saXN0ZW4oJ2RvdWJsZVRhcCcsIGZ1bmN0aW9uKHBvaW50KSB7XG5cdFx0XHR2YXIgaW5pdGlhbFpvb21MZXZlbCA9IHBzd3AuY3Vyckl0ZW0uaW5pdGlhbFpvb21MZXZlbDtcblx0XHRcdGlmKHBzd3AuZ2V0Wm9vbUxldmVsKCkgIT09IGluaXRpYWxab29tTGV2ZWwpIHtcblx0XHRcdFx0cHN3cC56b29tVG8oaW5pdGlhbFpvb21MZXZlbCwgcG9pbnQsIDMzMyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwc3dwLnpvb21Ubyhfb3B0aW9ucy5nZXREb3VibGVUYXBab29tKGZhbHNlLCBwc3dwLmN1cnJJdGVtKSwgcG9pbnQsIDMzMyk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvLyBBbGxvdyB0ZXh0IHNlbGVjdGlvbiBpbiBjYXB0aW9uXG5cdFx0X2xpc3RlbigncHJldmVudERyYWdFdmVudCcsIGZ1bmN0aW9uKGUsIGlzRG93biwgcHJldmVudE9iaikge1xuXHRcdFx0dmFyIHQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7XG5cdFx0XHRpZihcblx0XHRcdFx0dCAmJiBcblx0XHRcdFx0dC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgJiYgZS50eXBlLmluZGV4T2YoJ21vdXNlJykgPiAtMSAmJiBcblx0XHRcdFx0KCB0LmdldEF0dHJpYnV0ZSgnY2xhc3MnKS5pbmRleE9mKCdfX2NhcHRpb24nKSA+IDAgfHwgKC8oU01BTEx8U1RST05HfEVNKS9pKS50ZXN0KHQudGFnTmFtZSkgKSBcblx0XHRcdCkge1xuXHRcdFx0XHRwcmV2ZW50T2JqLnByZXZlbnQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8vIGJpbmQgZXZlbnRzIGZvciBVSVxuXHRcdF9saXN0ZW4oJ2JpbmRFdmVudHMnLCBmdW5jdGlvbigpIHtcblx0XHRcdGZyYW1ld29yay5iaW5kKF9jb250cm9scywgJ3Bzd3BUYXAgY2xpY2snLCBfb25Db250cm9sc1RhcCk7XG5cdFx0XHRmcmFtZXdvcmsuYmluZChwc3dwLnNjcm9sbFdyYXAsICdwc3dwVGFwJywgdWkub25HbG9iYWxUYXApO1xuXG5cdFx0XHRpZighcHN3cC5saWtlbHlUb3VjaERldmljZSkge1xuXHRcdFx0XHRmcmFtZXdvcmsuYmluZChwc3dwLnNjcm9sbFdyYXAsICdtb3VzZW92ZXInLCB1aS5vbk1vdXNlT3Zlcik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvLyB1bmJpbmQgZXZlbnRzIGZvciBVSVxuXHRcdF9saXN0ZW4oJ3VuYmluZEV2ZW50cycsIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYoIV9zaGFyZU1vZGFsSGlkZGVuKSB7XG5cdFx0XHRcdF90b2dnbGVTaGFyZU1vZGFsKCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKF9pZGxlSW50ZXJ2YWwpIHtcblx0XHRcdFx0Y2xlYXJJbnRlcnZhbChfaWRsZUludGVydmFsKTtcblx0XHRcdH1cblx0XHRcdGZyYW1ld29yay51bmJpbmQoZG9jdW1lbnQsICdtb3VzZW91dCcsIF9vbk1vdXNlTGVhdmVXaW5kb3cpO1xuXHRcdFx0ZnJhbWV3b3JrLnVuYmluZChkb2N1bWVudCwgJ21vdXNlbW92ZScsIF9vbklkbGVNb3VzZU1vdmUpO1xuXHRcdFx0ZnJhbWV3b3JrLnVuYmluZChfY29udHJvbHMsICdwc3dwVGFwIGNsaWNrJywgX29uQ29udHJvbHNUYXApO1xuXHRcdFx0ZnJhbWV3b3JrLnVuYmluZChwc3dwLnNjcm9sbFdyYXAsICdwc3dwVGFwJywgdWkub25HbG9iYWxUYXApO1xuXHRcdFx0ZnJhbWV3b3JrLnVuYmluZChwc3dwLnNjcm9sbFdyYXAsICdtb3VzZW92ZXInLCB1aS5vbk1vdXNlT3Zlcik7XG5cblx0XHRcdGlmKF9mdWxsc2NyZW5BUEkpIHtcblx0XHRcdFx0ZnJhbWV3b3JrLnVuYmluZChkb2N1bWVudCwgX2Z1bGxzY3JlbkFQSS5ldmVudEssIHVpLnVwZGF0ZUZ1bGxzY3JlZW4pO1xuXHRcdFx0XHRpZihfZnVsbHNjcmVuQVBJLmlzRnVsbHNjcmVlbigpKSB7XG5cdFx0XHRcdFx0X29wdGlvbnMuaGlkZUFuaW1hdGlvbkR1cmF0aW9uID0gMDtcblx0XHRcdFx0XHRfZnVsbHNjcmVuQVBJLmV4aXQoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRfZnVsbHNjcmVuQVBJID0gbnVsbDtcblx0XHRcdH1cblx0XHR9KTtcblxuXG5cdFx0Ly8gY2xlYW4gdXAgdGhpbmdzIHdoZW4gZ2FsbGVyeSBpcyBkZXN0cm95ZWRcblx0XHRfbGlzdGVuKCdkZXN0cm95JywgZnVuY3Rpb24oKSB7XG5cdFx0XHRpZihfb3B0aW9ucy5jYXB0aW9uRWwpIHtcblx0XHRcdFx0aWYoX2Zha2VDYXB0aW9uQ29udGFpbmVyKSB7XG5cdFx0XHRcdFx0X2NvbnRyb2xzLnJlbW92ZUNoaWxkKF9mYWtlQ2FwdGlvbkNvbnRhaW5lcik7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZnJhbWV3b3JrLnJlbW92ZUNsYXNzKF9jYXB0aW9uQ29udGFpbmVyLCAncHN3cF9fY2FwdGlvbi0tZW1wdHknKTtcblx0XHRcdH1cblxuXHRcdFx0aWYoX3NoYXJlTW9kYWwpIHtcblx0XHRcdFx0X3NoYXJlTW9kYWwuY2hpbGRyZW5bMF0ub25jbGljayA9IG51bGw7XG5cdFx0XHR9XG5cdFx0XHRmcmFtZXdvcmsucmVtb3ZlQ2xhc3MoX2NvbnRyb2xzLCAncHN3cF9fdWktLW92ZXItY2xvc2UnKTtcblx0XHRcdGZyYW1ld29yay5hZGRDbGFzcyggX2NvbnRyb2xzLCAncHN3cF9fdWktLWhpZGRlbicpO1xuXHRcdFx0dWkuc2V0SWRsZShmYWxzZSk7XG5cdFx0fSk7XG5cdFx0XG5cblx0XHRpZighX29wdGlvbnMuc2hvd0FuaW1hdGlvbkR1cmF0aW9uKSB7XG5cdFx0XHRmcmFtZXdvcmsucmVtb3ZlQ2xhc3MoIF9jb250cm9scywgJ3Bzd3BfX3VpLS1oaWRkZW4nKTtcblx0XHR9XG5cdFx0X2xpc3RlbignaW5pdGlhbFpvb21JbicsIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYoX29wdGlvbnMuc2hvd0FuaW1hdGlvbkR1cmF0aW9uKSB7XG5cdFx0XHRcdGZyYW1ld29yay5yZW1vdmVDbGFzcyggX2NvbnRyb2xzLCAncHN3cF9fdWktLWhpZGRlbicpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdF9saXN0ZW4oJ2luaXRpYWxab29tT3V0JywgZnVuY3Rpb24oKSB7XG5cdFx0XHRmcmFtZXdvcmsuYWRkQ2xhc3MoIF9jb250cm9scywgJ3Bzd3BfX3VpLS1oaWRkZW4nKTtcblx0XHR9KTtcblxuXHRcdF9saXN0ZW4oJ3BhcnNlVmVydGljYWxNYXJnaW4nLCBfYXBwbHlOYXZCYXJHYXBzKTtcblx0XHRcblx0XHRfc2V0dXBVSUVsZW1lbnRzKCk7XG5cblx0XHRpZihfb3B0aW9ucy5zaGFyZUVsICYmIF9zaGFyZUJ1dHRvbiAmJiBfc2hhcmVNb2RhbCkge1xuXHRcdFx0X3NoYXJlTW9kYWxIaWRkZW4gPSB0cnVlO1xuXHRcdH1cblxuXHRcdF9jb3VudE51bUl0ZW1zKCk7XG5cblx0XHRfc2V0dXBJZGxlKCk7XG5cblx0XHRfc2V0dXBGdWxsc2NyZWVuQVBJKCk7XG5cblx0XHRfc2V0dXBMb2FkaW5nSW5kaWNhdG9yKCk7XG5cdH07XG5cblx0dWkuc2V0SWRsZSA9IGZ1bmN0aW9uKGlzSWRsZSkge1xuXHRcdF9pc0lkbGUgPSBpc0lkbGU7XG5cdFx0X3RvZ2dsZVBzd3BDbGFzcyhfY29udHJvbHMsICd1aS0taWRsZScsIGlzSWRsZSk7XG5cdH07XG5cblx0dWkudXBkYXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly8gRG9uJ3QgdXBkYXRlIFVJIGlmIGl0J3MgaGlkZGVuXG5cdFx0aWYoX2NvbnRyb2xzVmlzaWJsZSAmJiBwc3dwLmN1cnJJdGVtKSB7XG5cdFx0XHRcblx0XHRcdHVpLnVwZGF0ZUluZGV4SW5kaWNhdG9yKCk7XG5cblx0XHRcdGlmKF9vcHRpb25zLmNhcHRpb25FbCkge1xuXHRcdFx0XHRfb3B0aW9ucy5hZGRDYXB0aW9uSFRNTEZuKHBzd3AuY3Vyckl0ZW0sIF9jYXB0aW9uQ29udGFpbmVyKTtcblxuXHRcdFx0XHRfdG9nZ2xlUHN3cENsYXNzKF9jYXB0aW9uQ29udGFpbmVyLCAnY2FwdGlvbi0tZW1wdHknLCAhcHN3cC5jdXJySXRlbS50aXRsZSk7XG5cdFx0XHR9XG5cblx0XHRcdF9vdmVybGF5VUlVcGRhdGVkID0gdHJ1ZTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRfb3ZlcmxheVVJVXBkYXRlZCA9IGZhbHNlO1xuXHRcdH1cblxuXHRcdGlmKCFfc2hhcmVNb2RhbEhpZGRlbikge1xuXHRcdFx0X3RvZ2dsZVNoYXJlTW9kYWwoKTtcblx0XHR9XG5cblx0XHRfY291bnROdW1JdGVtcygpO1xuXHR9O1xuXG5cdHVpLnVwZGF0ZUZ1bGxzY3JlZW4gPSBmdW5jdGlvbihlKSB7XG5cblx0XHRpZihlKSB7XG5cdFx0XHQvLyBzb21lIGJyb3dzZXJzIGNoYW5nZSB3aW5kb3cgc2Nyb2xsIHBvc2l0aW9uIGR1cmluZyB0aGUgZnVsbHNjcmVlblxuXHRcdFx0Ly8gc28gUGhvdG9Td2lwZSB1cGRhdGVzIGl0IGp1c3QgaW4gY2FzZVxuXHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0cHN3cC5zZXRTY3JvbGxPZmZzZXQoIDAsIGZyYW1ld29yay5nZXRTY3JvbGxZKCkgKTtcblx0XHRcdH0sIDUwKTtcblx0XHR9XG5cdFx0XG5cdFx0Ly8gdG9vZ2xlIHBzd3AtLWZzIGNsYXNzIG9uIHJvb3QgZWxlbWVudFxuXHRcdGZyYW1ld29ya1sgKF9mdWxsc2NyZW5BUEkuaXNGdWxsc2NyZWVuKCkgPyAnYWRkJyA6ICdyZW1vdmUnKSArICdDbGFzcycgXShwc3dwLnRlbXBsYXRlLCAncHN3cC0tZnMnKTtcblx0fTtcblxuXHR1aS51cGRhdGVJbmRleEluZGljYXRvciA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmKF9vcHRpb25zLmNvdW50ZXJFbCkge1xuXHRcdFx0X2luZGV4SW5kaWNhdG9yLmlubmVySFRNTCA9IChwc3dwLmdldEN1cnJlbnRJbmRleCgpKzEpICsgXG5cdFx0XHRcdFx0XHRcdFx0XHRcdF9vcHRpb25zLmluZGV4SW5kaWNhdG9yU2VwICsgXG5cdFx0XHRcdFx0XHRcdFx0XHRcdF9vcHRpb25zLmdldE51bUl0ZW1zRm4oKTtcblx0XHR9XG5cdH07XG5cdFxuXHR1aS5vbkdsb2JhbFRhcCA9IGZ1bmN0aW9uKGUpIHtcblx0XHRlID0gZSB8fCB3aW5kb3cuZXZlbnQ7XG5cdFx0dmFyIHRhcmdldCA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudDtcblxuXHRcdGlmKF9ibG9ja0NvbnRyb2xzVGFwKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYoZS5kZXRhaWwgJiYgZS5kZXRhaWwucG9pbnRlclR5cGUgPT09ICdtb3VzZScpIHtcblxuXHRcdFx0Ly8gY2xvc2UgZ2FsbGVyeSBpZiBjbGlja2VkIG91dHNpZGUgb2YgdGhlIGltYWdlXG5cdFx0XHRpZihfaGFzQ2xvc2VDbGFzcyh0YXJnZXQpKSB7XG5cdFx0XHRcdHBzd3AuY2xvc2UoKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihmcmFtZXdvcmsuaGFzQ2xhc3ModGFyZ2V0LCAncHN3cF9faW1nJykpIHtcblx0XHRcdFx0aWYocHN3cC5nZXRab29tTGV2ZWwoKSA9PT0gMSAmJiBwc3dwLmdldFpvb21MZXZlbCgpIDw9IHBzd3AuY3Vyckl0ZW0uZml0UmF0aW8pIHtcblx0XHRcdFx0XHRpZihfb3B0aW9ucy5jbGlja1RvQ2xvc2VOb25ab29tYWJsZSkge1xuXHRcdFx0XHRcdFx0cHN3cC5jbG9zZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRwc3dwLnRvZ2dsZURlc2t0b3Bab29tKGUuZGV0YWlsLnJlbGVhc2VQb2ludCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIHRhcCBhbnl3aGVyZSAoZXhjZXB0IGJ1dHRvbnMpIHRvIHRvZ2dsZSB2aXNpYmlsaXR5IG9mIGNvbnRyb2xzXG5cdFx0XHRpZihfb3B0aW9ucy50YXBUb1RvZ2dsZUNvbnRyb2xzKSB7XG5cdFx0XHRcdGlmKF9jb250cm9sc1Zpc2libGUpIHtcblx0XHRcdFx0XHR1aS5oaWRlQ29udHJvbHMoKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR1aS5zaG93Q29udHJvbHMoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyB0YXAgdG8gY2xvc2UgZ2FsbGVyeVxuXHRcdFx0aWYoX29wdGlvbnMudGFwVG9DbG9zZSAmJiAoZnJhbWV3b3JrLmhhc0NsYXNzKHRhcmdldCwgJ3Bzd3BfX2ltZycpIHx8IF9oYXNDbG9zZUNsYXNzKHRhcmdldCkpICkge1xuXHRcdFx0XHRwc3dwLmNsb3NlKCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdFxuXHRcdH1cblx0fTtcblx0dWkub25Nb3VzZU92ZXIgPSBmdW5jdGlvbihlKSB7XG5cdFx0ZSA9IGUgfHwgd2luZG93LmV2ZW50O1xuXHRcdHZhciB0YXJnZXQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7XG5cblx0XHQvLyBhZGQgY2xhc3Mgd2hlbiBtb3VzZSBpcyBvdmVyIGFuIGVsZW1lbnQgdGhhdCBzaG91bGQgY2xvc2UgdGhlIGdhbGxlcnlcblx0XHRfdG9nZ2xlUHN3cENsYXNzKF9jb250cm9scywgJ3VpLS1vdmVyLWNsb3NlJywgX2hhc0Nsb3NlQ2xhc3ModGFyZ2V0KSk7XG5cdH07XG5cblx0dWkuaGlkZUNvbnRyb2xzID0gZnVuY3Rpb24oKSB7XG5cdFx0ZnJhbWV3b3JrLmFkZENsYXNzKF9jb250cm9scywncHN3cF9fdWktLWhpZGRlbicpO1xuXHRcdF9jb250cm9sc1Zpc2libGUgPSBmYWxzZTtcblx0fTtcblxuXHR1aS5zaG93Q29udHJvbHMgPSBmdW5jdGlvbigpIHtcblx0XHRfY29udHJvbHNWaXNpYmxlID0gdHJ1ZTtcblx0XHRpZighX292ZXJsYXlVSVVwZGF0ZWQpIHtcblx0XHRcdHVpLnVwZGF0ZSgpO1xuXHRcdH1cblx0XHRmcmFtZXdvcmsucmVtb3ZlQ2xhc3MoX2NvbnRyb2xzLCdwc3dwX191aS0taGlkZGVuJyk7XG5cdH07XG5cblx0dWkuc3VwcG9ydHNGdWxsc2NyZWVuID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGQgPSBkb2N1bWVudDtcblx0XHRyZXR1cm4gISEoZC5leGl0RnVsbHNjcmVlbiB8fCBkLm1vekNhbmNlbEZ1bGxTY3JlZW4gfHwgZC53ZWJraXRFeGl0RnVsbHNjcmVlbiB8fCBkLm1zRXhpdEZ1bGxzY3JlZW4pO1xuXHR9O1xuXG5cdHVpLmdldEZ1bGxzY3JlZW5BUEkgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgZEUgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG5cdFx0XHRhcGksXG5cdFx0XHR0RiA9ICdmdWxsc2NyZWVuY2hhbmdlJztcblxuXHRcdGlmIChkRS5yZXF1ZXN0RnVsbHNjcmVlbikge1xuXHRcdFx0YXBpID0ge1xuXHRcdFx0XHRlbnRlcks6ICdyZXF1ZXN0RnVsbHNjcmVlbicsXG5cdFx0XHRcdGV4aXRLOiAnZXhpdEZ1bGxzY3JlZW4nLFxuXHRcdFx0XHRlbGVtZW50SzogJ2Z1bGxzY3JlZW5FbGVtZW50Jyxcblx0XHRcdFx0ZXZlbnRLOiB0RlxuXHRcdFx0fTtcblxuXHRcdH0gZWxzZSBpZihkRS5tb3pSZXF1ZXN0RnVsbFNjcmVlbiApIHtcblx0XHRcdGFwaSA9IHtcblx0XHRcdFx0ZW50ZXJLOiAnbW96UmVxdWVzdEZ1bGxTY3JlZW4nLFxuXHRcdFx0XHRleGl0SzogJ21vekNhbmNlbEZ1bGxTY3JlZW4nLFxuXHRcdFx0XHRlbGVtZW50SzogJ21vekZ1bGxTY3JlZW5FbGVtZW50Jyxcblx0XHRcdFx0ZXZlbnRLOiAnbW96JyArIHRGXG5cdFx0XHR9O1xuXG5cdFx0XHRcblxuXHRcdH0gZWxzZSBpZihkRS53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbikge1xuXHRcdFx0YXBpID0ge1xuXHRcdFx0XHRlbnRlcks6ICd3ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbicsXG5cdFx0XHRcdGV4aXRLOiAnd2Via2l0RXhpdEZ1bGxzY3JlZW4nLFxuXHRcdFx0XHRlbGVtZW50SzogJ3dlYmtpdEZ1bGxzY3JlZW5FbGVtZW50Jyxcblx0XHRcdFx0ZXZlbnRLOiAnd2Via2l0JyArIHRGXG5cdFx0XHR9O1xuXG5cdFx0fSBlbHNlIGlmKGRFLm1zUmVxdWVzdEZ1bGxzY3JlZW4pIHtcblx0XHRcdGFwaSA9IHtcblx0XHRcdFx0ZW50ZXJLOiAnbXNSZXF1ZXN0RnVsbHNjcmVlbicsXG5cdFx0XHRcdGV4aXRLOiAnbXNFeGl0RnVsbHNjcmVlbicsXG5cdFx0XHRcdGVsZW1lbnRLOiAnbXNGdWxsc2NyZWVuRWxlbWVudCcsXG5cdFx0XHRcdGV2ZW50SzogJ01TRnVsbHNjcmVlbkNoYW5nZSdcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0aWYoYXBpKSB7XG5cdFx0XHRhcGkuZW50ZXIgPSBmdW5jdGlvbigpIHsgXG5cdFx0XHRcdC8vIGRpc2FibGUgY2xvc2Utb24tc2Nyb2xsIGluIGZ1bGxzY3JlZW5cblx0XHRcdFx0X2luaXRhbENsb3NlT25TY3JvbGxWYWx1ZSA9IF9vcHRpb25zLmNsb3NlT25TY3JvbGw7IFxuXHRcdFx0XHRfb3B0aW9ucy5jbG9zZU9uU2Nyb2xsID0gZmFsc2U7IFxuXG5cdFx0XHRcdGlmKHRoaXMuZW50ZXJLID09PSAnd2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4nKSB7XG5cdFx0XHRcdFx0cHN3cC50ZW1wbGF0ZVt0aGlzLmVudGVyS10oIEVsZW1lbnQuQUxMT1dfS0VZQk9BUkRfSU5QVVQgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZXR1cm4gcHN3cC50ZW1wbGF0ZVt0aGlzLmVudGVyS10oKTsgXG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRhcGkuZXhpdCA9IGZ1bmN0aW9uKCkgeyBcblx0XHRcdFx0X29wdGlvbnMuY2xvc2VPblNjcm9sbCA9IF9pbml0YWxDbG9zZU9uU2Nyb2xsVmFsdWU7XG5cblx0XHRcdFx0cmV0dXJuIGRvY3VtZW50W3RoaXMuZXhpdEtdKCk7IFxuXG5cdFx0XHR9O1xuXHRcdFx0YXBpLmlzRnVsbHNjcmVlbiA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gZG9jdW1lbnRbdGhpcy5lbGVtZW50S107IH07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFwaTtcblx0fTtcblxuXG5cbn07XG5yZXR1cm4gUGhvdG9Td2lwZVVJX0RlZmF1bHQ7XG5cblxufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7\n")}]);