/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/photoswipe/dist/photoswipe.js":
/*!****************************************************!*\
  !*** ./node_modules/photoswipe/dist/photoswipe.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! PhotoSwipe - v4.1.3 - 2019-01-08\n* http://photoswipe.com\n* Copyright (c) 2019 Dmitry Semenov; */\n(function (root, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(this, function () {\n  'use strict';\n\n  var PhotoSwipe = function (template, UiClass, items, options) {\n    /*>>framework-bridge*/\n\n    /**\n     *\n     * Set of generic functions used by gallery.\n     * \n     * You're free to modify anything here as long as functionality is kept.\n     * \n     */\n    var framework = {\n      features: null,\n      bind: function (target, type, listener, unbind) {\n        var methodName = (unbind ? 'remove' : 'add') + 'EventListener';\n        type = type.split(' ');\n\n        for (var i = 0; i < type.length; i++) {\n          if (type[i]) {\n            target[methodName](type[i], listener, false);\n          }\n        }\n      },\n      isArray: function (obj) {\n        return obj instanceof Array;\n      },\n      createEl: function (classes, tag) {\n        var el = document.createElement(tag || 'div');\n\n        if (classes) {\n          el.className = classes;\n        }\n\n        return el;\n      },\n      getScrollY: function () {\n        var yOffset = window.pageYOffset;\n        return yOffset !== undefined ? yOffset : document.documentElement.scrollTop;\n      },\n      unbind: function (target, type, listener) {\n        framework.bind(target, type, listener, true);\n      },\n      removeClass: function (el, className) {\n        var reg = new RegExp('(\\\\s|^)' + className + '(\\\\s|$)');\n        el.className = el.className.replace(reg, ' ').replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n      },\n      addClass: function (el, className) {\n        if (!framework.hasClass(el, className)) {\n          el.className += (el.className ? ' ' : '') + className;\n        }\n      },\n      hasClass: function (el, className) {\n        return el.className && new RegExp('(^|\\\\s)' + className + '(\\\\s|$)').test(el.className);\n      },\n      getChildByClass: function (parentEl, childClassName) {\n        var node = parentEl.firstChild;\n\n        while (node) {\n          if (framework.hasClass(node, childClassName)) {\n            return node;\n          }\n\n          node = node.nextSibling;\n        }\n      },\n      arraySearch: function (array, value, key) {\n        var i = array.length;\n\n        while (i--) {\n          if (array[i][key] === value) {\n            return i;\n          }\n        }\n\n        return -1;\n      },\n      extend: function (o1, o2, preventOverwrite) {\n        for (var prop in o2) {\n          if (o2.hasOwnProperty(prop)) {\n            if (preventOverwrite && o1.hasOwnProperty(prop)) {\n              continue;\n            }\n\n            o1[prop] = o2[prop];\n          }\n        }\n      },\n      easing: {\n        sine: {\n          out: function (k) {\n            return Math.sin(k * (Math.PI / 2));\n          },\n          inOut: function (k) {\n            return -(Math.cos(Math.PI * k) - 1) / 2;\n          }\n        },\n        cubic: {\n          out: function (k) {\n            return --k * k * k + 1;\n          }\n          /*\n          \telastic: {\n          \t\tout: function ( k ) {\n          \t\t\t\tvar s, a = 0.1, p = 0.4;\n          \t\t\tif ( k === 0 ) return 0;\n          \t\t\tif ( k === 1 ) return 1;\n          \t\t\tif ( !a || a < 1 ) { a = 1; s = p / 4; }\n          \t\t\telse s = p * Math.asin( 1 / a ) / ( 2 * Math.PI );\n          \t\t\treturn ( a * Math.pow( 2, - 10 * k) * Math.sin( ( k - s ) * ( 2 * Math.PI ) / p ) + 1 );\n          \t\t\t},\n          \t},\n          \tback: {\n          \t\tout: function ( k ) {\n          \t\t\tvar s = 1.70158;\n          \t\t\treturn --k * k * ( ( s + 1 ) * k + s ) + 1;\n          \t\t}\n          \t}\n          */\n\n        }\n      },\n\n      /**\n       * \n       * @return {object}\n       * \n       * {\n       *  raf : request animation frame function\n       *  caf : cancel animation frame function\n       *  transfrom : transform property key (with vendor), or null if not supported\n       *  oldIE : IE8 or below\n       * }\n       * \n       */\n      detectFeatures: function () {\n        if (framework.features) {\n          return framework.features;\n        }\n\n        var helperEl = framework.createEl(),\n            helperStyle = helperEl.style,\n            vendor = '',\n            features = {}; // IE8 and below\n\n        features.oldIE = document.all && !document.addEventListener;\n        features.touch = 'ontouchstart' in window;\n\n        if (window.requestAnimationFrame) {\n          features.raf = window.requestAnimationFrame;\n          features.caf = window.cancelAnimationFrame;\n        }\n\n        features.pointerEvent = !!window.PointerEvent || navigator.msPointerEnabled; // fix false-positive detection of old Android in new IE\n        // (IE11 ua string contains \"Android 4.0\")\n\n        if (!features.pointerEvent) {\n          var ua = navigator.userAgent; // Detect if device is iPhone or iPod and if it's older than iOS 8\n          // http://stackoverflow.com/a/14223920\n          // \n          // This detection is made because of buggy top/bottom toolbars\n          // that don't trigger window.resize event.\n          // For more info refer to _isFixedPosition variable in core.js\n\n          if (/iP(hone|od)/.test(navigator.platform)) {\n            var v = navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n\n            if (v && v.length > 0) {\n              v = parseInt(v[1], 10);\n\n              if (v >= 1 && v < 8) {\n                features.isOldIOSPhone = true;\n              }\n            }\n          } // Detect old Android (before KitKat)\n          // due to bugs related to position:fixed\n          // http://stackoverflow.com/questions/7184573/pick-up-the-android-version-in-the-browser-by-javascript\n\n\n          var match = ua.match(/Android\\s([0-9\\.]*)/);\n          var androidversion = match ? match[1] : 0;\n          androidversion = parseFloat(androidversion);\n\n          if (androidversion >= 1) {\n            if (androidversion < 4.4) {\n              features.isOldAndroid = true; // for fixed position bug & performance\n            }\n\n            features.androidVersion = androidversion; // for touchend bug\n          }\n\n          features.isMobileOpera = /opera mini|opera mobi/i.test(ua); // p.s. yes, yes, UA sniffing is bad, propose your solution for above bugs.\n        }\n\n        var styleChecks = ['transform', 'perspective', 'animationName'],\n            vendors = ['', 'webkit', 'Moz', 'ms', 'O'],\n            styleCheckItem,\n            styleName;\n\n        for (var i = 0; i < 4; i++) {\n          vendor = vendors[i];\n\n          for (var a = 0; a < 3; a++) {\n            styleCheckItem = styleChecks[a]; // uppercase first letter of property name, if vendor is present\n\n            styleName = vendor + (vendor ? styleCheckItem.charAt(0).toUpperCase() + styleCheckItem.slice(1) : styleCheckItem);\n\n            if (!features[styleCheckItem] && styleName in helperStyle) {\n              features[styleCheckItem] = styleName;\n            }\n          }\n\n          if (vendor && !features.raf) {\n            vendor = vendor.toLowerCase();\n            features.raf = window[vendor + 'RequestAnimationFrame'];\n\n            if (features.raf) {\n              features.caf = window[vendor + 'CancelAnimationFrame'] || window[vendor + 'CancelRequestAnimationFrame'];\n            }\n          }\n        }\n\n        if (!features.raf) {\n          var lastTime = 0;\n\n          features.raf = function (fn) {\n            var currTime = new Date().getTime();\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n            var id = window.setTimeout(function () {\n              fn(currTime + timeToCall);\n            }, timeToCall);\n            lastTime = currTime + timeToCall;\n            return id;\n          };\n\n          features.caf = function (id) {\n            clearTimeout(id);\n          };\n        } // Detect SVG support\n\n\n        features.svg = !!document.createElementNS && !!document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect;\n        framework.features = features;\n        return features;\n      }\n    };\n    framework.detectFeatures(); // Override addEventListener for old versions of IE\n\n    if (framework.features.oldIE) {\n      framework.bind = function (target, type, listener, unbind) {\n        type = type.split(' ');\n\n        var methodName = (unbind ? 'detach' : 'attach') + 'Event',\n            evName,\n            _handleEv = function () {\n          listener.handleEvent.call(listener);\n        };\n\n        for (var i = 0; i < type.length; i++) {\n          evName = type[i];\n\n          if (evName) {\n            if (typeof listener === 'object' && listener.handleEvent) {\n              if (!unbind) {\n                listener['oldIE' + evName] = _handleEv;\n              } else {\n                if (!listener['oldIE' + evName]) {\n                  return false;\n                }\n              }\n\n              target[methodName]('on' + evName, listener['oldIE' + evName]);\n            } else {\n              target[methodName]('on' + evName, listener);\n            }\n          }\n        }\n      };\n    }\n    /*>>framework-bridge*/\n\n    /*>>core*/\n    //function(template, UiClass, items, options)\n\n\n    var self = this;\n    /**\n     * Static vars, don't change unless you know what you're doing.\n     */\n\n    var DOUBLE_TAP_RADIUS = 25,\n        NUM_HOLDERS = 3;\n    /**\n     * Options\n     */\n\n    var _options = {\n      allowPanToNext: true,\n      spacing: 0.12,\n      bgOpacity: 1,\n      mouseUsed: false,\n      loop: true,\n      pinchToClose: true,\n      closeOnScroll: true,\n      closeOnVerticalDrag: true,\n      verticalDragRange: 0.75,\n      hideAnimationDuration: 333,\n      showAnimationDuration: 333,\n      showHideOpacity: false,\n      focus: true,\n      escKey: true,\n      arrowKeys: true,\n      mainScrollEndFriction: 0.35,\n      panEndFriction: 0.35,\n      isClickableElement: function (el) {\n        return el.tagName === 'A';\n      },\n      getDoubleTapZoom: function (isMouseClick, item) {\n        if (isMouseClick) {\n          return 1;\n        } else {\n          return item.initialZoomLevel < 0.7 ? 1 : 1.33;\n        }\n      },\n      maxSpreadZoom: 1.33,\n      modal: true,\n      // not fully implemented yet\n      scaleMode: 'fit' // TODO\n\n    };\n    framework.extend(_options, options);\n    /**\n     * Private helper variables & functions\n     */\n\n    var _getEmptyPoint = function () {\n      return {\n        x: 0,\n        y: 0\n      };\n    };\n\n    var _isOpen,\n        _isDestroying,\n        _closedByScroll,\n        _currentItemIndex,\n        _containerStyle,\n        _containerShiftIndex,\n        _currPanDist = _getEmptyPoint(),\n        _startPanOffset = _getEmptyPoint(),\n        _panOffset = _getEmptyPoint(),\n        _upMoveEvents,\n        // drag move, drag end & drag cancel events array\n    _downEvents,\n        // drag start events array\n    _globalEventHandlers,\n        _viewportSize = {},\n        _currZoomLevel,\n        _startZoomLevel,\n        _translatePrefix,\n        _translateSufix,\n        _updateSizeInterval,\n        _itemsNeedUpdate,\n        _currPositionIndex = 0,\n        _offset = {},\n        _slideSize = _getEmptyPoint(),\n        // size of slide area, including spacing\n    _itemHolders,\n        _prevItemIndex,\n        _indexDiff = 0,\n        // difference of indexes since last content update\n    _dragStartEvent,\n        _dragMoveEvent,\n        _dragEndEvent,\n        _dragCancelEvent,\n        _transformKey,\n        _pointerEventEnabled,\n        _isFixedPosition = true,\n        _likelyTouchDevice,\n        _modules = [],\n        _requestAF,\n        _cancelAF,\n        _initalClassName,\n        _initalWindowScrollY,\n        _oldIE,\n        _currentWindowScrollY,\n        _features,\n        _windowVisibleSize = {},\n        _renderMaxResolution = false,\n        _orientationChangeTimeout,\n        // Registers PhotoSWipe module (History, Controller ...)\n    _registerModule = function (name, module) {\n      framework.extend(self, module.publicMethods);\n\n      _modules.push(name);\n    },\n        _getLoopedId = function (index) {\n      var numSlides = _getNumItems();\n\n      if (index > numSlides - 1) {\n        return index - numSlides;\n      } else if (index < 0) {\n        return numSlides + index;\n      }\n\n      return index;\n    },\n        // Micro bind/trigger\n    _listeners = {},\n        _listen = function (name, fn) {\n      if (!_listeners[name]) {\n        _listeners[name] = [];\n      }\n\n      return _listeners[name].push(fn);\n    },\n        _shout = function (name) {\n      var listeners = _listeners[name];\n\n      if (listeners) {\n        var args = Array.prototype.slice.call(arguments);\n        args.shift();\n\n        for (var i = 0; i < listeners.length; i++) {\n          listeners[i].apply(self, args);\n        }\n      }\n    },\n        _getCurrentTime = function () {\n      return new Date().getTime();\n    },\n        _applyBgOpacity = function (opacity) {\n      _bgOpacity = opacity;\n      self.bg.style.opacity = opacity * _options.bgOpacity;\n    },\n        _applyZoomTransform = function (styleObj, x, y, zoom, item) {\n      if (!_renderMaxResolution || item && item !== self.currItem) {\n        zoom = zoom / (item ? item.fitRatio : self.currItem.fitRatio);\n      }\n\n      styleObj[_transformKey] = _translatePrefix + x + 'px, ' + y + 'px' + _translateSufix + ' scale(' + zoom + ')';\n    },\n        _applyCurrentZoomPan = function (allowRenderResolution) {\n      if (_currZoomElementStyle) {\n        if (allowRenderResolution) {\n          if (_currZoomLevel > self.currItem.fitRatio) {\n            if (!_renderMaxResolution) {\n              _setImageSize(self.currItem, false, true);\n\n              _renderMaxResolution = true;\n            }\n          } else {\n            if (_renderMaxResolution) {\n              _setImageSize(self.currItem);\n\n              _renderMaxResolution = false;\n            }\n          }\n        }\n\n        _applyZoomTransform(_currZoomElementStyle, _panOffset.x, _panOffset.y, _currZoomLevel);\n      }\n    },\n        _applyZoomPanToItem = function (item) {\n      if (item.container) {\n        _applyZoomTransform(item.container.style, item.initialPosition.x, item.initialPosition.y, item.initialZoomLevel, item);\n      }\n    },\n        _setTranslateX = function (x, elStyle) {\n      elStyle[_transformKey] = _translatePrefix + x + 'px, 0px' + _translateSufix;\n    },\n        _moveMainScroll = function (x, dragging) {\n      if (!_options.loop && dragging) {\n        var newSlideIndexOffset = _currentItemIndex + (_slideSize.x * _currPositionIndex - x) / _slideSize.x,\n            delta = Math.round(x - _mainScrollPos.x);\n\n        if (newSlideIndexOffset < 0 && delta > 0 || newSlideIndexOffset >= _getNumItems() - 1 && delta < 0) {\n          x = _mainScrollPos.x + delta * _options.mainScrollEndFriction;\n        }\n      }\n\n      _mainScrollPos.x = x;\n\n      _setTranslateX(x, _containerStyle);\n    },\n        _calculatePanOffset = function (axis, zoomLevel) {\n      var m = _midZoomPoint[axis] - _offset[axis];\n      return _startPanOffset[axis] + _currPanDist[axis] + m - m * (zoomLevel / _startZoomLevel);\n    },\n        _equalizePoints = function (p1, p2) {\n      p1.x = p2.x;\n      p1.y = p2.y;\n\n      if (p2.id) {\n        p1.id = p2.id;\n      }\n    },\n        _roundPoint = function (p) {\n      p.x = Math.round(p.x);\n      p.y = Math.round(p.y);\n    },\n        _mouseMoveTimeout = null,\n        _onFirstMouseMove = function () {\n      // Wait until mouse move event is fired at least twice during 100ms\n      // We do this, because some mobile browsers trigger it on touchstart\n      if (_mouseMoveTimeout) {\n        framework.unbind(document, 'mousemove', _onFirstMouseMove);\n        framework.addClass(template, 'pswp--has_mouse');\n        _options.mouseUsed = true;\n\n        _shout('mouseUsed');\n      }\n\n      _mouseMoveTimeout = setTimeout(function () {\n        _mouseMoveTimeout = null;\n      }, 100);\n    },\n        _bindEvents = function () {\n      framework.bind(document, 'keydown', self);\n\n      if (_features.transform) {\n        // don't bind click event in browsers that don't support transform (mostly IE8)\n        framework.bind(self.scrollWrap, 'click', self);\n      }\n\n      if (!_options.mouseUsed) {\n        framework.bind(document, 'mousemove', _onFirstMouseMove);\n      }\n\n      framework.bind(window, 'resize scroll orientationchange', self);\n\n      _shout('bindEvents');\n    },\n        _unbindEvents = function () {\n      framework.unbind(window, 'resize scroll orientationchange', self);\n      framework.unbind(window, 'scroll', _globalEventHandlers.scroll);\n      framework.unbind(document, 'keydown', self);\n      framework.unbind(document, 'mousemove', _onFirstMouseMove);\n\n      if (_features.transform) {\n        framework.unbind(self.scrollWrap, 'click', self);\n      }\n\n      if (_isDragging) {\n        framework.unbind(window, _upMoveEvents, self);\n      }\n\n      clearTimeout(_orientationChangeTimeout);\n\n      _shout('unbindEvents');\n    },\n        _calculatePanBounds = function (zoomLevel, update) {\n      var bounds = _calculateItemSize(self.currItem, _viewportSize, zoomLevel);\n\n      if (update) {\n        _currPanBounds = bounds;\n      }\n\n      return bounds;\n    },\n        _getMinZoomLevel = function (item) {\n      if (!item) {\n        item = self.currItem;\n      }\n\n      return item.initialZoomLevel;\n    },\n        _getMaxZoomLevel = function (item) {\n      if (!item) {\n        item = self.currItem;\n      }\n\n      return item.w > 0 ? _options.maxSpreadZoom : 1;\n    },\n        // Return true if offset is out of the bounds\n    _modifyDestPanOffset = function (axis, destPanBounds, destPanOffset, destZoomLevel) {\n      if (destZoomLevel === self.currItem.initialZoomLevel) {\n        destPanOffset[axis] = self.currItem.initialPosition[axis];\n        return true;\n      } else {\n        destPanOffset[axis] = _calculatePanOffset(axis, destZoomLevel);\n\n        if (destPanOffset[axis] > destPanBounds.min[axis]) {\n          destPanOffset[axis] = destPanBounds.min[axis];\n          return true;\n        } else if (destPanOffset[axis] < destPanBounds.max[axis]) {\n          destPanOffset[axis] = destPanBounds.max[axis];\n          return true;\n        }\n      }\n\n      return false;\n    },\n        _setupTransforms = function () {\n      if (_transformKey) {\n        // setup 3d transforms\n        var allow3dTransform = _features.perspective && !_likelyTouchDevice;\n        _translatePrefix = 'translate' + (allow3dTransform ? '3d(' : '(');\n        _translateSufix = _features.perspective ? ', 0px)' : ')';\n        return;\n      } // Override zoom/pan/move functions in case old browser is used (most likely IE)\n      // (so they use left/top/width/height, instead of CSS transform)\n\n\n      _transformKey = 'left';\n      framework.addClass(template, 'pswp--ie');\n\n      _setTranslateX = function (x, elStyle) {\n        elStyle.left = x + 'px';\n      };\n\n      _applyZoomPanToItem = function (item) {\n        var zoomRatio = item.fitRatio > 1 ? 1 : item.fitRatio,\n            s = item.container.style,\n            w = zoomRatio * item.w,\n            h = zoomRatio * item.h;\n        s.width = w + 'px';\n        s.height = h + 'px';\n        s.left = item.initialPosition.x + 'px';\n        s.top = item.initialPosition.y + 'px';\n      };\n\n      _applyCurrentZoomPan = function () {\n        if (_currZoomElementStyle) {\n          var s = _currZoomElementStyle,\n              item = self.currItem,\n              zoomRatio = item.fitRatio > 1 ? 1 : item.fitRatio,\n              w = zoomRatio * item.w,\n              h = zoomRatio * item.h;\n          s.width = w + 'px';\n          s.height = h + 'px';\n          s.left = _panOffset.x + 'px';\n          s.top = _panOffset.y + 'px';\n        }\n      };\n    },\n        _onKeyDown = function (e) {\n      var keydownAction = '';\n\n      if (_options.escKey && e.keyCode === 27) {\n        keydownAction = 'close';\n      } else if (_options.arrowKeys) {\n        if (e.keyCode === 37) {\n          keydownAction = 'prev';\n        } else if (e.keyCode === 39) {\n          keydownAction = 'next';\n        }\n      }\n\n      if (keydownAction) {\n        // don't do anything if special key pressed to prevent from overriding default browser actions\n        // e.g. in Chrome on Mac cmd+arrow-left returns to previous page\n        if (!e.ctrlKey && !e.altKey && !e.shiftKey && !e.metaKey) {\n          if (e.preventDefault) {\n            e.preventDefault();\n          } else {\n            e.returnValue = false;\n          }\n\n          self[keydownAction]();\n        }\n      }\n    },\n        _onGlobalClick = function (e) {\n      if (!e) {\n        return;\n      } // don't allow click event to pass through when triggering after drag or some other gesture\n\n\n      if (_moved || _zoomStarted || _mainScrollAnimating || _verticalDragInitiated) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n    },\n        _updatePageScrollOffset = function () {\n      self.setScrollOffset(0, framework.getScrollY());\n    }; // Micro animation engine\n\n\n    var _animations = {},\n        _numAnimations = 0,\n        _stopAnimation = function (name) {\n      if (_animations[name]) {\n        if (_animations[name].raf) {\n          _cancelAF(_animations[name].raf);\n        }\n\n        _numAnimations--;\n        delete _animations[name];\n      }\n    },\n        _registerStartAnimation = function (name) {\n      if (_animations[name]) {\n        _stopAnimation(name);\n      }\n\n      if (!_animations[name]) {\n        _numAnimations++;\n        _animations[name] = {};\n      }\n    },\n        _stopAllAnimations = function () {\n      for (var prop in _animations) {\n        if (_animations.hasOwnProperty(prop)) {\n          _stopAnimation(prop);\n        }\n      }\n    },\n        _animateProp = function (name, b, endProp, d, easingFn, onUpdate, onComplete) {\n      var startAnimTime = _getCurrentTime(),\n          t;\n\n      _registerStartAnimation(name);\n\n      var animloop = function () {\n        if (_animations[name]) {\n          t = _getCurrentTime() - startAnimTime; // time diff\n          //b - beginning (start prop)\n          //d - anim duration\n\n          if (t >= d) {\n            _stopAnimation(name);\n\n            onUpdate(endProp);\n\n            if (onComplete) {\n              onComplete();\n            }\n\n            return;\n          }\n\n          onUpdate((endProp - b) * easingFn(t / d) + b);\n          _animations[name].raf = _requestAF(animloop);\n        }\n      };\n\n      animloop();\n    };\n\n    var publicMethods = {\n      // make a few local variables and functions public\n      shout: _shout,\n      listen: _listen,\n      viewportSize: _viewportSize,\n      options: _options,\n      isMainScrollAnimating: function () {\n        return _mainScrollAnimating;\n      },\n      getZoomLevel: function () {\n        return _currZoomLevel;\n      },\n      getCurrentIndex: function () {\n        return _currentItemIndex;\n      },\n      isDragging: function () {\n        return _isDragging;\n      },\n      isZooming: function () {\n        return _isZooming;\n      },\n      setScrollOffset: function (x, y) {\n        _offset.x = x;\n        _currentWindowScrollY = _offset.y = y;\n\n        _shout('updateScrollOffset', _offset);\n      },\n      applyZoomPan: function (zoomLevel, panX, panY, allowRenderResolution) {\n        _panOffset.x = panX;\n        _panOffset.y = panY;\n        _currZoomLevel = zoomLevel;\n\n        _applyCurrentZoomPan(allowRenderResolution);\n      },\n      init: function () {\n        if (_isOpen || _isDestroying) {\n          return;\n        }\n\n        var i;\n        self.framework = framework; // basic functionality\n\n        self.template = template; // root DOM element of PhotoSwipe\n\n        self.bg = framework.getChildByClass(template, 'pswp__bg');\n        _initalClassName = template.className;\n        _isOpen = true;\n        _features = framework.detectFeatures();\n        _requestAF = _features.raf;\n        _cancelAF = _features.caf;\n        _transformKey = _features.transform;\n        _oldIE = _features.oldIE;\n        self.scrollWrap = framework.getChildByClass(template, 'pswp__scroll-wrap');\n        self.container = framework.getChildByClass(self.scrollWrap, 'pswp__container');\n        _containerStyle = self.container.style; // for fast access\n        // Objects that hold slides (there are only 3 in DOM)\n\n        self.itemHolders = _itemHolders = [{\n          el: self.container.children[0],\n          wrap: 0,\n          index: -1\n        }, {\n          el: self.container.children[1],\n          wrap: 0,\n          index: -1\n        }, {\n          el: self.container.children[2],\n          wrap: 0,\n          index: -1\n        }]; // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\n\n        _itemHolders[0].el.style.display = _itemHolders[2].el.style.display = 'none';\n\n        _setupTransforms(); // Setup global events\n\n\n        _globalEventHandlers = {\n          resize: self.updateSize,\n          // Fixes: iOS 10.3 resize event\n          // does not update scrollWrap.clientWidth instantly after resize\n          // https://github.com/dimsemenov/PhotoSwipe/issues/1315\n          orientationchange: function () {\n            clearTimeout(_orientationChangeTimeout);\n            _orientationChangeTimeout = setTimeout(function () {\n              if (_viewportSize.x !== self.scrollWrap.clientWidth) {\n                self.updateSize();\n              }\n            }, 500);\n          },\n          scroll: _updatePageScrollOffset,\n          keydown: _onKeyDown,\n          click: _onGlobalClick\n        }; // disable show/hide effects on old browsers that don't support CSS animations or transforms, \n        // old IOS, Android and Opera mobile. Blackberry seems to work fine, even older models.\n\n        var oldPhone = _features.isOldIOSPhone || _features.isOldAndroid || _features.isMobileOpera;\n\n        if (!_features.animationName || !_features.transform || oldPhone) {\n          _options.showAnimationDuration = _options.hideAnimationDuration = 0;\n        } // init modules\n\n\n        for (i = 0; i < _modules.length; i++) {\n          self['init' + _modules[i]]();\n        } // init\n\n\n        if (UiClass) {\n          var ui = self.ui = new UiClass(self, framework);\n          ui.init();\n        }\n\n        _shout('firstUpdate');\n\n        _currentItemIndex = _currentItemIndex || _options.index || 0; // validate index\n\n        if (isNaN(_currentItemIndex) || _currentItemIndex < 0 || _currentItemIndex >= _getNumItems()) {\n          _currentItemIndex = 0;\n        }\n\n        self.currItem = _getItemAt(_currentItemIndex);\n\n        if (_features.isOldIOSPhone || _features.isOldAndroid) {\n          _isFixedPosition = false;\n        }\n\n        template.setAttribute('aria-hidden', 'false');\n\n        if (_options.modal) {\n          if (!_isFixedPosition) {\n            template.style.position = 'absolute';\n            template.style.top = framework.getScrollY() + 'px';\n          } else {\n            template.style.position = 'fixed';\n          }\n        }\n\n        if (_currentWindowScrollY === undefined) {\n          _shout('initialLayout');\n\n          _currentWindowScrollY = _initalWindowScrollY = framework.getScrollY();\n        } // add classes to root element of PhotoSwipe\n\n\n        var rootClasses = 'pswp--open ';\n\n        if (_options.mainClass) {\n          rootClasses += _options.mainClass + ' ';\n        }\n\n        if (_options.showHideOpacity) {\n          rootClasses += 'pswp--animate_opacity ';\n        }\n\n        rootClasses += _likelyTouchDevice ? 'pswp--touch' : 'pswp--notouch';\n        rootClasses += _features.animationName ? ' pswp--css_animation' : '';\n        rootClasses += _features.svg ? ' pswp--svg' : '';\n        framework.addClass(template, rootClasses);\n        self.updateSize(); // initial update\n\n        _containerShiftIndex = -1;\n        _indexDiff = null;\n\n        for (i = 0; i < NUM_HOLDERS; i++) {\n          _setTranslateX((i + _containerShiftIndex) * _slideSize.x, _itemHolders[i].el.style);\n        }\n\n        if (!_oldIE) {\n          framework.bind(self.scrollWrap, _downEvents, self); // no dragging for old IE\n        }\n\n        _listen('initialZoomInEnd', function () {\n          self.setContent(_itemHolders[0], _currentItemIndex - 1);\n          self.setContent(_itemHolders[2], _currentItemIndex + 1);\n          _itemHolders[0].el.style.display = _itemHolders[2].el.style.display = 'block';\n\n          if (_options.focus) {\n            // focus causes layout, \n            // which causes lag during the animation, \n            // that's why we delay it untill the initial zoom transition ends\n            template.focus();\n          }\n\n          _bindEvents();\n        }); // set content for center slide (first time)\n\n\n        self.setContent(_itemHolders[1], _currentItemIndex);\n        self.updateCurrItem();\n\n        _shout('afterInit');\n\n        if (!_isFixedPosition) {\n          // On all versions of iOS lower than 8.0, we check size of viewport every second.\n          // \n          // This is done to detect when Safari top & bottom bars appear, \n          // as this action doesn't trigger any events (like resize). \n          // \n          // On iOS8 they fixed this.\n          // \n          // 10 Nov 2014: iOS 7 usage ~40%. iOS 8 usage 56%.\n          _updateSizeInterval = setInterval(function () {\n            if (!_numAnimations && !_isDragging && !_isZooming && _currZoomLevel === self.currItem.initialZoomLevel) {\n              self.updateSize();\n            }\n          }, 1000);\n        }\n\n        framework.addClass(template, 'pswp--visible');\n      },\n      // Close the gallery, then destroy it\n      close: function () {\n        if (!_isOpen) {\n          return;\n        }\n\n        _isOpen = false;\n        _isDestroying = true;\n\n        _shout('close');\n\n        _unbindEvents();\n\n        _showOrHide(self.currItem, null, true, self.destroy);\n      },\n      // destroys the gallery (unbinds events, cleans up intervals and timeouts to avoid memory leaks)\n      destroy: function () {\n        _shout('destroy');\n\n        if (_showOrHideTimeout) {\n          clearTimeout(_showOrHideTimeout);\n        }\n\n        template.setAttribute('aria-hidden', 'true');\n        template.className = _initalClassName;\n\n        if (_updateSizeInterval) {\n          clearInterval(_updateSizeInterval);\n        }\n\n        framework.unbind(self.scrollWrap, _downEvents, self); // we unbind scroll event at the end, as closing animation may depend on it\n\n        framework.unbind(window, 'scroll', self);\n\n        _stopDragUpdateLoop();\n\n        _stopAllAnimations();\n\n        _listeners = null;\n      },\n\n      /**\n       * Pan image to position\n       * @param {Number} x     \n       * @param {Number} y     \n       * @param {Boolean} force Will ignore bounds if set to true.\n       */\n      panTo: function (x, y, force) {\n        if (!force) {\n          if (x > _currPanBounds.min.x) {\n            x = _currPanBounds.min.x;\n          } else if (x < _currPanBounds.max.x) {\n            x = _currPanBounds.max.x;\n          }\n\n          if (y > _currPanBounds.min.y) {\n            y = _currPanBounds.min.y;\n          } else if (y < _currPanBounds.max.y) {\n            y = _currPanBounds.max.y;\n          }\n        }\n\n        _panOffset.x = x;\n        _panOffset.y = y;\n\n        _applyCurrentZoomPan();\n      },\n      handleEvent: function (e) {\n        e = e || window.event;\n\n        if (_globalEventHandlers[e.type]) {\n          _globalEventHandlers[e.type](e);\n        }\n      },\n      goTo: function (index) {\n        index = _getLoopedId(index);\n        var diff = index - _currentItemIndex;\n        _indexDiff = diff;\n        _currentItemIndex = index;\n        self.currItem = _getItemAt(_currentItemIndex);\n        _currPositionIndex -= diff;\n\n        _moveMainScroll(_slideSize.x * _currPositionIndex);\n\n        _stopAllAnimations();\n\n        _mainScrollAnimating = false;\n        self.updateCurrItem();\n      },\n      next: function () {\n        self.goTo(_currentItemIndex + 1);\n      },\n      prev: function () {\n        self.goTo(_currentItemIndex - 1);\n      },\n      // update current zoom/pan objects\n      updateCurrZoomItem: function (emulateSetContent) {\n        if (emulateSetContent) {\n          _shout('beforeChange', 0);\n        } // itemHolder[1] is middle (current) item\n\n\n        if (_itemHolders[1].el.children.length) {\n          var zoomElement = _itemHolders[1].el.children[0];\n\n          if (framework.hasClass(zoomElement, 'pswp__zoom-wrap')) {\n            _currZoomElementStyle = zoomElement.style;\n          } else {\n            _currZoomElementStyle = null;\n          }\n        } else {\n          _currZoomElementStyle = null;\n        }\n\n        _currPanBounds = self.currItem.bounds;\n        _startZoomLevel = _currZoomLevel = self.currItem.initialZoomLevel;\n        _panOffset.x = _currPanBounds.center.x;\n        _panOffset.y = _currPanBounds.center.y;\n\n        if (emulateSetContent) {\n          _shout('afterChange');\n        }\n      },\n      invalidateCurrItems: function () {\n        _itemsNeedUpdate = true;\n\n        for (var i = 0; i < NUM_HOLDERS; i++) {\n          if (_itemHolders[i].item) {\n            _itemHolders[i].item.needsUpdate = true;\n          }\n        }\n      },\n      updateCurrItem: function (beforeAnimation) {\n        if (_indexDiff === 0) {\n          return;\n        }\n\n        var diffAbs = Math.abs(_indexDiff),\n            tempHolder;\n\n        if (beforeAnimation && diffAbs < 2) {\n          return;\n        }\n\n        self.currItem = _getItemAt(_currentItemIndex);\n        _renderMaxResolution = false;\n\n        _shout('beforeChange', _indexDiff);\n\n        if (diffAbs >= NUM_HOLDERS) {\n          _containerShiftIndex += _indexDiff + (_indexDiff > 0 ? -NUM_HOLDERS : NUM_HOLDERS);\n          diffAbs = NUM_HOLDERS;\n        }\n\n        for (var i = 0; i < diffAbs; i++) {\n          if (_indexDiff > 0) {\n            tempHolder = _itemHolders.shift();\n            _itemHolders[NUM_HOLDERS - 1] = tempHolder; // move first to last\n\n            _containerShiftIndex++;\n\n            _setTranslateX((_containerShiftIndex + 2) * _slideSize.x, tempHolder.el.style);\n\n            self.setContent(tempHolder, _currentItemIndex - diffAbs + i + 1 + 1);\n          } else {\n            tempHolder = _itemHolders.pop();\n\n            _itemHolders.unshift(tempHolder); // move last to first\n\n\n            _containerShiftIndex--;\n\n            _setTranslateX(_containerShiftIndex * _slideSize.x, tempHolder.el.style);\n\n            self.setContent(tempHolder, _currentItemIndex + diffAbs - i - 1 - 1);\n          }\n        } // reset zoom/pan on previous item\n\n\n        if (_currZoomElementStyle && Math.abs(_indexDiff) === 1) {\n          var prevItem = _getItemAt(_prevItemIndex);\n\n          if (prevItem.initialZoomLevel !== _currZoomLevel) {\n            _calculateItemSize(prevItem, _viewportSize);\n\n            _setImageSize(prevItem);\n\n            _applyZoomPanToItem(prevItem);\n          }\n        } // reset diff after update\n\n\n        _indexDiff = 0;\n        self.updateCurrZoomItem();\n        _prevItemIndex = _currentItemIndex;\n\n        _shout('afterChange');\n      },\n      updateSize: function (force) {\n        if (!_isFixedPosition && _options.modal) {\n          var windowScrollY = framework.getScrollY();\n\n          if (_currentWindowScrollY !== windowScrollY) {\n            template.style.top = windowScrollY + 'px';\n            _currentWindowScrollY = windowScrollY;\n          }\n\n          if (!force && _windowVisibleSize.x === window.innerWidth && _windowVisibleSize.y === window.innerHeight) {\n            return;\n          }\n\n          _windowVisibleSize.x = window.innerWidth;\n          _windowVisibleSize.y = window.innerHeight; //template.style.width = _windowVisibleSize.x + 'px';\n\n          template.style.height = _windowVisibleSize.y + 'px';\n        }\n\n        _viewportSize.x = self.scrollWrap.clientWidth;\n        _viewportSize.y = self.scrollWrap.clientHeight;\n\n        _updatePageScrollOffset();\n\n        _slideSize.x = _viewportSize.x + Math.round(_viewportSize.x * _options.spacing);\n        _slideSize.y = _viewportSize.y;\n\n        _moveMainScroll(_slideSize.x * _currPositionIndex);\n\n        _shout('beforeResize'); // even may be used for example to switch image sources\n        // don't re-calculate size on inital size update\n\n\n        if (_containerShiftIndex !== undefined) {\n          var holder, item, hIndex;\n\n          for (var i = 0; i < NUM_HOLDERS; i++) {\n            holder = _itemHolders[i];\n\n            _setTranslateX((i + _containerShiftIndex) * _slideSize.x, holder.el.style);\n\n            hIndex = _currentItemIndex + i - 1;\n\n            if (_options.loop && _getNumItems() > 2) {\n              hIndex = _getLoopedId(hIndex);\n            } // update zoom level on items and refresh source (if needsUpdate)\n\n\n            item = _getItemAt(hIndex); // re-render gallery item if `needsUpdate`,\n            // or doesn't have `bounds` (entirely new slide object)\n\n            if (item && (_itemsNeedUpdate || item.needsUpdate || !item.bounds)) {\n              self.cleanSlide(item);\n              self.setContent(holder, hIndex); // if \"center\" slide\n\n              if (i === 1) {\n                self.currItem = item;\n                self.updateCurrZoomItem(true);\n              }\n\n              item.needsUpdate = false;\n            } else if (holder.index === -1 && hIndex >= 0) {\n              // add content first time\n              self.setContent(holder, hIndex);\n            }\n\n            if (item && item.container) {\n              _calculateItemSize(item, _viewportSize);\n\n              _setImageSize(item);\n\n              _applyZoomPanToItem(item);\n            }\n          }\n\n          _itemsNeedUpdate = false;\n        }\n\n        _startZoomLevel = _currZoomLevel = self.currItem.initialZoomLevel;\n        _currPanBounds = self.currItem.bounds;\n\n        if (_currPanBounds) {\n          _panOffset.x = _currPanBounds.center.x;\n          _panOffset.y = _currPanBounds.center.y;\n\n          _applyCurrentZoomPan(true);\n        }\n\n        _shout('resize');\n      },\n      // Zoom current item to\n      zoomTo: function (destZoomLevel, centerPoint, speed, easingFn, updateFn) {\n        /*\n        \tif(destZoomLevel === 'fit') {\n        \t\tdestZoomLevel = self.currItem.fitRatio;\n        \t} else if(destZoomLevel === 'fill') {\n        \t\tdestZoomLevel = self.currItem.fillRatio;\n        \t}\n        */\n        if (centerPoint) {\n          _startZoomLevel = _currZoomLevel;\n          _midZoomPoint.x = Math.abs(centerPoint.x) - _panOffset.x;\n          _midZoomPoint.y = Math.abs(centerPoint.y) - _panOffset.y;\n\n          _equalizePoints(_startPanOffset, _panOffset);\n        }\n\n        var destPanBounds = _calculatePanBounds(destZoomLevel, false),\n            destPanOffset = {};\n\n        _modifyDestPanOffset('x', destPanBounds, destPanOffset, destZoomLevel);\n\n        _modifyDestPanOffset('y', destPanBounds, destPanOffset, destZoomLevel);\n\n        var initialZoomLevel = _currZoomLevel;\n        var initialPanOffset = {\n          x: _panOffset.x,\n          y: _panOffset.y\n        };\n\n        _roundPoint(destPanOffset);\n\n        var onUpdate = function (now) {\n          if (now === 1) {\n            _currZoomLevel = destZoomLevel;\n            _panOffset.x = destPanOffset.x;\n            _panOffset.y = destPanOffset.y;\n          } else {\n            _currZoomLevel = (destZoomLevel - initialZoomLevel) * now + initialZoomLevel;\n            _panOffset.x = (destPanOffset.x - initialPanOffset.x) * now + initialPanOffset.x;\n            _panOffset.y = (destPanOffset.y - initialPanOffset.y) * now + initialPanOffset.y;\n          }\n\n          if (updateFn) {\n            updateFn(now);\n          }\n\n          _applyCurrentZoomPan(now === 1);\n        };\n\n        if (speed) {\n          _animateProp('customZoomTo', 0, 1, speed, easingFn || framework.easing.sine.inOut, onUpdate);\n        } else {\n          onUpdate(1);\n        }\n      }\n    };\n    /*>>core*/\n\n    /*>>gestures*/\n\n    /**\n     * Mouse/touch/pointer event handlers.\n     * \n     * separated from @core.js for readability\n     */\n\n    var MIN_SWIPE_DISTANCE = 30,\n        DIRECTION_CHECK_OFFSET = 10; // amount of pixels to drag to determine direction of swipe\n\n    var _gestureStartTime,\n        _gestureCheckSpeedTime,\n        // pool of objects that are used during dragging of zooming\n    p = {},\n        // first point\n    p2 = {},\n        // second point (for zoom gesture)\n    delta = {},\n        _currPoint = {},\n        _startPoint = {},\n        _currPointers = [],\n        _startMainScrollPos = {},\n        _releaseAnimData,\n        _posPoints = [],\n        // array of points during dragging, used to determine type of gesture\n    _tempPoint = {},\n        _isZoomingIn,\n        _verticalDragInitiated,\n        _oldAndroidTouchEndTimeout,\n        _currZoomedItemIndex = 0,\n        _centerPoint = _getEmptyPoint(),\n        _lastReleaseTime = 0,\n        _isDragging,\n        // at least one pointer is down\n    _isMultitouch,\n        // at least two _pointers are down\n    _zoomStarted,\n        // zoom level changed during zoom gesture\n    _moved,\n        _dragAnimFrame,\n        _mainScrollShifted,\n        _currentPoints,\n        // array of current touch points\n    _isZooming,\n        _currPointsDistance,\n        _startPointsDistance,\n        _currPanBounds,\n        _mainScrollPos = _getEmptyPoint(),\n        _currZoomElementStyle,\n        _mainScrollAnimating,\n        // true, if animation after swipe gesture is running\n    _midZoomPoint = _getEmptyPoint(),\n        _currCenterPoint = _getEmptyPoint(),\n        _direction,\n        _isFirstMove,\n        _opacityChanged,\n        _bgOpacity,\n        _wasOverInitialZoom,\n        _isEqualPoints = function (p1, p2) {\n      return p1.x === p2.x && p1.y === p2.y;\n    },\n        _isNearbyPoints = function (touch0, touch1) {\n      return Math.abs(touch0.x - touch1.x) < DOUBLE_TAP_RADIUS && Math.abs(touch0.y - touch1.y) < DOUBLE_TAP_RADIUS;\n    },\n        _calculatePointsDistance = function (p1, p2) {\n      _tempPoint.x = Math.abs(p1.x - p2.x);\n      _tempPoint.y = Math.abs(p1.y - p2.y);\n      return Math.sqrt(_tempPoint.x * _tempPoint.x + _tempPoint.y * _tempPoint.y);\n    },\n        _stopDragUpdateLoop = function () {\n      if (_dragAnimFrame) {\n        _cancelAF(_dragAnimFrame);\n\n        _dragAnimFrame = null;\n      }\n    },\n        _dragUpdateLoop = function () {\n      if (_isDragging) {\n        _dragAnimFrame = _requestAF(_dragUpdateLoop);\n\n        _renderMovement();\n      }\n    },\n        _canPan = function () {\n      return !(_options.scaleMode === 'fit' && _currZoomLevel === self.currItem.initialZoomLevel);\n    },\n        // find the closest parent DOM element\n    _closestElement = function (el, fn) {\n      if (!el || el === document) {\n        return false;\n      } // don't search elements above pswp__scroll-wrap\n\n\n      if (el.getAttribute('class') && el.getAttribute('class').indexOf('pswp__scroll-wrap') > -1) {\n        return false;\n      }\n\n      if (fn(el)) {\n        return el;\n      }\n\n      return _closestElement(el.parentNode, fn);\n    },\n        _preventObj = {},\n        _preventDefaultEventBehaviour = function (e, isDown) {\n      _preventObj.prevent = !_closestElement(e.target, _options.isClickableElement);\n\n      _shout('preventDragEvent', e, isDown, _preventObj);\n\n      return _preventObj.prevent;\n    },\n        _convertTouchToPoint = function (touch, p) {\n      p.x = touch.pageX;\n      p.y = touch.pageY;\n      p.id = touch.identifier;\n      return p;\n    },\n        _findCenterOfPoints = function (p1, p2, pCenter) {\n      pCenter.x = (p1.x + p2.x) * 0.5;\n      pCenter.y = (p1.y + p2.y) * 0.5;\n    },\n        _pushPosPoint = function (time, x, y) {\n      if (time - _gestureCheckSpeedTime > 50) {\n        var o = _posPoints.length > 2 ? _posPoints.shift() : {};\n        o.x = x;\n        o.y = y;\n\n        _posPoints.push(o);\n\n        _gestureCheckSpeedTime = time;\n      }\n    },\n        _calculateVerticalDragOpacityRatio = function () {\n      var yOffset = _panOffset.y - self.currItem.initialPosition.y; // difference between initial and current position\n\n      return 1 - Math.abs(yOffset / (_viewportSize.y / 2));\n    },\n        // points pool, reused during touch events\n    _ePoint1 = {},\n        _ePoint2 = {},\n        _tempPointsArr = [],\n        _tempCounter,\n        _getTouchPoints = function (e) {\n      // clean up previous points, without recreating array\n      while (_tempPointsArr.length > 0) {\n        _tempPointsArr.pop();\n      }\n\n      if (!_pointerEventEnabled) {\n        if (e.type.indexOf('touch') > -1) {\n          if (e.touches && e.touches.length > 0) {\n            _tempPointsArr[0] = _convertTouchToPoint(e.touches[0], _ePoint1);\n\n            if (e.touches.length > 1) {\n              _tempPointsArr[1] = _convertTouchToPoint(e.touches[1], _ePoint2);\n            }\n          }\n        } else {\n          _ePoint1.x = e.pageX;\n          _ePoint1.y = e.pageY;\n          _ePoint1.id = '';\n          _tempPointsArr[0] = _ePoint1; //_ePoint1;\n        }\n      } else {\n        _tempCounter = 0; // we can use forEach, as pointer events are supported only in modern browsers\n\n        _currPointers.forEach(function (p) {\n          if (_tempCounter === 0) {\n            _tempPointsArr[0] = p;\n          } else if (_tempCounter === 1) {\n            _tempPointsArr[1] = p;\n          }\n\n          _tempCounter++;\n        });\n      }\n\n      return _tempPointsArr;\n    },\n        _panOrMoveMainScroll = function (axis, delta) {\n      var panFriction,\n          overDiff = 0,\n          newOffset = _panOffset[axis] + delta[axis],\n          startOverDiff,\n          dir = delta[axis] > 0,\n          newMainScrollPosition = _mainScrollPos.x + delta.x,\n          mainScrollDiff = _mainScrollPos.x - _startMainScrollPos.x,\n          newPanPos,\n          newMainScrollPos; // calculate fdistance over the bounds and friction\n\n      if (newOffset > _currPanBounds.min[axis] || newOffset < _currPanBounds.max[axis]) {\n        panFriction = _options.panEndFriction; // Linear increasing of friction, so at 1/4 of viewport it's at max value. \n        // Looks not as nice as was expected. Left for history.\n        // panFriction = (1 - (_panOffset[axis] + delta[axis] + panBounds.min[axis]) / (_viewportSize[axis] / 4) );\n      } else {\n        panFriction = 1;\n      }\n\n      newOffset = _panOffset[axis] + delta[axis] * panFriction; // move main scroll or start panning\n\n      if (_options.allowPanToNext || _currZoomLevel === self.currItem.initialZoomLevel) {\n        if (!_currZoomElementStyle) {\n          newMainScrollPos = newMainScrollPosition;\n        } else if (_direction === 'h' && axis === 'x' && !_zoomStarted) {\n          if (dir) {\n            if (newOffset > _currPanBounds.min[axis]) {\n              panFriction = _options.panEndFriction;\n              overDiff = _currPanBounds.min[axis] - newOffset;\n              startOverDiff = _currPanBounds.min[axis] - _startPanOffset[axis];\n            } // drag right\n\n\n            if ((startOverDiff <= 0 || mainScrollDiff < 0) && _getNumItems() > 1) {\n              newMainScrollPos = newMainScrollPosition;\n\n              if (mainScrollDiff < 0 && newMainScrollPosition > _startMainScrollPos.x) {\n                newMainScrollPos = _startMainScrollPos.x;\n              }\n            } else {\n              if (_currPanBounds.min.x !== _currPanBounds.max.x) {\n                newPanPos = newOffset;\n              }\n            }\n          } else {\n            if (newOffset < _currPanBounds.max[axis]) {\n              panFriction = _options.panEndFriction;\n              overDiff = newOffset - _currPanBounds.max[axis];\n              startOverDiff = _startPanOffset[axis] - _currPanBounds.max[axis];\n            }\n\n            if ((startOverDiff <= 0 || mainScrollDiff > 0) && _getNumItems() > 1) {\n              newMainScrollPos = newMainScrollPosition;\n\n              if (mainScrollDiff > 0 && newMainScrollPosition < _startMainScrollPos.x) {\n                newMainScrollPos = _startMainScrollPos.x;\n              }\n            } else {\n              if (_currPanBounds.min.x !== _currPanBounds.max.x) {\n                newPanPos = newOffset;\n              }\n            }\n          } //\n\n        }\n\n        if (axis === 'x') {\n          if (newMainScrollPos !== undefined) {\n            _moveMainScroll(newMainScrollPos, true);\n\n            if (newMainScrollPos === _startMainScrollPos.x) {\n              _mainScrollShifted = false;\n            } else {\n              _mainScrollShifted = true;\n            }\n          }\n\n          if (_currPanBounds.min.x !== _currPanBounds.max.x) {\n            if (newPanPos !== undefined) {\n              _panOffset.x = newPanPos;\n            } else if (!_mainScrollShifted) {\n              _panOffset.x += delta.x * panFriction;\n            }\n          }\n\n          return newMainScrollPos !== undefined;\n        }\n      }\n\n      if (!_mainScrollAnimating) {\n        if (!_mainScrollShifted) {\n          if (_currZoomLevel > self.currItem.fitRatio) {\n            _panOffset[axis] += delta[axis] * panFriction;\n          }\n        }\n      }\n    },\n        // Pointerdown/touchstart/mousedown handler\n    _onDragStart = function (e) {\n      // Allow dragging only via left mouse button.\n      // As this handler is not added in IE8 - we ignore e.which\n      // \n      // http://www.quirksmode.org/js/events_properties.html\n      // https://developer.mozilla.org/en-US/docs/Web/API/event.button\n      if (e.type === 'mousedown' && e.button > 0) {\n        return;\n      }\n\n      if (_initialZoomRunning) {\n        e.preventDefault();\n        return;\n      }\n\n      if (_oldAndroidTouchEndTimeout && e.type === 'mousedown') {\n        return;\n      }\n\n      if (_preventDefaultEventBehaviour(e, true)) {\n        e.preventDefault();\n      }\n\n      _shout('pointerDown');\n\n      if (_pointerEventEnabled) {\n        var pointerIndex = framework.arraySearch(_currPointers, e.pointerId, 'id');\n\n        if (pointerIndex < 0) {\n          pointerIndex = _currPointers.length;\n        }\n\n        _currPointers[pointerIndex] = {\n          x: e.pageX,\n          y: e.pageY,\n          id: e.pointerId\n        };\n      }\n\n      var startPointsList = _getTouchPoints(e),\n          numPoints = startPointsList.length;\n\n      _currentPoints = null;\n\n      _stopAllAnimations(); // init drag\n\n\n      if (!_isDragging || numPoints === 1) {\n        _isDragging = _isFirstMove = true;\n        framework.bind(window, _upMoveEvents, self);\n        _isZoomingIn = _wasOverInitialZoom = _opacityChanged = _verticalDragInitiated = _mainScrollShifted = _moved = _isMultitouch = _zoomStarted = false;\n        _direction = null;\n\n        _shout('firstTouchStart', startPointsList);\n\n        _equalizePoints(_startPanOffset, _panOffset);\n\n        _currPanDist.x = _currPanDist.y = 0;\n\n        _equalizePoints(_currPoint, startPointsList[0]);\n\n        _equalizePoints(_startPoint, _currPoint); //_equalizePoints(_startMainScrollPos, _mainScrollPos);\n\n\n        _startMainScrollPos.x = _slideSize.x * _currPositionIndex;\n        _posPoints = [{\n          x: _currPoint.x,\n          y: _currPoint.y\n        }];\n        _gestureCheckSpeedTime = _gestureStartTime = _getCurrentTime(); //_mainScrollAnimationEnd(true);\n\n        _calculatePanBounds(_currZoomLevel, true); // Start rendering\n\n\n        _stopDragUpdateLoop();\n\n        _dragUpdateLoop();\n      } // init zoom\n\n\n      if (!_isZooming && numPoints > 1 && !_mainScrollAnimating && !_mainScrollShifted) {\n        _startZoomLevel = _currZoomLevel;\n        _zoomStarted = false; // true if zoom changed at least once\n\n        _isZooming = _isMultitouch = true;\n        _currPanDist.y = _currPanDist.x = 0;\n\n        _equalizePoints(_startPanOffset, _panOffset);\n\n        _equalizePoints(p, startPointsList[0]);\n\n        _equalizePoints(p2, startPointsList[1]);\n\n        _findCenterOfPoints(p, p2, _currCenterPoint);\n\n        _midZoomPoint.x = Math.abs(_currCenterPoint.x) - _panOffset.x;\n        _midZoomPoint.y = Math.abs(_currCenterPoint.y) - _panOffset.y;\n        _currPointsDistance = _startPointsDistance = _calculatePointsDistance(p, p2);\n      }\n    },\n        // Pointermove/touchmove/mousemove handler\n    _onDragMove = function (e) {\n      e.preventDefault();\n\n      if (_pointerEventEnabled) {\n        var pointerIndex = framework.arraySearch(_currPointers, e.pointerId, 'id');\n\n        if (pointerIndex > -1) {\n          var p = _currPointers[pointerIndex];\n          p.x = e.pageX;\n          p.y = e.pageY;\n        }\n      }\n\n      if (_isDragging) {\n        var touchesList = _getTouchPoints(e);\n\n        if (!_direction && !_moved && !_isZooming) {\n          if (_mainScrollPos.x !== _slideSize.x * _currPositionIndex) {\n            // if main scroll position is shifted – direction is always horizontal\n            _direction = 'h';\n          } else {\n            var diff = Math.abs(touchesList[0].x - _currPoint.x) - Math.abs(touchesList[0].y - _currPoint.y); // check the direction of movement\n\n            if (Math.abs(diff) >= DIRECTION_CHECK_OFFSET) {\n              _direction = diff > 0 ? 'h' : 'v';\n              _currentPoints = touchesList;\n            }\n          }\n        } else {\n          _currentPoints = touchesList;\n        }\n      }\n    },\n        // \n    _renderMovement = function () {\n      if (!_currentPoints) {\n        return;\n      }\n\n      var numPoints = _currentPoints.length;\n\n      if (numPoints === 0) {\n        return;\n      }\n\n      _equalizePoints(p, _currentPoints[0]);\n\n      delta.x = p.x - _currPoint.x;\n      delta.y = p.y - _currPoint.y;\n\n      if (_isZooming && numPoints > 1) {\n        // Handle behaviour for more than 1 point\n        _currPoint.x = p.x;\n        _currPoint.y = p.y; // check if one of two points changed\n\n        if (!delta.x && !delta.y && _isEqualPoints(_currentPoints[1], p2)) {\n          return;\n        }\n\n        _equalizePoints(p2, _currentPoints[1]);\n\n        if (!_zoomStarted) {\n          _zoomStarted = true;\n\n          _shout('zoomGestureStarted');\n        } // Distance between two points\n\n\n        var pointsDistance = _calculatePointsDistance(p, p2);\n\n        var zoomLevel = _calculateZoomLevel(pointsDistance); // slightly over the of initial zoom level\n\n\n        if (zoomLevel > self.currItem.initialZoomLevel + self.currItem.initialZoomLevel / 15) {\n          _wasOverInitialZoom = true;\n        } // Apply the friction if zoom level is out of the bounds\n\n\n        var zoomFriction = 1,\n            minZoomLevel = _getMinZoomLevel(),\n            maxZoomLevel = _getMaxZoomLevel();\n\n        if (zoomLevel < minZoomLevel) {\n          if (_options.pinchToClose && !_wasOverInitialZoom && _startZoomLevel <= self.currItem.initialZoomLevel) {\n            // fade out background if zooming out\n            var minusDiff = minZoomLevel - zoomLevel;\n            var percent = 1 - minusDiff / (minZoomLevel / 1.2);\n\n            _applyBgOpacity(percent);\n\n            _shout('onPinchClose', percent);\n\n            _opacityChanged = true;\n          } else {\n            zoomFriction = (minZoomLevel - zoomLevel) / minZoomLevel;\n\n            if (zoomFriction > 1) {\n              zoomFriction = 1;\n            }\n\n            zoomLevel = minZoomLevel - zoomFriction * (minZoomLevel / 3);\n          }\n        } else if (zoomLevel > maxZoomLevel) {\n          // 1.5 - extra zoom level above the max. E.g. if max is x6, real max 6 + 1.5 = 7.5\n          zoomFriction = (zoomLevel - maxZoomLevel) / (minZoomLevel * 6);\n\n          if (zoomFriction > 1) {\n            zoomFriction = 1;\n          }\n\n          zoomLevel = maxZoomLevel + zoomFriction * minZoomLevel;\n        }\n\n        if (zoomFriction < 0) {\n          zoomFriction = 0;\n        } // distance between touch points after friction is applied\n\n\n        _currPointsDistance = pointsDistance; // _centerPoint - The point in the middle of two pointers\n\n        _findCenterOfPoints(p, p2, _centerPoint); // paning with two pointers pressed\n\n\n        _currPanDist.x += _centerPoint.x - _currCenterPoint.x;\n        _currPanDist.y += _centerPoint.y - _currCenterPoint.y;\n\n        _equalizePoints(_currCenterPoint, _centerPoint);\n\n        _panOffset.x = _calculatePanOffset('x', zoomLevel);\n        _panOffset.y = _calculatePanOffset('y', zoomLevel);\n        _isZoomingIn = zoomLevel > _currZoomLevel;\n        _currZoomLevel = zoomLevel;\n\n        _applyCurrentZoomPan();\n      } else {\n        // handle behaviour for one point (dragging or panning)\n        if (!_direction) {\n          return;\n        }\n\n        if (_isFirstMove) {\n          _isFirstMove = false; // subtract drag distance that was used during the detection direction  \n\n          if (Math.abs(delta.x) >= DIRECTION_CHECK_OFFSET) {\n            delta.x -= _currentPoints[0].x - _startPoint.x;\n          }\n\n          if (Math.abs(delta.y) >= DIRECTION_CHECK_OFFSET) {\n            delta.y -= _currentPoints[0].y - _startPoint.y;\n          }\n        }\n\n        _currPoint.x = p.x;\n        _currPoint.y = p.y; // do nothing if pointers position hasn't changed\n\n        if (delta.x === 0 && delta.y === 0) {\n          return;\n        }\n\n        if (_direction === 'v' && _options.closeOnVerticalDrag) {\n          if (!_canPan()) {\n            _currPanDist.y += delta.y;\n            _panOffset.y += delta.y;\n\n            var opacityRatio = _calculateVerticalDragOpacityRatio();\n\n            _verticalDragInitiated = true;\n\n            _shout('onVerticalDrag', opacityRatio);\n\n            _applyBgOpacity(opacityRatio);\n\n            _applyCurrentZoomPan();\n\n            return;\n          }\n        }\n\n        _pushPosPoint(_getCurrentTime(), p.x, p.y);\n\n        _moved = true;\n        _currPanBounds = self.currItem.bounds;\n\n        var mainScrollChanged = _panOrMoveMainScroll('x', delta);\n\n        if (!mainScrollChanged) {\n          _panOrMoveMainScroll('y', delta);\n\n          _roundPoint(_panOffset);\n\n          _applyCurrentZoomPan();\n        }\n      }\n    },\n        // Pointerup/pointercancel/touchend/touchcancel/mouseup event handler\n    _onDragRelease = function (e) {\n      if (_features.isOldAndroid) {\n        if (_oldAndroidTouchEndTimeout && e.type === 'mouseup') {\n          return;\n        } // on Android (v4.1, 4.2, 4.3 & possibly older) \n        // ghost mousedown/up event isn't preventable via e.preventDefault,\n        // which causes fake mousedown event\n        // so we block mousedown/up for 600ms\n\n\n        if (e.type.indexOf('touch') > -1) {\n          clearTimeout(_oldAndroidTouchEndTimeout);\n          _oldAndroidTouchEndTimeout = setTimeout(function () {\n            _oldAndroidTouchEndTimeout = 0;\n          }, 600);\n        }\n      }\n\n      _shout('pointerUp');\n\n      if (_preventDefaultEventBehaviour(e, false)) {\n        e.preventDefault();\n      }\n\n      var releasePoint;\n\n      if (_pointerEventEnabled) {\n        var pointerIndex = framework.arraySearch(_currPointers, e.pointerId, 'id');\n\n        if (pointerIndex > -1) {\n          releasePoint = _currPointers.splice(pointerIndex, 1)[0];\n\n          if (navigator.msPointerEnabled) {\n            var MSPOINTER_TYPES = {\n              4: 'mouse',\n              // event.MSPOINTER_TYPE_MOUSE\n              2: 'touch',\n              // event.MSPOINTER_TYPE_TOUCH \n              3: 'pen' // event.MSPOINTER_TYPE_PEN\n\n            };\n            releasePoint.type = MSPOINTER_TYPES[e.pointerType];\n\n            if (!releasePoint.type) {\n              releasePoint.type = e.pointerType || 'mouse';\n            }\n          } else {\n            releasePoint.type = e.pointerType || 'mouse';\n          }\n        }\n      }\n\n      var touchList = _getTouchPoints(e),\n          gestureType,\n          numPoints = touchList.length;\n\n      if (e.type === 'mouseup') {\n        numPoints = 0;\n      } // Do nothing if there were 3 touch points or more\n\n\n      if (numPoints === 2) {\n        _currentPoints = null;\n        return true;\n      } // if second pointer released\n\n\n      if (numPoints === 1) {\n        _equalizePoints(_startPoint, touchList[0]);\n      } // pointer hasn't moved, send \"tap release\" point\n\n\n      if (numPoints === 0 && !_direction && !_mainScrollAnimating) {\n        if (!releasePoint) {\n          if (e.type === 'mouseup') {\n            releasePoint = {\n              x: e.pageX,\n              y: e.pageY,\n              type: 'mouse'\n            };\n          } else if (e.changedTouches && e.changedTouches[0]) {\n            releasePoint = {\n              x: e.changedTouches[0].pageX,\n              y: e.changedTouches[0].pageY,\n              type: 'touch'\n            };\n          }\n        }\n\n        _shout('touchRelease', e, releasePoint);\n      } // Difference in time between releasing of two last touch points (zoom gesture)\n\n\n      var releaseTimeDiff = -1; // Gesture completed, no pointers left\n\n      if (numPoints === 0) {\n        _isDragging = false;\n        framework.unbind(window, _upMoveEvents, self);\n\n        _stopDragUpdateLoop();\n\n        if (_isZooming) {\n          // Two points released at the same time\n          releaseTimeDiff = 0;\n        } else if (_lastReleaseTime !== -1) {\n          releaseTimeDiff = _getCurrentTime() - _lastReleaseTime;\n        }\n      }\n\n      _lastReleaseTime = numPoints === 1 ? _getCurrentTime() : -1;\n\n      if (releaseTimeDiff !== -1 && releaseTimeDiff < 150) {\n        gestureType = 'zoom';\n      } else {\n        gestureType = 'swipe';\n      }\n\n      if (_isZooming && numPoints < 2) {\n        _isZooming = false; // Only second point released\n\n        if (numPoints === 1) {\n          gestureType = 'zoomPointerUp';\n        }\n\n        _shout('zoomGestureEnded');\n      }\n\n      _currentPoints = null;\n\n      if (!_moved && !_zoomStarted && !_mainScrollAnimating && !_verticalDragInitiated) {\n        // nothing to animate\n        return;\n      }\n\n      _stopAllAnimations();\n\n      if (!_releaseAnimData) {\n        _releaseAnimData = _initDragReleaseAnimationData();\n      }\n\n      _releaseAnimData.calculateSwipeSpeed('x');\n\n      if (_verticalDragInitiated) {\n        var opacityRatio = _calculateVerticalDragOpacityRatio();\n\n        if (opacityRatio < _options.verticalDragRange) {\n          self.close();\n        } else {\n          var initalPanY = _panOffset.y,\n              initialBgOpacity = _bgOpacity;\n\n          _animateProp('verticalDrag', 0, 1, 300, framework.easing.cubic.out, function (now) {\n            _panOffset.y = (self.currItem.initialPosition.y - initalPanY) * now + initalPanY;\n\n            _applyBgOpacity((1 - initialBgOpacity) * now + initialBgOpacity);\n\n            _applyCurrentZoomPan();\n          });\n\n          _shout('onVerticalDrag', 1);\n        }\n\n        return;\n      } // main scroll \n\n\n      if ((_mainScrollShifted || _mainScrollAnimating) && numPoints === 0) {\n        var itemChanged = _finishSwipeMainScrollGesture(gestureType, _releaseAnimData);\n\n        if (itemChanged) {\n          return;\n        }\n\n        gestureType = 'zoomPointerUp';\n      } // prevent zoom/pan animation when main scroll animation runs\n\n\n      if (_mainScrollAnimating) {\n        return;\n      } // Complete simple zoom gesture (reset zoom level if it's out of the bounds)  \n\n\n      if (gestureType !== 'swipe') {\n        _completeZoomGesture();\n\n        return;\n      } // Complete pan gesture if main scroll is not shifted, and it's possible to pan current image\n\n\n      if (!_mainScrollShifted && _currZoomLevel > self.currItem.fitRatio) {\n        _completePanGesture(_releaseAnimData);\n      }\n    },\n        // Returns object with data about gesture\n    // It's created only once and then reused\n    _initDragReleaseAnimationData = function () {\n      // temp local vars\n      var lastFlickDuration, tempReleasePos; // s = this\n\n      var s = {\n        lastFlickOffset: {},\n        lastFlickDist: {},\n        lastFlickSpeed: {},\n        slowDownRatio: {},\n        slowDownRatioReverse: {},\n        speedDecelerationRatio: {},\n        speedDecelerationRatioAbs: {},\n        distanceOffset: {},\n        backAnimDestination: {},\n        backAnimStarted: {},\n        calculateSwipeSpeed: function (axis) {\n          if (_posPoints.length > 1) {\n            lastFlickDuration = _getCurrentTime() - _gestureCheckSpeedTime + 50;\n            tempReleasePos = _posPoints[_posPoints.length - 2][axis];\n          } else {\n            lastFlickDuration = _getCurrentTime() - _gestureStartTime; // total gesture duration\n\n            tempReleasePos = _startPoint[axis];\n          }\n\n          s.lastFlickOffset[axis] = _currPoint[axis] - tempReleasePos;\n          s.lastFlickDist[axis] = Math.abs(s.lastFlickOffset[axis]);\n\n          if (s.lastFlickDist[axis] > 20) {\n            s.lastFlickSpeed[axis] = s.lastFlickOffset[axis] / lastFlickDuration;\n          } else {\n            s.lastFlickSpeed[axis] = 0;\n          }\n\n          if (Math.abs(s.lastFlickSpeed[axis]) < 0.1) {\n            s.lastFlickSpeed[axis] = 0;\n          }\n\n          s.slowDownRatio[axis] = 0.95;\n          s.slowDownRatioReverse[axis] = 1 - s.slowDownRatio[axis];\n          s.speedDecelerationRatio[axis] = 1;\n        },\n        calculateOverBoundsAnimOffset: function (axis, speed) {\n          if (!s.backAnimStarted[axis]) {\n            if (_panOffset[axis] > _currPanBounds.min[axis]) {\n              s.backAnimDestination[axis] = _currPanBounds.min[axis];\n            } else if (_panOffset[axis] < _currPanBounds.max[axis]) {\n              s.backAnimDestination[axis] = _currPanBounds.max[axis];\n            }\n\n            if (s.backAnimDestination[axis] !== undefined) {\n              s.slowDownRatio[axis] = 0.7;\n              s.slowDownRatioReverse[axis] = 1 - s.slowDownRatio[axis];\n\n              if (s.speedDecelerationRatioAbs[axis] < 0.05) {\n                s.lastFlickSpeed[axis] = 0;\n                s.backAnimStarted[axis] = true;\n\n                _animateProp('bounceZoomPan' + axis, _panOffset[axis], s.backAnimDestination[axis], speed || 300, framework.easing.sine.out, function (pos) {\n                  _panOffset[axis] = pos;\n\n                  _applyCurrentZoomPan();\n                });\n              }\n            }\n          }\n        },\n        // Reduces the speed by slowDownRatio (per 10ms)\n        calculateAnimOffset: function (axis) {\n          if (!s.backAnimStarted[axis]) {\n            s.speedDecelerationRatio[axis] = s.speedDecelerationRatio[axis] * (s.slowDownRatio[axis] + s.slowDownRatioReverse[axis] - s.slowDownRatioReverse[axis] * s.timeDiff / 10);\n            s.speedDecelerationRatioAbs[axis] = Math.abs(s.lastFlickSpeed[axis] * s.speedDecelerationRatio[axis]);\n            s.distanceOffset[axis] = s.lastFlickSpeed[axis] * s.speedDecelerationRatio[axis] * s.timeDiff;\n            _panOffset[axis] += s.distanceOffset[axis];\n          }\n        },\n        panAnimLoop: function () {\n          if (_animations.zoomPan) {\n            _animations.zoomPan.raf = _requestAF(s.panAnimLoop);\n            s.now = _getCurrentTime();\n            s.timeDiff = s.now - s.lastNow;\n            s.lastNow = s.now;\n            s.calculateAnimOffset('x');\n            s.calculateAnimOffset('y');\n\n            _applyCurrentZoomPan();\n\n            s.calculateOverBoundsAnimOffset('x');\n            s.calculateOverBoundsAnimOffset('y');\n\n            if (s.speedDecelerationRatioAbs.x < 0.05 && s.speedDecelerationRatioAbs.y < 0.05) {\n              // round pan position\n              _panOffset.x = Math.round(_panOffset.x);\n              _panOffset.y = Math.round(_panOffset.y);\n\n              _applyCurrentZoomPan();\n\n              _stopAnimation('zoomPan');\n\n              return;\n            }\n          }\n        }\n      };\n      return s;\n    },\n        _completePanGesture = function (animData) {\n      // calculate swipe speed for Y axis (paanning)\n      animData.calculateSwipeSpeed('y');\n      _currPanBounds = self.currItem.bounds;\n      animData.backAnimDestination = {};\n      animData.backAnimStarted = {}; // Avoid acceleration animation if speed is too low\n\n      if (Math.abs(animData.lastFlickSpeed.x) <= 0.05 && Math.abs(animData.lastFlickSpeed.y) <= 0.05) {\n        animData.speedDecelerationRatioAbs.x = animData.speedDecelerationRatioAbs.y = 0; // Run pan drag release animation. E.g. if you drag image and release finger without momentum.\n\n        animData.calculateOverBoundsAnimOffset('x');\n        animData.calculateOverBoundsAnimOffset('y');\n        return true;\n      } // Animation loop that controls the acceleration after pan gesture ends\n\n\n      _registerStartAnimation('zoomPan');\n\n      animData.lastNow = _getCurrentTime();\n      animData.panAnimLoop();\n    },\n        _finishSwipeMainScrollGesture = function (gestureType, _releaseAnimData) {\n      var itemChanged;\n\n      if (!_mainScrollAnimating) {\n        _currZoomedItemIndex = _currentItemIndex;\n      }\n\n      var itemsDiff;\n\n      if (gestureType === 'swipe') {\n        var totalShiftDist = _currPoint.x - _startPoint.x,\n            isFastLastFlick = _releaseAnimData.lastFlickDist.x < 10; // if container is shifted for more than MIN_SWIPE_DISTANCE, \n        // and last flick gesture was in right direction\n\n        if (totalShiftDist > MIN_SWIPE_DISTANCE && (isFastLastFlick || _releaseAnimData.lastFlickOffset.x > 20)) {\n          // go to prev item\n          itemsDiff = -1;\n        } else if (totalShiftDist < -MIN_SWIPE_DISTANCE && (isFastLastFlick || _releaseAnimData.lastFlickOffset.x < -20)) {\n          // go to next item\n          itemsDiff = 1;\n        }\n      }\n\n      var nextCircle;\n\n      if (itemsDiff) {\n        _currentItemIndex += itemsDiff;\n\n        if (_currentItemIndex < 0) {\n          _currentItemIndex = _options.loop ? _getNumItems() - 1 : 0;\n          nextCircle = true;\n        } else if (_currentItemIndex >= _getNumItems()) {\n          _currentItemIndex = _options.loop ? 0 : _getNumItems() - 1;\n          nextCircle = true;\n        }\n\n        if (!nextCircle || _options.loop) {\n          _indexDiff += itemsDiff;\n          _currPositionIndex -= itemsDiff;\n          itemChanged = true;\n        }\n      }\n\n      var animateToX = _slideSize.x * _currPositionIndex;\n      var animateToDist = Math.abs(animateToX - _mainScrollPos.x);\n      var finishAnimDuration;\n\n      if (!itemChanged && animateToX > _mainScrollPos.x !== _releaseAnimData.lastFlickSpeed.x > 0) {\n        // \"return to current\" duration, e.g. when dragging from slide 0 to -1\n        finishAnimDuration = 333;\n      } else {\n        finishAnimDuration = Math.abs(_releaseAnimData.lastFlickSpeed.x) > 0 ? animateToDist / Math.abs(_releaseAnimData.lastFlickSpeed.x) : 333;\n        finishAnimDuration = Math.min(finishAnimDuration, 400);\n        finishAnimDuration = Math.max(finishAnimDuration, 250);\n      }\n\n      if (_currZoomedItemIndex === _currentItemIndex) {\n        itemChanged = false;\n      }\n\n      _mainScrollAnimating = true;\n\n      _shout('mainScrollAnimStart');\n\n      _animateProp('mainScroll', _mainScrollPos.x, animateToX, finishAnimDuration, framework.easing.cubic.out, _moveMainScroll, function () {\n        _stopAllAnimations();\n\n        _mainScrollAnimating = false;\n        _currZoomedItemIndex = -1;\n\n        if (itemChanged || _currZoomedItemIndex !== _currentItemIndex) {\n          self.updateCurrItem();\n        }\n\n        _shout('mainScrollAnimComplete');\n      });\n\n      if (itemChanged) {\n        self.updateCurrItem(true);\n      }\n\n      return itemChanged;\n    },\n        _calculateZoomLevel = function (touchesDistance) {\n      return 1 / _startPointsDistance * touchesDistance * _startZoomLevel;\n    },\n        // Resets zoom if it's out of bounds\n    _completeZoomGesture = function () {\n      var destZoomLevel = _currZoomLevel,\n          minZoomLevel = _getMinZoomLevel(),\n          maxZoomLevel = _getMaxZoomLevel();\n\n      if (_currZoomLevel < minZoomLevel) {\n        destZoomLevel = minZoomLevel;\n      } else if (_currZoomLevel > maxZoomLevel) {\n        destZoomLevel = maxZoomLevel;\n      }\n\n      var destOpacity = 1,\n          onUpdate,\n          initialOpacity = _bgOpacity;\n\n      if (_opacityChanged && !_isZoomingIn && !_wasOverInitialZoom && _currZoomLevel < minZoomLevel) {\n        //_closedByScroll = true;\n        self.close();\n        return true;\n      }\n\n      if (_opacityChanged) {\n        onUpdate = function (now) {\n          _applyBgOpacity((destOpacity - initialOpacity) * now + initialOpacity);\n        };\n      }\n\n      self.zoomTo(destZoomLevel, 0, 200, framework.easing.cubic.out, onUpdate);\n      return true;\n    };\n\n    _registerModule('Gestures', {\n      publicMethods: {\n        initGestures: function () {\n          // helper function that builds touch/pointer/mouse events\n          var addEventNames = function (pref, down, move, up, cancel) {\n            _dragStartEvent = pref + down;\n            _dragMoveEvent = pref + move;\n            _dragEndEvent = pref + up;\n\n            if (cancel) {\n              _dragCancelEvent = pref + cancel;\n            } else {\n              _dragCancelEvent = '';\n            }\n          };\n\n          _pointerEventEnabled = _features.pointerEvent;\n\n          if (_pointerEventEnabled && _features.touch) {\n            // we don't need touch events, if browser supports pointer events\n            _features.touch = false;\n          }\n\n          if (_pointerEventEnabled) {\n            if (navigator.msPointerEnabled) {\n              // IE10 pointer events are case-sensitive\n              addEventNames('MSPointer', 'Down', 'Move', 'Up', 'Cancel');\n            } else {\n              addEventNames('pointer', 'down', 'move', 'up', 'cancel');\n            }\n          } else if (_features.touch) {\n            addEventNames('touch', 'start', 'move', 'end', 'cancel');\n            _likelyTouchDevice = true;\n          } else {\n            addEventNames('mouse', 'down', 'move', 'up');\n          }\n\n          _upMoveEvents = _dragMoveEvent + ' ' + _dragEndEvent + ' ' + _dragCancelEvent;\n          _downEvents = _dragStartEvent;\n\n          if (_pointerEventEnabled && !_likelyTouchDevice) {\n            _likelyTouchDevice = navigator.maxTouchPoints > 1 || navigator.msMaxTouchPoints > 1;\n          } // make variable public\n\n\n          self.likelyTouchDevice = _likelyTouchDevice;\n          _globalEventHandlers[_dragStartEvent] = _onDragStart;\n          _globalEventHandlers[_dragMoveEvent] = _onDragMove;\n          _globalEventHandlers[_dragEndEvent] = _onDragRelease; // the Kraken\n\n          if (_dragCancelEvent) {\n            _globalEventHandlers[_dragCancelEvent] = _globalEventHandlers[_dragEndEvent];\n          } // Bind mouse events on device with detected hardware touch support, in case it supports multiple types of input.\n\n\n          if (_features.touch) {\n            _downEvents += ' mousedown';\n            _upMoveEvents += ' mousemove mouseup';\n            _globalEventHandlers.mousedown = _globalEventHandlers[_dragStartEvent];\n            _globalEventHandlers.mousemove = _globalEventHandlers[_dragMoveEvent];\n            _globalEventHandlers.mouseup = _globalEventHandlers[_dragEndEvent];\n          }\n\n          if (!_likelyTouchDevice) {\n            // don't allow pan to next slide from zoomed state on Desktop\n            _options.allowPanToNext = false;\n          }\n        }\n      }\n    });\n    /*>>gestures*/\n\n    /*>>show-hide-transition*/\n\n    /**\n     * show-hide-transition.js:\n     *\n     * Manages initial opening or closing transition.\n     *\n     * If you're not planning to use transition for gallery at all,\n     * you may set options hideAnimationDuration and showAnimationDuration to 0,\n     * and just delete startAnimation function.\n     * \n     */\n\n\n    var _showOrHideTimeout,\n        _showOrHide = function (item, img, out, completeFn) {\n      if (_showOrHideTimeout) {\n        clearTimeout(_showOrHideTimeout);\n      }\n\n      _initialZoomRunning = true;\n      _initialContentSet = true; // dimensions of small thumbnail {x:,y:,w:}.\n      // Height is optional, as calculated based on large image.\n\n      var thumbBounds;\n\n      if (item.initialLayout) {\n        thumbBounds = item.initialLayout;\n        item.initialLayout = null;\n      } else {\n        thumbBounds = _options.getThumbBoundsFn && _options.getThumbBoundsFn(_currentItemIndex);\n      }\n\n      var duration = out ? _options.hideAnimationDuration : _options.showAnimationDuration;\n\n      var onComplete = function () {\n        _stopAnimation('initialZoom');\n\n        if (!out) {\n          _applyBgOpacity(1);\n\n          if (img) {\n            img.style.display = 'block';\n          }\n\n          framework.addClass(template, 'pswp--animated-in');\n\n          _shout('initialZoom' + (out ? 'OutEnd' : 'InEnd'));\n        } else {\n          self.template.removeAttribute('style');\n          self.bg.removeAttribute('style');\n        }\n\n        if (completeFn) {\n          completeFn();\n        }\n\n        _initialZoomRunning = false;\n      }; // if bounds aren't provided, just open gallery without animation\n\n\n      if (!duration || !thumbBounds || thumbBounds.x === undefined) {\n        _shout('initialZoom' + (out ? 'Out' : 'In'));\n\n        _currZoomLevel = item.initialZoomLevel;\n\n        _equalizePoints(_panOffset, item.initialPosition);\n\n        _applyCurrentZoomPan();\n\n        template.style.opacity = out ? 0 : 1;\n\n        _applyBgOpacity(1);\n\n        if (duration) {\n          setTimeout(function () {\n            onComplete();\n          }, duration);\n        } else {\n          onComplete();\n        }\n\n        return;\n      }\n\n      var startAnimation = function () {\n        var closeWithRaf = _closedByScroll,\n            fadeEverything = !self.currItem.src || self.currItem.loadError || _options.showHideOpacity; // apply hw-acceleration to image\n\n        if (item.miniImg) {\n          item.miniImg.style.webkitBackfaceVisibility = 'hidden';\n        }\n\n        if (!out) {\n          _currZoomLevel = thumbBounds.w / item.w;\n          _panOffset.x = thumbBounds.x;\n          _panOffset.y = thumbBounds.y - _initalWindowScrollY;\n          self[fadeEverything ? 'template' : 'bg'].style.opacity = 0.001;\n\n          _applyCurrentZoomPan();\n        }\n\n        _registerStartAnimation('initialZoom');\n\n        if (out && !closeWithRaf) {\n          framework.removeClass(template, 'pswp--animated-in');\n        }\n\n        if (fadeEverything) {\n          if (out) {\n            framework[(closeWithRaf ? 'remove' : 'add') + 'Class'](template, 'pswp--animate_opacity');\n          } else {\n            setTimeout(function () {\n              framework.addClass(template, 'pswp--animate_opacity');\n            }, 30);\n          }\n        }\n\n        _showOrHideTimeout = setTimeout(function () {\n          _shout('initialZoom' + (out ? 'Out' : 'In'));\n\n          if (!out) {\n            // \"in\" animation always uses CSS transitions (instead of rAF).\n            // CSS transition work faster here, \n            // as developer may also want to animate other things, \n            // like ui on top of sliding area, which can be animated just via CSS\n            _currZoomLevel = item.initialZoomLevel;\n\n            _equalizePoints(_panOffset, item.initialPosition);\n\n            _applyCurrentZoomPan();\n\n            _applyBgOpacity(1);\n\n            if (fadeEverything) {\n              template.style.opacity = 1;\n            } else {\n              _applyBgOpacity(1);\n            }\n\n            _showOrHideTimeout = setTimeout(onComplete, duration + 20);\n          } else {\n            // \"out\" animation uses rAF only when PhotoSwipe is closed by browser scroll, to recalculate position\n            var destZoomLevel = thumbBounds.w / item.w,\n                initialPanOffset = {\n              x: _panOffset.x,\n              y: _panOffset.y\n            },\n                initialZoomLevel = _currZoomLevel,\n                initalBgOpacity = _bgOpacity,\n                onUpdate = function (now) {\n              if (now === 1) {\n                _currZoomLevel = destZoomLevel;\n                _panOffset.x = thumbBounds.x;\n                _panOffset.y = thumbBounds.y - _currentWindowScrollY;\n              } else {\n                _currZoomLevel = (destZoomLevel - initialZoomLevel) * now + initialZoomLevel;\n                _panOffset.x = (thumbBounds.x - initialPanOffset.x) * now + initialPanOffset.x;\n                _panOffset.y = (thumbBounds.y - _currentWindowScrollY - initialPanOffset.y) * now + initialPanOffset.y;\n              }\n\n              _applyCurrentZoomPan();\n\n              if (fadeEverything) {\n                template.style.opacity = 1 - now;\n              } else {\n                _applyBgOpacity(initalBgOpacity - now * initalBgOpacity);\n              }\n            };\n\n            if (closeWithRaf) {\n              _animateProp('initialZoom', 0, 1, duration, framework.easing.cubic.out, onUpdate, onComplete);\n            } else {\n              onUpdate(1);\n              _showOrHideTimeout = setTimeout(onComplete, duration + 20);\n            }\n          }\n        }, out ? 25 : 90); // Main purpose of this delay is to give browser time to paint and\n        // create composite layers of PhotoSwipe UI parts (background, controls, caption, arrows).\n        // Which avoids lag at the beginning of scale transition.\n      };\n\n      startAnimation();\n    };\n    /*>>show-hide-transition*/\n\n    /*>>items-controller*/\n\n    /**\n    *\n    * Controller manages gallery items, their dimensions, and their content.\n    * \n    */\n\n\n    var _items,\n        _tempPanAreaSize = {},\n        _imagesToAppendPool = [],\n        _initialContentSet,\n        _initialZoomRunning,\n        _controllerDefaultOptions = {\n      index: 0,\n      errorMsg: '<div class=\"pswp__error-msg\"><a href=\"%url%\" target=\"_blank\">The image</a> could not be loaded.</div>',\n      forceProgressiveLoading: false,\n      // TODO\n      preload: [1, 1],\n      getNumItemsFn: function () {\n        return _items.length;\n      }\n    };\n\n    var _getItemAt,\n        _getNumItems,\n        _initialIsLoop,\n        _getZeroBounds = function () {\n      return {\n        center: {\n          x: 0,\n          y: 0\n        },\n        max: {\n          x: 0,\n          y: 0\n        },\n        min: {\n          x: 0,\n          y: 0\n        }\n      };\n    },\n        _calculateSingleItemPanBounds = function (item, realPanElementW, realPanElementH) {\n      var bounds = item.bounds; // position of element when it's centered\n\n      bounds.center.x = Math.round((_tempPanAreaSize.x - realPanElementW) / 2);\n      bounds.center.y = Math.round((_tempPanAreaSize.y - realPanElementH) / 2) + item.vGap.top; // maximum pan position\n\n      bounds.max.x = realPanElementW > _tempPanAreaSize.x ? Math.round(_tempPanAreaSize.x - realPanElementW) : bounds.center.x;\n      bounds.max.y = realPanElementH > _tempPanAreaSize.y ? Math.round(_tempPanAreaSize.y - realPanElementH) + item.vGap.top : bounds.center.y; // minimum pan position\n\n      bounds.min.x = realPanElementW > _tempPanAreaSize.x ? 0 : bounds.center.x;\n      bounds.min.y = realPanElementH > _tempPanAreaSize.y ? item.vGap.top : bounds.center.y;\n    },\n        _calculateItemSize = function (item, viewportSize, zoomLevel) {\n      if (item.src && !item.loadError) {\n        var isInitial = !zoomLevel;\n\n        if (isInitial) {\n          if (!item.vGap) {\n            item.vGap = {\n              top: 0,\n              bottom: 0\n            };\n          } // allows overriding vertical margin for individual items\n\n\n          _shout('parseVerticalMargin', item);\n        }\n\n        _tempPanAreaSize.x = viewportSize.x;\n        _tempPanAreaSize.y = viewportSize.y - item.vGap.top - item.vGap.bottom;\n\n        if (isInitial) {\n          var hRatio = _tempPanAreaSize.x / item.w;\n          var vRatio = _tempPanAreaSize.y / item.h;\n          item.fitRatio = hRatio < vRatio ? hRatio : vRatio; //item.fillRatio = hRatio > vRatio ? hRatio : vRatio;\n\n          var scaleMode = _options.scaleMode;\n\n          if (scaleMode === 'orig') {\n            zoomLevel = 1;\n          } else if (scaleMode === 'fit') {\n            zoomLevel = item.fitRatio;\n          }\n\n          if (zoomLevel > 1) {\n            zoomLevel = 1;\n          }\n\n          item.initialZoomLevel = zoomLevel;\n\n          if (!item.bounds) {\n            // reuse bounds object\n            item.bounds = _getZeroBounds();\n          }\n        }\n\n        if (!zoomLevel) {\n          return;\n        }\n\n        _calculateSingleItemPanBounds(item, item.w * zoomLevel, item.h * zoomLevel);\n\n        if (isInitial && zoomLevel === item.initialZoomLevel) {\n          item.initialPosition = item.bounds.center;\n        }\n\n        return item.bounds;\n      } else {\n        item.w = item.h = 0;\n        item.initialZoomLevel = item.fitRatio = 1;\n        item.bounds = _getZeroBounds();\n        item.initialPosition = item.bounds.center; // if it's not image, we return zero bounds (content is not zoomable)\n\n        return item.bounds;\n      }\n    },\n        _appendImage = function (index, item, baseDiv, img, preventAnimation, keepPlaceholder) {\n      if (item.loadError) {\n        return;\n      }\n\n      if (img) {\n        item.imageAppended = true;\n\n        _setImageSize(item, img, item === self.currItem && _renderMaxResolution);\n\n        baseDiv.appendChild(img);\n\n        if (keepPlaceholder) {\n          setTimeout(function () {\n            if (item && item.loaded && item.placeholder) {\n              item.placeholder.style.display = 'none';\n              item.placeholder = null;\n            }\n          }, 500);\n        }\n      }\n    },\n        _preloadImage = function (item) {\n      item.loading = true;\n      item.loaded = false;\n      var img = item.img = framework.createEl('pswp__img', 'img');\n\n      var onComplete = function () {\n        item.loading = false;\n        item.loaded = true;\n\n        if (item.loadComplete) {\n          item.loadComplete(item);\n        } else {\n          item.img = null; // no need to store image object\n        }\n\n        img.onload = img.onerror = null;\n        img = null;\n      };\n\n      img.onload = onComplete;\n\n      img.onerror = function () {\n        item.loadError = true;\n        onComplete();\n      };\n\n      img.src = item.src; // + '?a=' + Math.random();\n\n      return img;\n    },\n        _checkForError = function (item, cleanUp) {\n      if (item.src && item.loadError && item.container) {\n        if (cleanUp) {\n          item.container.innerHTML = '';\n        }\n\n        item.container.innerHTML = _options.errorMsg.replace('%url%', item.src);\n        return true;\n      }\n    },\n        _setImageSize = function (item, img, maxRes) {\n      if (!item.src) {\n        return;\n      }\n\n      if (!img) {\n        img = item.container.lastChild;\n      }\n\n      var w = maxRes ? item.w : Math.round(item.w * item.fitRatio),\n          h = maxRes ? item.h : Math.round(item.h * item.fitRatio);\n\n      if (item.placeholder && !item.loaded) {\n        item.placeholder.style.width = w + 'px';\n        item.placeholder.style.height = h + 'px';\n      }\n\n      img.style.width = w + 'px';\n      img.style.height = h + 'px';\n    },\n        _appendImagesPool = function () {\n      if (_imagesToAppendPool.length) {\n        var poolItem;\n\n        for (var i = 0; i < _imagesToAppendPool.length; i++) {\n          poolItem = _imagesToAppendPool[i];\n\n          if (poolItem.holder.index === poolItem.index) {\n            _appendImage(poolItem.index, poolItem.item, poolItem.baseDiv, poolItem.img, false, poolItem.clearPlaceholder);\n          }\n        }\n\n        _imagesToAppendPool = [];\n      }\n    };\n\n    _registerModule('Controller', {\n      publicMethods: {\n        lazyLoadItem: function (index) {\n          index = _getLoopedId(index);\n\n          var item = _getItemAt(index);\n\n          if (!item || (item.loaded || item.loading) && !_itemsNeedUpdate) {\n            return;\n          }\n\n          _shout('gettingData', index, item);\n\n          if (!item.src) {\n            return;\n          }\n\n          _preloadImage(item);\n        },\n        initController: function () {\n          framework.extend(_options, _controllerDefaultOptions, true);\n          self.items = _items = items;\n          _getItemAt = self.getItemAt;\n          _getNumItems = _options.getNumItemsFn; //self.getNumItems;\n\n          _initialIsLoop = _options.loop;\n\n          if (_getNumItems() < 3) {\n            _options.loop = false; // disable loop if less then 3 items\n          }\n\n          _listen('beforeChange', function (diff) {\n            var p = _options.preload,\n                isNext = diff === null ? true : diff >= 0,\n                preloadBefore = Math.min(p[0], _getNumItems()),\n                preloadAfter = Math.min(p[1], _getNumItems()),\n                i;\n\n            for (i = 1; i <= (isNext ? preloadAfter : preloadBefore); i++) {\n              self.lazyLoadItem(_currentItemIndex + i);\n            }\n\n            for (i = 1; i <= (isNext ? preloadBefore : preloadAfter); i++) {\n              self.lazyLoadItem(_currentItemIndex - i);\n            }\n          });\n\n          _listen('initialLayout', function () {\n            self.currItem.initialLayout = _options.getThumbBoundsFn && _options.getThumbBoundsFn(_currentItemIndex);\n          });\n\n          _listen('mainScrollAnimComplete', _appendImagesPool);\n\n          _listen('initialZoomInEnd', _appendImagesPool);\n\n          _listen('destroy', function () {\n            var item;\n\n            for (var i = 0; i < _items.length; i++) {\n              item = _items[i]; // remove reference to DOM elements, for GC\n\n              if (item.container) {\n                item.container = null;\n              }\n\n              if (item.placeholder) {\n                item.placeholder = null;\n              }\n\n              if (item.img) {\n                item.img = null;\n              }\n\n              if (item.preloader) {\n                item.preloader = null;\n              }\n\n              if (item.loadError) {\n                item.loaded = item.loadError = false;\n              }\n            }\n\n            _imagesToAppendPool = null;\n          });\n        },\n        getItemAt: function (index) {\n          if (index >= 0) {\n            return _items[index] !== undefined ? _items[index] : false;\n          }\n\n          return false;\n        },\n        allowProgressiveImg: function () {\n          // 1. Progressive image loading isn't working on webkit/blink \n          //    when hw-acceleration (e.g. translateZ) is applied to IMG element.\n          //    That's why in PhotoSwipe parent element gets zoom transform, not image itself.\n          //    \n          // 2. Progressive image loading sometimes blinks in webkit/blink when applying animation to parent element.\n          //    That's why it's disabled on touch devices (mainly because of swipe transition)\n          //    \n          // 3. Progressive image loading sometimes doesn't work in IE (up to 11).\n          // Don't allow progressive loading on non-large touch devices\n          return _options.forceProgressiveLoading || !_likelyTouchDevice || _options.mouseUsed || screen.width > 1200; // 1200 - to eliminate touch devices with large screen (like Chromebook Pixel)\n        },\n        setContent: function (holder, index) {\n          if (_options.loop) {\n            index = _getLoopedId(index);\n          }\n\n          var prevItem = self.getItemAt(holder.index);\n\n          if (prevItem) {\n            prevItem.container = null;\n          }\n\n          var item = self.getItemAt(index),\n              img;\n\n          if (!item) {\n            holder.el.innerHTML = '';\n            return;\n          } // allow to override data\n\n\n          _shout('gettingData', index, item);\n\n          holder.index = index;\n          holder.item = item; // base container DIV is created only once for each of 3 holders\n\n          var baseDiv = item.container = framework.createEl('pswp__zoom-wrap');\n\n          if (!item.src && item.html) {\n            if (item.html.tagName) {\n              baseDiv.appendChild(item.html);\n            } else {\n              baseDiv.innerHTML = item.html;\n            }\n          }\n\n          _checkForError(item);\n\n          _calculateItemSize(item, _viewportSize);\n\n          if (item.src && !item.loadError && !item.loaded) {\n            item.loadComplete = function (item) {\n              // gallery closed before image finished loading\n              if (!_isOpen) {\n                return;\n              } // check if holder hasn't changed while image was loading\n\n\n              if (holder && holder.index === index) {\n                if (_checkForError(item, true)) {\n                  item.loadComplete = item.img = null;\n\n                  _calculateItemSize(item, _viewportSize);\n\n                  _applyZoomPanToItem(item);\n\n                  if (holder.index === _currentItemIndex) {\n                    // recalculate dimensions\n                    self.updateCurrZoomItem();\n                  }\n\n                  return;\n                }\n\n                if (!item.imageAppended) {\n                  if (_features.transform && (_mainScrollAnimating || _initialZoomRunning)) {\n                    _imagesToAppendPool.push({\n                      item: item,\n                      baseDiv: baseDiv,\n                      img: item.img,\n                      index: index,\n                      holder: holder,\n                      clearPlaceholder: true\n                    });\n                  } else {\n                    _appendImage(index, item, baseDiv, item.img, _mainScrollAnimating || _initialZoomRunning, true);\n                  }\n                } else {\n                  // remove preloader & mini-img\n                  if (!_initialZoomRunning && item.placeholder) {\n                    item.placeholder.style.display = 'none';\n                    item.placeholder = null;\n                  }\n                }\n              }\n\n              item.loadComplete = null;\n              item.img = null; // no need to store image element after it's added\n\n              _shout('imageLoadComplete', index, item);\n            };\n\n            if (framework.features.transform) {\n              var placeholderClassName = 'pswp__img pswp__img--placeholder';\n              placeholderClassName += item.msrc ? '' : ' pswp__img--placeholder--blank';\n              var placeholder = framework.createEl(placeholderClassName, item.msrc ? 'img' : '');\n\n              if (item.msrc) {\n                placeholder.src = item.msrc;\n              }\n\n              _setImageSize(item, placeholder);\n\n              baseDiv.appendChild(placeholder);\n              item.placeholder = placeholder;\n            }\n\n            if (!item.loading) {\n              _preloadImage(item);\n            }\n\n            if (self.allowProgressiveImg()) {\n              // just append image\n              if (!_initialContentSet && _features.transform) {\n                _imagesToAppendPool.push({\n                  item: item,\n                  baseDiv: baseDiv,\n                  img: item.img,\n                  index: index,\n                  holder: holder\n                });\n              } else {\n                _appendImage(index, item, baseDiv, item.img, true, true);\n              }\n            }\n          } else if (item.src && !item.loadError) {\n            // image object is created every time, due to bugs of image loading & delay when switching images\n            img = framework.createEl('pswp__img', 'img');\n            img.style.opacity = 1;\n            img.src = item.src;\n\n            _setImageSize(item, img);\n\n            _appendImage(index, item, baseDiv, img, true);\n          }\n\n          if (!_initialContentSet && index === _currentItemIndex) {\n            _currZoomElementStyle = baseDiv.style;\n\n            _showOrHide(item, img || item.img);\n          } else {\n            _applyZoomPanToItem(item);\n          }\n\n          holder.el.innerHTML = '';\n          holder.el.appendChild(baseDiv);\n        },\n        cleanSlide: function (item) {\n          if (item.img) {\n            item.img.onload = item.img.onerror = null;\n          }\n\n          item.loaded = item.loading = item.img = item.imageAppended = false;\n        }\n      }\n    });\n    /*>>items-controller*/\n\n    /*>>tap*/\n\n    /**\n     * tap.js:\n     *\n     * Displatches tap and double-tap events.\n     * \n     */\n\n\n    var tapTimer,\n        tapReleasePoint = {},\n        _dispatchTapEvent = function (origEvent, releasePoint, pointerType) {\n      var e = document.createEvent('CustomEvent'),\n          eDetail = {\n        origEvent: origEvent,\n        target: origEvent.target,\n        releasePoint: releasePoint,\n        pointerType: pointerType || 'touch'\n      };\n      e.initCustomEvent('pswpTap', true, true, eDetail);\n      origEvent.target.dispatchEvent(e);\n    };\n\n    _registerModule('Tap', {\n      publicMethods: {\n        initTap: function () {\n          _listen('firstTouchStart', self.onTapStart);\n\n          _listen('touchRelease', self.onTapRelease);\n\n          _listen('destroy', function () {\n            tapReleasePoint = {};\n            tapTimer = null;\n          });\n        },\n        onTapStart: function (touchList) {\n          if (touchList.length > 1) {\n            clearTimeout(tapTimer);\n            tapTimer = null;\n          }\n        },\n        onTapRelease: function (e, releasePoint) {\n          if (!releasePoint) {\n            return;\n          }\n\n          if (!_moved && !_isMultitouch && !_numAnimations) {\n            var p0 = releasePoint;\n\n            if (tapTimer) {\n              clearTimeout(tapTimer);\n              tapTimer = null; // Check if taped on the same place\n\n              if (_isNearbyPoints(p0, tapReleasePoint)) {\n                _shout('doubleTap', p0);\n\n                return;\n              }\n            }\n\n            if (releasePoint.type === 'mouse') {\n              _dispatchTapEvent(e, releasePoint, 'mouse');\n\n              return;\n            }\n\n            var clickedTagName = e.target.tagName.toUpperCase(); // avoid double tap delay on buttons and elements that have class pswp__single-tap\n\n            if (clickedTagName === 'BUTTON' || framework.hasClass(e.target, 'pswp__single-tap')) {\n              _dispatchTapEvent(e, releasePoint);\n\n              return;\n            }\n\n            _equalizePoints(tapReleasePoint, p0);\n\n            tapTimer = setTimeout(function () {\n              _dispatchTapEvent(e, releasePoint);\n\n              tapTimer = null;\n            }, 300);\n          }\n        }\n      }\n    });\n    /*>>tap*/\n\n    /*>>desktop-zoom*/\n\n    /**\n     *\n     * desktop-zoom.js:\n     *\n     * - Binds mousewheel event for paning zoomed image.\n     * - Manages \"dragging\", \"zoomed-in\", \"zoom-out\" classes.\n     *   (which are used for cursors and zoom icon)\n     * - Adds toggleDesktopZoom function.\n     * \n     */\n\n\n    var _wheelDelta;\n\n    _registerModule('DesktopZoom', {\n      publicMethods: {\n        initDesktopZoom: function () {\n          if (_oldIE) {\n            // no zoom for old IE (<=8)\n            return;\n          }\n\n          if (_likelyTouchDevice) {\n            // if detected hardware touch support, we wait until mouse is used,\n            // and only then apply desktop-zoom features\n            _listen('mouseUsed', function () {\n              self.setupDesktopZoom();\n            });\n          } else {\n            self.setupDesktopZoom(true);\n          }\n        },\n        setupDesktopZoom: function (onInit) {\n          _wheelDelta = {};\n          var events = 'wheel mousewheel DOMMouseScroll';\n\n          _listen('bindEvents', function () {\n            framework.bind(template, events, self.handleMouseWheel);\n          });\n\n          _listen('unbindEvents', function () {\n            if (_wheelDelta) {\n              framework.unbind(template, events, self.handleMouseWheel);\n            }\n          });\n\n          self.mouseZoomedIn = false;\n\n          var hasDraggingClass,\n              updateZoomable = function () {\n            if (self.mouseZoomedIn) {\n              framework.removeClass(template, 'pswp--zoomed-in');\n              self.mouseZoomedIn = false;\n            }\n\n            if (_currZoomLevel < 1) {\n              framework.addClass(template, 'pswp--zoom-allowed');\n            } else {\n              framework.removeClass(template, 'pswp--zoom-allowed');\n            }\n\n            removeDraggingClass();\n          },\n              removeDraggingClass = function () {\n            if (hasDraggingClass) {\n              framework.removeClass(template, 'pswp--dragging');\n              hasDraggingClass = false;\n            }\n          };\n\n          _listen('resize', updateZoomable);\n\n          _listen('afterChange', updateZoomable);\n\n          _listen('pointerDown', function () {\n            if (self.mouseZoomedIn) {\n              hasDraggingClass = true;\n              framework.addClass(template, 'pswp--dragging');\n            }\n          });\n\n          _listen('pointerUp', removeDraggingClass);\n\n          if (!onInit) {\n            updateZoomable();\n          }\n        },\n        handleMouseWheel: function (e) {\n          if (_currZoomLevel <= self.currItem.fitRatio) {\n            if (_options.modal) {\n              if (!_options.closeOnScroll || _numAnimations || _isDragging) {\n                e.preventDefault();\n              } else if (_transformKey && Math.abs(e.deltaY) > 2) {\n                // close PhotoSwipe\n                // if browser supports transforms & scroll changed enough\n                _closedByScroll = true;\n                self.close();\n              }\n            }\n\n            return true;\n          } // allow just one event to fire\n\n\n          e.stopPropagation(); // https://developer.mozilla.org/en-US/docs/Web/Events/wheel\n\n          _wheelDelta.x = 0;\n\n          if ('deltaX' in e) {\n            if (e.deltaMode === 1\n            /* DOM_DELTA_LINE */\n            ) {\n                // 18 - average line height\n                _wheelDelta.x = e.deltaX * 18;\n                _wheelDelta.y = e.deltaY * 18;\n              } else {\n              _wheelDelta.x = e.deltaX;\n              _wheelDelta.y = e.deltaY;\n            }\n          } else if ('wheelDelta' in e) {\n            if (e.wheelDeltaX) {\n              _wheelDelta.x = -0.16 * e.wheelDeltaX;\n            }\n\n            if (e.wheelDeltaY) {\n              _wheelDelta.y = -0.16 * e.wheelDeltaY;\n            } else {\n              _wheelDelta.y = -0.16 * e.wheelDelta;\n            }\n          } else if ('detail' in e) {\n            _wheelDelta.y = e.detail;\n          } else {\n            return;\n          }\n\n          _calculatePanBounds(_currZoomLevel, true);\n\n          var newPanX = _panOffset.x - _wheelDelta.x,\n              newPanY = _panOffset.y - _wheelDelta.y; // only prevent scrolling in nonmodal mode when not at edges\n\n          if (_options.modal || newPanX <= _currPanBounds.min.x && newPanX >= _currPanBounds.max.x && newPanY <= _currPanBounds.min.y && newPanY >= _currPanBounds.max.y) {\n            e.preventDefault();\n          } // TODO: use rAF instead of mousewheel?\n\n\n          self.panTo(newPanX, newPanY);\n        },\n        toggleDesktopZoom: function (centerPoint) {\n          centerPoint = centerPoint || {\n            x: _viewportSize.x / 2 + _offset.x,\n            y: _viewportSize.y / 2 + _offset.y\n          };\n\n          var doubleTapZoomLevel = _options.getDoubleTapZoom(true, self.currItem);\n\n          var zoomOut = _currZoomLevel === doubleTapZoomLevel;\n          self.mouseZoomedIn = !zoomOut;\n          self.zoomTo(zoomOut ? self.currItem.initialZoomLevel : doubleTapZoomLevel, centerPoint, 333);\n          framework[(!zoomOut ? 'add' : 'remove') + 'Class'](template, 'pswp--zoomed-in');\n        }\n      }\n    });\n    /*>>desktop-zoom*/\n\n    /*>>history*/\n\n    /**\n     *\n     * history.js:\n     *\n     * - Back button to close gallery.\n     * \n     * - Unique URL for each slide: example.com/&pid=1&gid=3\n     *   (where PID is picture index, and GID and gallery index)\n     *   \n     * - Switch URL when slides change.\n     * \n     */\n\n\n    var _historyDefaultOptions = {\n      history: true,\n      galleryUID: 1\n    };\n\n    var _historyUpdateTimeout,\n        _hashChangeTimeout,\n        _hashAnimCheckTimeout,\n        _hashChangedByScript,\n        _hashChangedByHistory,\n        _hashReseted,\n        _initialHash,\n        _historyChanged,\n        _closedFromURL,\n        _urlChangedOnce,\n        _windowLoc,\n        _supportsPushState,\n        _getHash = function () {\n      return _windowLoc.hash.substring(1);\n    },\n        _cleanHistoryTimeouts = function () {\n      if (_historyUpdateTimeout) {\n        clearTimeout(_historyUpdateTimeout);\n      }\n\n      if (_hashAnimCheckTimeout) {\n        clearTimeout(_hashAnimCheckTimeout);\n      }\n    },\n        // pid - Picture index\n    // gid - Gallery index\n    _parseItemIndexFromURL = function () {\n      var hash = _getHash(),\n          params = {};\n\n      if (hash.length < 5) {\n        // pid=1\n        return params;\n      }\n\n      var i,\n          vars = hash.split('&');\n\n      for (i = 0; i < vars.length; i++) {\n        if (!vars[i]) {\n          continue;\n        }\n\n        var pair = vars[i].split('=');\n\n        if (pair.length < 2) {\n          continue;\n        }\n\n        params[pair[0]] = pair[1];\n      }\n\n      if (_options.galleryPIDs) {\n        // detect custom pid in hash and search for it among the items collection\n        var searchfor = params.pid;\n        params.pid = 0; // if custom pid cannot be found, fallback to the first item\n\n        for (i = 0; i < _items.length; i++) {\n          if (_items[i].pid === searchfor) {\n            params.pid = i;\n            break;\n          }\n        }\n      } else {\n        params.pid = parseInt(params.pid, 10) - 1;\n      }\n\n      if (params.pid < 0) {\n        params.pid = 0;\n      }\n\n      return params;\n    },\n        _updateHash = function () {\n      if (_hashAnimCheckTimeout) {\n        clearTimeout(_hashAnimCheckTimeout);\n      }\n\n      if (_numAnimations || _isDragging) {\n        // changing browser URL forces layout/paint in some browsers, which causes noticable lag during animation\n        // that's why we update hash only when no animations running\n        _hashAnimCheckTimeout = setTimeout(_updateHash, 500);\n        return;\n      }\n\n      if (_hashChangedByScript) {\n        clearTimeout(_hashChangeTimeout);\n      } else {\n        _hashChangedByScript = true;\n      }\n\n      var pid = _currentItemIndex + 1;\n\n      var item = _getItemAt(_currentItemIndex);\n\n      if (item.hasOwnProperty('pid')) {\n        // carry forward any custom pid assigned to the item\n        pid = item.pid;\n      }\n\n      var newHash = _initialHash + '&' + 'gid=' + _options.galleryUID + '&' + 'pid=' + pid;\n\n      if (!_historyChanged) {\n        if (_windowLoc.hash.indexOf(newHash) === -1) {\n          _urlChangedOnce = true;\n        } // first time - add new hisory record, then just replace\n\n      }\n\n      var newURL = _windowLoc.href.split('#')[0] + '#' + newHash;\n\n      if (_supportsPushState) {\n        if ('#' + newHash !== window.location.hash) {\n          history[_historyChanged ? 'replaceState' : 'pushState']('', document.title, newURL);\n        }\n      } else {\n        if (_historyChanged) {\n          _windowLoc.replace(newURL);\n        } else {\n          _windowLoc.hash = newHash;\n        }\n      }\n\n      _historyChanged = true;\n      _hashChangeTimeout = setTimeout(function () {\n        _hashChangedByScript = false;\n      }, 60);\n    };\n\n    _registerModule('History', {\n      publicMethods: {\n        initHistory: function () {\n          framework.extend(_options, _historyDefaultOptions, true);\n\n          if (!_options.history) {\n            return;\n          }\n\n          _windowLoc = window.location;\n          _urlChangedOnce = false;\n          _closedFromURL = false;\n          _historyChanged = false;\n          _initialHash = _getHash();\n          _supportsPushState = 'pushState' in history;\n\n          if (_initialHash.indexOf('gid=') > -1) {\n            _initialHash = _initialHash.split('&gid=')[0];\n            _initialHash = _initialHash.split('?gid=')[0];\n          }\n\n          _listen('afterChange', self.updateURL);\n\n          _listen('unbindEvents', function () {\n            framework.unbind(window, 'hashchange', self.onHashChange);\n          });\n\n          var returnToOriginal = function () {\n            _hashReseted = true;\n\n            if (!_closedFromURL) {\n              if (_urlChangedOnce) {\n                history.back();\n              } else {\n                if (_initialHash) {\n                  _windowLoc.hash = _initialHash;\n                } else {\n                  if (_supportsPushState) {\n                    // remove hash from url without refreshing it or scrolling to top\n                    history.pushState('', document.title, _windowLoc.pathname + _windowLoc.search);\n                  } else {\n                    _windowLoc.hash = '';\n                  }\n                }\n              }\n            }\n\n            _cleanHistoryTimeouts();\n          };\n\n          _listen('unbindEvents', function () {\n            if (_closedByScroll) {\n              // if PhotoSwipe is closed by scroll, we go \"back\" before the closing animation starts\n              // this is done to keep the scroll position\n              returnToOriginal();\n            }\n          });\n\n          _listen('destroy', function () {\n            if (!_hashReseted) {\n              returnToOriginal();\n            }\n          });\n\n          _listen('firstUpdate', function () {\n            _currentItemIndex = _parseItemIndexFromURL().pid;\n          });\n\n          var index = _initialHash.indexOf('pid=');\n\n          if (index > -1) {\n            _initialHash = _initialHash.substring(0, index);\n\n            if (_initialHash.slice(-1) === '&') {\n              _initialHash = _initialHash.slice(0, -1);\n            }\n          }\n\n          setTimeout(function () {\n            if (_isOpen) {\n              // hasn't destroyed yet\n              framework.bind(window, 'hashchange', self.onHashChange);\n            }\n          }, 40);\n        },\n        onHashChange: function () {\n          if (_getHash() === _initialHash) {\n            _closedFromURL = true;\n            self.close();\n            return;\n          }\n\n          if (!_hashChangedByScript) {\n            _hashChangedByHistory = true;\n            self.goTo(_parseItemIndexFromURL().pid);\n            _hashChangedByHistory = false;\n          }\n        },\n        updateURL: function () {\n          // Delay the update of URL, to avoid lag during transition, \n          // and to not to trigger actions like \"refresh page sound\" or \"blinking favicon\" to often\n          _cleanHistoryTimeouts();\n\n          if (_hashChangedByHistory) {\n            return;\n          }\n\n          if (!_historyChanged) {\n            _updateHash(); // first time\n\n          } else {\n            _historyUpdateTimeout = setTimeout(_updateHash, 800);\n          }\n        }\n      }\n    });\n    /*>>history*/\n\n\n    framework.extend(self, publicMethods);\n  };\n\n  return PhotoSwipe;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/photoswipe/dist/photoswipe.js\n");

/***/ }),

/***/ "./node_modules/photoswipe/src/js/ui/photoswipe-ui-default.js":
/*!********************************************************************!*\
  !*** ./node_modules/photoswipe/src/js/ui/photoswipe-ui-default.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n*\n* UI on top of main sliding area (caption, arrows, close button, etc.).\n* Built just using public methods/properties of PhotoSwipe.\n* \n*/\n(function (root, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(this, function () {\n  'use strict';\n\n  var PhotoSwipeUI_Default = function (pswp, framework) {\n    var ui = this;\n\n    var _overlayUIUpdated = false,\n        _controlsVisible = true,\n        _fullscrenAPI,\n        _controls,\n        _captionContainer,\n        _fakeCaptionContainer,\n        _indexIndicator,\n        _shareButton,\n        _shareModal,\n        _shareModalHidden = true,\n        _initalCloseOnScrollValue,\n        _isIdle,\n        _listen,\n        _loadingIndicator,\n        _loadingIndicatorHidden,\n        _loadingIndicatorTimeout,\n        _galleryHasOneSlide,\n        _options,\n        _defaultUIOptions = {\n      barsSize: {\n        top: 44,\n        bottom: 'auto'\n      },\n      closeElClasses: ['item', 'caption', 'zoom-wrap', 'ui', 'top-bar'],\n      timeToIdle: 4000,\n      timeToIdleOutside: 1000,\n      loadingIndicatorDelay: 1000,\n      // 2s\n      addCaptionHTMLFn: function (item, captionEl\n      /*, isFake */\n      ) {\n        if (!item.title) {\n          captionEl.children[0].innerHTML = '';\n          return false;\n        }\n\n        captionEl.children[0].innerHTML = item.title;\n        return true;\n      },\n      closeEl: true,\n      captionEl: true,\n      fullscreenEl: true,\n      zoomEl: true,\n      shareEl: true,\n      counterEl: true,\n      arrowEl: true,\n      preloaderEl: true,\n      tapToClose: false,\n      tapToToggleControls: true,\n      clickToCloseNonZoomable: true,\n      shareButtons: [{\n        id: 'facebook',\n        label: 'Share on Facebook',\n        url: 'https://www.facebook.com/sharer/sharer.php?u={{url}}'\n      }, {\n        id: 'twitter',\n        label: 'Tweet',\n        url: 'https://twitter.com/intent/tweet?text={{text}}&url={{url}}'\n      }, {\n        id: 'pinterest',\n        label: 'Pin it',\n        url: 'http://www.pinterest.com/pin/create/button/' + '?url={{url}}&media={{image_url}}&description={{text}}'\n      }, {\n        id: 'download',\n        label: 'Download image',\n        url: '{{raw_image_url}}',\n        download: true\n      }],\n      getImageURLForShare: function ()\n      /* shareButtonData */\n      {\n        return pswp.currItem.src || '';\n      },\n      getPageURLForShare: function ()\n      /* shareButtonData */\n      {\n        return window.location.href;\n      },\n      getTextForShare: function ()\n      /* shareButtonData */\n      {\n        return pswp.currItem.title || '';\n      },\n      indexIndicatorSep: ' / ',\n      fitControlsWidth: 1200\n    },\n        _blockControlsTap,\n        _blockControlsTapTimeout;\n\n    var _onControlsTap = function (e) {\n      if (_blockControlsTap) {\n        return true;\n      }\n\n      e = e || window.event;\n\n      if (_options.timeToIdle && _options.mouseUsed && !_isIdle) {\n        // reset idle timer\n        _onIdleMouseMove();\n      }\n\n      var target = e.target || e.srcElement,\n          uiElement,\n          clickedClass = target.getAttribute('class') || '',\n          found;\n\n      for (var i = 0; i < _uiElements.length; i++) {\n        uiElement = _uiElements[i];\n\n        if (uiElement.onTap && clickedClass.indexOf('pswp__' + uiElement.name) > -1) {\n          uiElement.onTap();\n          found = true;\n        }\n      }\n\n      if (found) {\n        if (e.stopPropagation) {\n          e.stopPropagation();\n        }\n\n        _blockControlsTap = true; // Some versions of Android don't prevent ghost click event \n        // when preventDefault() was called on touchstart and/or touchend.\n        // \n        // This happens on v4.3, 4.2, 4.1, \n        // older versions strangely work correctly, \n        // but just in case we add delay on all of them)\t\n\n        var tapDelay = framework.features.isOldAndroid ? 600 : 30;\n        _blockControlsTapTimeout = setTimeout(function () {\n          _blockControlsTap = false;\n        }, tapDelay);\n      }\n    },\n        _fitControlsInViewport = function () {\n      return !pswp.likelyTouchDevice || _options.mouseUsed || screen.width > _options.fitControlsWidth;\n    },\n        _togglePswpClass = function (el, cName, add) {\n      framework[(add ? 'add' : 'remove') + 'Class'](el, 'pswp__' + cName);\n    },\n        // add class when there is just one item in the gallery\n    // (by default it hides left/right arrows and 1ofX counter)\n    _countNumItems = function () {\n      var hasOneSlide = _options.getNumItemsFn() === 1;\n\n      if (hasOneSlide !== _galleryHasOneSlide) {\n        _togglePswpClass(_controls, 'ui--one-slide', hasOneSlide);\n\n        _galleryHasOneSlide = hasOneSlide;\n      }\n    },\n        _toggleShareModalClass = function () {\n      _togglePswpClass(_shareModal, 'share-modal--hidden', _shareModalHidden);\n    },\n        _toggleShareModal = function () {\n      _shareModalHidden = !_shareModalHidden;\n\n      if (!_shareModalHidden) {\n        _toggleShareModalClass();\n\n        setTimeout(function () {\n          if (!_shareModalHidden) {\n            framework.addClass(_shareModal, 'pswp__share-modal--fade-in');\n          }\n        }, 30);\n      } else {\n        framework.removeClass(_shareModal, 'pswp__share-modal--fade-in');\n        setTimeout(function () {\n          if (_shareModalHidden) {\n            _toggleShareModalClass();\n          }\n        }, 300);\n      }\n\n      if (!_shareModalHidden) {\n        _updateShareURLs();\n      }\n\n      return false;\n    },\n        _openWindowPopup = function (e) {\n      e = e || window.event;\n      var target = e.target || e.srcElement;\n      pswp.shout('shareLinkClick', e, target);\n\n      if (!target.href) {\n        return false;\n      }\n\n      if (target.hasAttribute('download')) {\n        return true;\n      }\n\n      window.open(target.href, 'pswp_share', 'scrollbars=yes,resizable=yes,toolbar=no,' + 'location=yes,width=550,height=420,top=100,left=' + (window.screen ? Math.round(screen.width / 2 - 275) : 100));\n\n      if (!_shareModalHidden) {\n        _toggleShareModal();\n      }\n\n      return false;\n    },\n        _updateShareURLs = function () {\n      var shareButtonOut = '',\n          shareButtonData,\n          shareURL,\n          image_url,\n          page_url,\n          share_text;\n\n      for (var i = 0; i < _options.shareButtons.length; i++) {\n        shareButtonData = _options.shareButtons[i];\n        image_url = _options.getImageURLForShare(shareButtonData);\n        page_url = _options.getPageURLForShare(shareButtonData);\n        share_text = _options.getTextForShare(shareButtonData);\n        shareURL = shareButtonData.url.replace('{{url}}', encodeURIComponent(page_url)).replace('{{image_url}}', encodeURIComponent(image_url)).replace('{{raw_image_url}}', image_url).replace('{{text}}', encodeURIComponent(share_text));\n        shareButtonOut += '<a href=\"' + shareURL + '\" target=\"_blank\" ' + 'class=\"pswp__share--' + shareButtonData.id + '\"' + (shareButtonData.download ? 'download' : '') + '>' + shareButtonData.label + '</a>';\n\n        if (_options.parseShareButtonOut) {\n          shareButtonOut = _options.parseShareButtonOut(shareButtonData, shareButtonOut);\n        }\n      }\n\n      _shareModal.children[0].innerHTML = shareButtonOut;\n      _shareModal.children[0].onclick = _openWindowPopup;\n    },\n        _hasCloseClass = function (target) {\n      for (var i = 0; i < _options.closeElClasses.length; i++) {\n        if (framework.hasClass(target, 'pswp__' + _options.closeElClasses[i])) {\n          return true;\n        }\n      }\n    },\n        _idleInterval,\n        _idleTimer,\n        _idleIncrement = 0,\n        _onIdleMouseMove = function () {\n      clearTimeout(_idleTimer);\n      _idleIncrement = 0;\n\n      if (_isIdle) {\n        ui.setIdle(false);\n      }\n    },\n        _onMouseLeaveWindow = function (e) {\n      e = e ? e : window.event;\n      var from = e.relatedTarget || e.toElement;\n\n      if (!from || from.nodeName === 'HTML') {\n        clearTimeout(_idleTimer);\n        _idleTimer = setTimeout(function () {\n          ui.setIdle(true);\n        }, _options.timeToIdleOutside);\n      }\n    },\n        _setupFullscreenAPI = function () {\n      if (_options.fullscreenEl && !framework.features.isOldAndroid) {\n        if (!_fullscrenAPI) {\n          _fullscrenAPI = ui.getFullscreenAPI();\n        }\n\n        if (_fullscrenAPI) {\n          framework.bind(document, _fullscrenAPI.eventK, ui.updateFullscreen);\n          ui.updateFullscreen();\n          framework.addClass(pswp.template, 'pswp--supports-fs');\n        } else {\n          framework.removeClass(pswp.template, 'pswp--supports-fs');\n        }\n      }\n    },\n        _setupLoadingIndicator = function () {\n      // Setup loading indicator\n      if (_options.preloaderEl) {\n        _toggleLoadingIndicator(true);\n\n        _listen('beforeChange', function () {\n          clearTimeout(_loadingIndicatorTimeout); // display loading indicator with delay\n\n          _loadingIndicatorTimeout = setTimeout(function () {\n            if (pswp.currItem && pswp.currItem.loading) {\n              if (!pswp.allowProgressiveImg() || pswp.currItem.img && !pswp.currItem.img.naturalWidth) {\n                // show preloader if progressive loading is not enabled, \n                // or image width is not defined yet (because of slow connection)\n                _toggleLoadingIndicator(false); // items-controller.js function allowProgressiveImg\n\n              }\n            } else {\n              _toggleLoadingIndicator(true); // hide preloader\n\n            }\n          }, _options.loadingIndicatorDelay);\n        });\n\n        _listen('imageLoadComplete', function (index, item) {\n          if (pswp.currItem === item) {\n            _toggleLoadingIndicator(true);\n          }\n        });\n      }\n    },\n        _toggleLoadingIndicator = function (hide) {\n      if (_loadingIndicatorHidden !== hide) {\n        _togglePswpClass(_loadingIndicator, 'preloader--active', !hide);\n\n        _loadingIndicatorHidden = hide;\n      }\n    },\n        _applyNavBarGaps = function (item) {\n      var gap = item.vGap;\n\n      if (_fitControlsInViewport()) {\n        var bars = _options.barsSize;\n\n        if (_options.captionEl && bars.bottom === 'auto') {\n          if (!_fakeCaptionContainer) {\n            _fakeCaptionContainer = framework.createEl('pswp__caption pswp__caption--fake');\n\n            _fakeCaptionContainer.appendChild(framework.createEl('pswp__caption__center'));\n\n            _controls.insertBefore(_fakeCaptionContainer, _captionContainer);\n\n            framework.addClass(_controls, 'pswp__ui--fit');\n          }\n\n          if (_options.addCaptionHTMLFn(item, _fakeCaptionContainer, true)) {\n            var captionSize = _fakeCaptionContainer.clientHeight;\n            gap.bottom = parseInt(captionSize, 10) || 44;\n          } else {\n            gap.bottom = bars.top; // if no caption, set size of bottom gap to size of top\n          }\n        } else {\n          gap.bottom = bars.bottom === 'auto' ? 0 : bars.bottom;\n        } // height of top bar is static, no need to calculate it\n\n\n        gap.top = bars.top;\n      } else {\n        gap.top = gap.bottom = 0;\n      }\n    },\n        _setupIdle = function () {\n      // Hide controls when mouse is used\n      if (_options.timeToIdle) {\n        _listen('mouseUsed', function () {\n          framework.bind(document, 'mousemove', _onIdleMouseMove);\n          framework.bind(document, 'mouseout', _onMouseLeaveWindow);\n          _idleInterval = setInterval(function () {\n            _idleIncrement++;\n\n            if (_idleIncrement === 2) {\n              ui.setIdle(true);\n            }\n          }, _options.timeToIdle / 2);\n        });\n      }\n    },\n        _setupHidingControlsDuringGestures = function () {\n      // Hide controls on vertical drag\n      _listen('onVerticalDrag', function (now) {\n        if (_controlsVisible && now < 0.95) {\n          ui.hideControls();\n        } else if (!_controlsVisible && now >= 0.95) {\n          ui.showControls();\n        }\n      }); // Hide controls when pinching to close\n\n\n      var pinchControlsHidden;\n\n      _listen('onPinchClose', function (now) {\n        if (_controlsVisible && now < 0.9) {\n          ui.hideControls();\n          pinchControlsHidden = true;\n        } else if (pinchControlsHidden && !_controlsVisible && now > 0.9) {\n          ui.showControls();\n        }\n      });\n\n      _listen('zoomGestureEnded', function () {\n        pinchControlsHidden = false;\n\n        if (pinchControlsHidden && !_controlsVisible) {\n          ui.showControls();\n        }\n      });\n    };\n\n    var _uiElements = [{\n      name: 'caption',\n      option: 'captionEl',\n      onInit: function (el) {\n        _captionContainer = el;\n      }\n    }, {\n      name: 'share-modal',\n      option: 'shareEl',\n      onInit: function (el) {\n        _shareModal = el;\n      },\n      onTap: function () {\n        _toggleShareModal();\n      }\n    }, {\n      name: 'button--share',\n      option: 'shareEl',\n      onInit: function (el) {\n        _shareButton = el;\n      },\n      onTap: function () {\n        _toggleShareModal();\n      }\n    }, {\n      name: 'button--zoom',\n      option: 'zoomEl',\n      onTap: pswp.toggleDesktopZoom\n    }, {\n      name: 'counter',\n      option: 'counterEl',\n      onInit: function (el) {\n        _indexIndicator = el;\n      }\n    }, {\n      name: 'button--close',\n      option: 'closeEl',\n      onTap: pswp.close\n    }, {\n      name: 'button--arrow--left',\n      option: 'arrowEl',\n      onTap: pswp.prev\n    }, {\n      name: 'button--arrow--right',\n      option: 'arrowEl',\n      onTap: pswp.next\n    }, {\n      name: 'button--fs',\n      option: 'fullscreenEl',\n      onTap: function () {\n        if (_fullscrenAPI.isFullscreen()) {\n          _fullscrenAPI.exit();\n        } else {\n          _fullscrenAPI.enter();\n        }\n      }\n    }, {\n      name: 'preloader',\n      option: 'preloaderEl',\n      onInit: function (el) {\n        _loadingIndicator = el;\n      }\n    }];\n\n    var _setupUIElements = function () {\n      var item, classAttr, uiElement;\n\n      var loopThroughChildElements = function (sChildren) {\n        if (!sChildren) {\n          return;\n        }\n\n        var l = sChildren.length;\n\n        for (var i = 0; i < l; i++) {\n          item = sChildren[i];\n          classAttr = item.className;\n\n          for (var a = 0; a < _uiElements.length; a++) {\n            uiElement = _uiElements[a];\n\n            if (classAttr.indexOf('pswp__' + uiElement.name) > -1) {\n              if (_options[uiElement.option]) {\n                // if element is not disabled from options\n                framework.removeClass(item, 'pswp__element--disabled');\n\n                if (uiElement.onInit) {\n                  uiElement.onInit(item);\n                } //item.style.display = 'block';\n\n              } else {\n                framework.addClass(item, 'pswp__element--disabled'); //item.style.display = 'none';\n              }\n            }\n          }\n        }\n      };\n\n      loopThroughChildElements(_controls.children);\n      var topBar = framework.getChildByClass(_controls, 'pswp__top-bar');\n\n      if (topBar) {\n        loopThroughChildElements(topBar.children);\n      }\n    };\n\n    ui.init = function () {\n      // extend options\n      framework.extend(pswp.options, _defaultUIOptions, true); // create local link for fast access\n\n      _options = pswp.options; // find pswp__ui element\n\n      _controls = framework.getChildByClass(pswp.scrollWrap, 'pswp__ui'); // create local link\n\n      _listen = pswp.listen;\n\n      _setupHidingControlsDuringGestures(); // update controls when slides change\n\n\n      _listen('beforeChange', ui.update); // toggle zoom on double-tap\n\n\n      _listen('doubleTap', function (point) {\n        var initialZoomLevel = pswp.currItem.initialZoomLevel;\n\n        if (pswp.getZoomLevel() !== initialZoomLevel) {\n          pswp.zoomTo(initialZoomLevel, point, 333);\n        } else {\n          pswp.zoomTo(_options.getDoubleTapZoom(false, pswp.currItem), point, 333);\n        }\n      }); // Allow text selection in caption\n\n\n      _listen('preventDragEvent', function (e, isDown, preventObj) {\n        var t = e.target || e.srcElement;\n\n        if (t && t.getAttribute('class') && e.type.indexOf('mouse') > -1 && (t.getAttribute('class').indexOf('__caption') > 0 || /(SMALL|STRONG|EM)/i.test(t.tagName))) {\n          preventObj.prevent = false;\n        }\n      }); // bind events for UI\n\n\n      _listen('bindEvents', function () {\n        framework.bind(_controls, 'pswpTap click', _onControlsTap);\n        framework.bind(pswp.scrollWrap, 'pswpTap', ui.onGlobalTap);\n\n        if (!pswp.likelyTouchDevice) {\n          framework.bind(pswp.scrollWrap, 'mouseover', ui.onMouseOver);\n        }\n      }); // unbind events for UI\n\n\n      _listen('unbindEvents', function () {\n        if (!_shareModalHidden) {\n          _toggleShareModal();\n        }\n\n        if (_idleInterval) {\n          clearInterval(_idleInterval);\n        }\n\n        framework.unbind(document, 'mouseout', _onMouseLeaveWindow);\n        framework.unbind(document, 'mousemove', _onIdleMouseMove);\n        framework.unbind(_controls, 'pswpTap click', _onControlsTap);\n        framework.unbind(pswp.scrollWrap, 'pswpTap', ui.onGlobalTap);\n        framework.unbind(pswp.scrollWrap, 'mouseover', ui.onMouseOver);\n\n        if (_fullscrenAPI) {\n          framework.unbind(document, _fullscrenAPI.eventK, ui.updateFullscreen);\n\n          if (_fullscrenAPI.isFullscreen()) {\n            _options.hideAnimationDuration = 0;\n\n            _fullscrenAPI.exit();\n          }\n\n          _fullscrenAPI = null;\n        }\n      }); // clean up things when gallery is destroyed\n\n\n      _listen('destroy', function () {\n        if (_options.captionEl) {\n          if (_fakeCaptionContainer) {\n            _controls.removeChild(_fakeCaptionContainer);\n          }\n\n          framework.removeClass(_captionContainer, 'pswp__caption--empty');\n        }\n\n        if (_shareModal) {\n          _shareModal.children[0].onclick = null;\n        }\n\n        framework.removeClass(_controls, 'pswp__ui--over-close');\n        framework.addClass(_controls, 'pswp__ui--hidden');\n        ui.setIdle(false);\n      });\n\n      if (!_options.showAnimationDuration) {\n        framework.removeClass(_controls, 'pswp__ui--hidden');\n      }\n\n      _listen('initialZoomIn', function () {\n        if (_options.showAnimationDuration) {\n          framework.removeClass(_controls, 'pswp__ui--hidden');\n        }\n      });\n\n      _listen('initialZoomOut', function () {\n        framework.addClass(_controls, 'pswp__ui--hidden');\n      });\n\n      _listen('parseVerticalMargin', _applyNavBarGaps);\n\n      _setupUIElements();\n\n      if (_options.shareEl && _shareButton && _shareModal) {\n        _shareModalHidden = true;\n      }\n\n      _countNumItems();\n\n      _setupIdle();\n\n      _setupFullscreenAPI();\n\n      _setupLoadingIndicator();\n    };\n\n    ui.setIdle = function (isIdle) {\n      _isIdle = isIdle;\n\n      _togglePswpClass(_controls, 'ui--idle', isIdle);\n    };\n\n    ui.update = function () {\n      // Don't update UI if it's hidden\n      if (_controlsVisible && pswp.currItem) {\n        ui.updateIndexIndicator();\n\n        if (_options.captionEl) {\n          _options.addCaptionHTMLFn(pswp.currItem, _captionContainer);\n\n          _togglePswpClass(_captionContainer, 'caption--empty', !pswp.currItem.title);\n        }\n\n        _overlayUIUpdated = true;\n      } else {\n        _overlayUIUpdated = false;\n      }\n\n      if (!_shareModalHidden) {\n        _toggleShareModal();\n      }\n\n      _countNumItems();\n    };\n\n    ui.updateFullscreen = function (e) {\n      if (e) {\n        // some browsers change window scroll position during the fullscreen\n        // so PhotoSwipe updates it just in case\n        setTimeout(function () {\n          pswp.setScrollOffset(0, framework.getScrollY());\n        }, 50);\n      } // toogle pswp--fs class on root element\n\n\n      framework[(_fullscrenAPI.isFullscreen() ? 'add' : 'remove') + 'Class'](pswp.template, 'pswp--fs');\n    };\n\n    ui.updateIndexIndicator = function () {\n      if (_options.counterEl) {\n        _indexIndicator.innerHTML = pswp.getCurrentIndex() + 1 + _options.indexIndicatorSep + _options.getNumItemsFn();\n      }\n    };\n\n    ui.onGlobalTap = function (e) {\n      e = e || window.event;\n      var target = e.target || e.srcElement;\n\n      if (_blockControlsTap) {\n        return;\n      }\n\n      if (e.detail && e.detail.pointerType === 'mouse') {\n        // close gallery if clicked outside of the image\n        if (_hasCloseClass(target)) {\n          pswp.close();\n          return;\n        }\n\n        if (framework.hasClass(target, 'pswp__img')) {\n          if (pswp.getZoomLevel() === 1 && pswp.getZoomLevel() <= pswp.currItem.fitRatio) {\n            if (_options.clickToCloseNonZoomable) {\n              pswp.close();\n            }\n          } else {\n            pswp.toggleDesktopZoom(e.detail.releasePoint);\n          }\n        }\n      } else {\n        // tap anywhere (except buttons) to toggle visibility of controls\n        if (_options.tapToToggleControls) {\n          if (_controlsVisible) {\n            ui.hideControls();\n          } else {\n            ui.showControls();\n          }\n        } // tap to close gallery\n\n\n        if (_options.tapToClose && (framework.hasClass(target, 'pswp__img') || _hasCloseClass(target))) {\n          pswp.close();\n          return;\n        }\n      }\n    };\n\n    ui.onMouseOver = function (e) {\n      e = e || window.event;\n      var target = e.target || e.srcElement; // add class when mouse is over an element that should close the gallery\n\n      _togglePswpClass(_controls, 'ui--over-close', _hasCloseClass(target));\n    };\n\n    ui.hideControls = function () {\n      framework.addClass(_controls, 'pswp__ui--hidden');\n      _controlsVisible = false;\n    };\n\n    ui.showControls = function () {\n      _controlsVisible = true;\n\n      if (!_overlayUIUpdated) {\n        ui.update();\n      }\n\n      framework.removeClass(_controls, 'pswp__ui--hidden');\n    };\n\n    ui.supportsFullscreen = function () {\n      var d = document;\n      return !!(d.exitFullscreen || d.mozCancelFullScreen || d.webkitExitFullscreen || d.msExitFullscreen);\n    };\n\n    ui.getFullscreenAPI = function () {\n      var dE = document.documentElement,\n          api,\n          tF = 'fullscreenchange';\n\n      if (dE.requestFullscreen) {\n        api = {\n          enterK: 'requestFullscreen',\n          exitK: 'exitFullscreen',\n          elementK: 'fullscreenElement',\n          eventK: tF\n        };\n      } else if (dE.mozRequestFullScreen) {\n        api = {\n          enterK: 'mozRequestFullScreen',\n          exitK: 'mozCancelFullScreen',\n          elementK: 'mozFullScreenElement',\n          eventK: 'moz' + tF\n        };\n      } else if (dE.webkitRequestFullscreen) {\n        api = {\n          enterK: 'webkitRequestFullscreen',\n          exitK: 'webkitExitFullscreen',\n          elementK: 'webkitFullscreenElement',\n          eventK: 'webkit' + tF\n        };\n      } else if (dE.msRequestFullscreen) {\n        api = {\n          enterK: 'msRequestFullscreen',\n          exitK: 'msExitFullscreen',\n          elementK: 'msFullscreenElement',\n          eventK: 'MSFullscreenChange'\n        };\n      }\n\n      if (api) {\n        api.enter = function () {\n          // disable close-on-scroll in fullscreen\n          _initalCloseOnScrollValue = _options.closeOnScroll;\n          _options.closeOnScroll = false;\n\n          if (this.enterK === 'webkitRequestFullscreen') {\n            pswp.template[this.enterK](Element.ALLOW_KEYBOARD_INPUT);\n          } else {\n            return pswp.template[this.enterK]();\n          }\n        };\n\n        api.exit = function () {\n          _options.closeOnScroll = _initalCloseOnScrollValue;\n          return document[this.exitK]();\n        };\n\n        api.isFullscreen = function () {\n          return document[this.elementK];\n        };\n      }\n\n      return api;\n    };\n  };\n\n  return PhotoSwipeUI_Default;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/photoswipe/src/js/ui/photoswipe-ui-default.js\n");

/***/ }),

/***/ 0:
/*!**********************************************************************!*\
  !*** multi photoswipe photoswipe/src/js/ui/photoswipe-ui-default.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! photoswipe */"./node_modules/photoswipe/dist/photoswipe.js");
module.exports = __webpack_require__(/*! photoswipe/src/js/ui/photoswipe-ui-default.js */"./node_modules/photoswipe/src/js/ui/photoswipe-ui-default.js");


/***/ })

/******/ });